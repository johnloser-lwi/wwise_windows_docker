{
    "version": 1,
    "definitions": {
        "projectCliArg": {
            "type": "string",
            "description": "The path to the project file (.wproj).",
            "synopsis": ["PROJECT"]
        },
        "verboseCliArg": {
            "type": "boolean",
            "description": "Enables extra console text output.",
            "synopsis": ["--verbose"]
        },
        "quietCliArg": {
            "type": "boolean",
            "description": "Disables all non-error console text output.",
            "synopsis": ["--quiet"]
        },
        "abortOnLoadIssuesCliArg": {
            "type": "boolean",
            "description": "Aborts the operation if a project load issue is detected. All logged project load issues are printed to screen.",
            "synopsis": ["--abort-on-load-issues"]
        },
        "continueOnErrorCliArg": {
            "type": "boolean",
            "description": "Use this option if you want to continue even if an error occurred.",
            "synopsis": ["--continue-on-error"]
        },
        "customGlobalClosingCmdCliArg": {
            "type": "string",
            "description": "Overrides the global closing step that was defined in Wwise. This option must be followed by the new command line (use quotes if there are spaces). An empty string (\"\") specified for the command-line means no global closing step is executed.",
            "synopsis": ["--custom-global-closing-cmd CMD"]
        },
        "customGlobalOpeningCmdCliArg": {
            "type": "string",
            "description": "Overrides the global opening step that was defined in Wwise. This option must be followed by the new command line (use quotes if there are spaces). An empty string (\"\") specified for the command-line means no global opening step is executed.",
            "synopsis": ["--custom-global-opening-cmd CMD"]
        },
        "audioSourceFromOriginalCliArg": {
            "type": "boolean",
            "description": "It is possible that a project already contains some audio source files of the same name as the imported ones when doing a tab delimited import. By adding this option, the operation uses those instead of replacing them with those described by the tab-delimited file.",
            "synopsis": ["--audio-source-from-original"]
        },
        "importLanguageCliArg": {
            "type": "string",
            "description": "With the tab-delimited import operation it is possible to import voices. This option is used to specify the language of the imported voices. This option must be followed by one of the language identifiers listed with the --language option. Note that only audio files are added for this operation; any attempt to concurrently perform other operations, such as volume adjustments, is ignored.",
            "synopsis": ["--import-language LANGUAGE"]
        },
        "allowMigrationCliArg": {
            "type": "boolean",
            "description": "Allow migration and save of the Wwise project before executing the operation.",
            "synopsis": ["--allow-migration"]
        },
		"noWwiseDatArg": {
			"type": "boolean",
			"description": "Disables writing to hidden 'wwise.dat' files when converting audio files. This is useful when calling from a build tool that already handles file dependencies, as it allows multiple instances of Wwise to convert to the same directory simultaneously, without conflicting. Note that this option does not prevent the reading of existing hidden 'wwise.dat' files.",
			"synopsis": ["--no-wwise-dat"]
		},
        "processResultCli": {
            "type": "number",
            "description": "A WwiseConsole.exe exit code of 0 means success, 1 means at least one error (and potentially warnings) occurred, and 2 means that only warnings occurred."
        },
        "importOperationType": {
            "type": "string",
            "enum": [ "createNew", "useExisting", "replaceExisting" ],
            "description": "Determines how import object creation is performed. For each object created:\n- createNew: creates a new object; the object is given the desired name if possible, otherwise a new unique name is used.\n- useExisting: uses the object if it exists, updating the specified properties; otherwise it creates a new object. This is the default value.\n- replaceExisting: creates a new object; if an existing object has the same name then the existing object is destroyed."
        },
        "tabDelimitedOperationCli": {
            "type": "string",
            "enum": [ "createNew", "useExisting", "replaceExisting" ],
            "description": "Determines how import object creation is performed for each object created. \"createNew\": creates a new object; the object is given the desired name if possible, otherwise a new unique name is used. \"useExisting\": uses the object if it exists, updating the specified properties; otherwise it creates a new object. This is the default value. \"replaceExisting\": creates a new object; if an existing object has the same name then the existing object is destroyed.",
            "synopsis": [
                "--tab-delimited-operation createNew",
                "--tab-delimited-operation useExisting",
                "--tab-delimited-operation replaceExisting"
            ]
        },
        "guid": {
            "type": "string",
            "pattern": "^\\{[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\}$",
            "description": "An object GUID of the form: {aabbcc00-1122-3344-5566-77889900aabb}."
        },
        "soundEngineObjectArg": {
            "anyOf": [
                { "$ref": "#/definitions/uniqueName" },
                { "$ref": "#/definitions/guid" },
                { 
                    "$ref": "#/definitions/uint32",
                    "description": "The Short ID of a Wwise Object."
                }
            ]
        },
        "uniqueName": {
            "type": "string",
            "pattern": "^[a-zA-Z_]+[a-zA-Z_0-9()]*$",
            "description": "The name of the object."
        },
        "uniqueQualifiedName": {
            "type": "string",
            "pattern": "^(StateGroup|SwitchGroup|SoundBank|GameParameter|Event|Effect|AudioDevice|Trigger|Attenuation|DialogueEvent|Bus|AuxBus|Conversion|ModulatorLfo|ModulatorEnvelope|ModulatorTime|Platform|Language|AcousticTexture):[a-zA-Z_]+[a-zA-Z0-9_]*$",
            "description": "The name of the object qualified by its type in the form of type:name. Only object types that have globally-unique names are supported. Ex: Event:Play_Sound_01"
        },
        "propertyName": {
            "type": "string",
            "pattern": "^[:a-zA-Z0-9 _]+$",
            "description": "A property name. Refer to \\ref wobjects_index for information about the Wwise objects and their properties."
        },
        "objectPathArg": {
            "type": "string",
            "pattern": "^\\\\",
            "description": "A project path to a Wwise object, including the category and the work-unit. For example: \\\\Actor-Mixer Hierarchy\\\\Default Work Unit\\\\New Sound SFX."
        },
        "objectArg": {
            "anyOf": [
                { "$ref": "#/definitions/uniqueQualifiedName" },
                { "$ref": "#/definitions/guid" },
                { "$ref": "#/definitions/objectPathArg" }
            ]
        },
        "platformArg": {
            "anyOf": [
                { "$ref": "#/definitions/uniqueName" },
                { "$ref": "#/definitions/guid" }
            ]
        },
        "languageArg": {
            "anyOf": [
                { "$ref": "#/definitions/uniqueName" },
                { "$ref": "#/definitions/guid" }
            ]
        },
        "shortId": {
            "type": "object",
            "description": "A Wwise object Short ID with its associated type.",
            "properties": {
                "shortId": {
                    "$ref": "#/definitions/uint32",
                    "description": "The Short ID of the object."
                },
                "type": {
                    "type": "integer",
                    "minimum": 1,
                    "description": "The type of object for the Short ID. Refer to \\ref wobjects_index for object types."
                }
            },
            "required": [ "shortId", "type" ],
            "additionalProperties": false
        },
        "profilerCursor": {
            "type": "string",
            "description": "Identify one of the global profiler cursors.",
            "enum": [ "user", "capture" ]
        },
        "cursorTime": {
            "oneOf": [
                {
                    "type": "integer",
                    "minimum": 0
                },
                {
                    "$ref": "#/definitions/profilerCursor"
                }
            ]
        },
        "pipelineID": {
            "type": "number",
            "description": "Identifies a playing voice instance ID.",
            "minimum": 0
        },
        "voiceContributionsObject": {
            "type": "object",
            "description": "Identifies a Voice Inspector contribution.",
            "additionalProperties" : false,
            "properties": {
                "name": { 
                    "type": "string",
                    "description": "The name of the contribution."
                },
                "volume": { 
                    "type": "number",
                    "description": "The volume difference applied."
                },
                "LPF": { 
                    "type": "number",
                    "description": "The LPF difference applied."
                },
                "HPF": { 
                    "type": "number",
                    "description": "The HPF difference applied."
                },
                "children": {
                    "type": "array",
                    "description": "An array of child objects associated to the object.",
                    "items": {
                        "$ref": "#/definitions/voiceContributionsObject",
                        "description": "A voice contribution object."
                    }
                },
                "parameters": {
                    "type": "array",
                    "description": "An array of contribution parameters associated to the object.",
                    "items": {
                        "type": "object",
                        "description": "A contribution parameter.",
                        "additionalProperties" : false,
                        "properties": {
                            "propertyType": {
                                "type": "string",
                                "description": "The object property affecting the voice"
                            },
                            "reason": {
                                "type": "string",
                                "description": "The reason for the parameter to affect the voice."
                            },
                            "driver": {
                                "oneOf": [
                                    { 
                                        "$ref": "#/definitions/guid", 
                                        "description": "The driving object GUID." 
                                    },
                                    { 
                                        "type": "string", 
                                        "description": "The driving reason when a parameter is not driven by an object." 
                                    }
                                ]
                            },
                            "driverValue": {
                                "oneOf": [
                                    { 
                                        "type": "number", 
                                        "description": "The value of the driver affecting the parameter." 
                                    },
                                    { 
                                        "$ref": "#/definitions/guid", 
                                        "description": "Can be an object, e.g. for States." 
                                    }
                                ]
                            },
                            "value": {
                                "type": "number",
                                "description": "Contribution value"
                            }
                        }
                    }
                }
            }
        },
        "busReturnOptions": {
            "type": "array",
            "description": "An array of options to receive.",
            "items": {
                "type": "string",
                "description": "Specifies one of the defined members for a bus pipeline structure.",
                "enum": [
                    "pipelineID",
                    "mixBusID",
                    "objectGUID",
                    "objectName",
                    "gameObjectID",
                    "gameObjectName",
                    "mixerID",
                    "deviceID",
                    "volume",
                    "downstreamGain",
                    "voiceCount",
                    "depth"
                ]}
        },
        "busReturn": {
            "type": "object",
            "description": "A mixing bus object. Use the return options to specify which property is required.",
            "properties": {
                "pipelineID": {
                    "$ref": "#/definitions/uint32",
                    "description": "Pipeline ID of the bus."
                },
                "mixBusID": {
                    "$ref": "#/definitions/uint64",
                    "description": "Unique ID assigned to a mixing bus."
                },
                "objectGUID": {
                    "$ref": "#/definitions/guid",
                    "description": "Object GUID corresponding to the bus."
                },
                "objectName": {
                    "type": "string",
                    "description": "Object Name corresponding to the bus."
                },
                "gameObjectID": {
                    "$ref": "#/definitions/uint64",
                    "description": "Game Object ID corresponding to the voice."
                },
                "gameObjectName": {
                    "type": "string",
                    "description": "Game Object Name corresponding to the voice."
                },
                "mixerID": {
                    "$ref": "#/definitions/uint32",
                    "description": "Mixer plugin ID."
                },
                "deviceID": {
                    "$ref": "#/definitions/uint64",
                    "description": "Audio Output device ID."
                },
                "volume": {
                    "type": "number",
                    "description": "Gain of the bus in dB."
                },
                "downstreamGain": {
                    "type": "number",
                    "description": "Gain from current bus down to output in dB."
                },
                "voiceCount": {
                    "$ref": "#/definitions/uint32",
                    "description": "Number of voices routed to the bus."
                },
                "depth": {
                    "type": "integer",
                    "description": "Depth level of the bus in the pipeline."
                }
            }
        },
        "audioObjectReturnOptions": {
            "type": "array",
            "description": "An array of options for the Audio Objects.",
            "items": {
                "type": "string",
                "description": "Specifies one of the defined members for an Audio Object structure.",
                "enum": [
                    "busName",
                    "effectPluginName",
                    "audioObjectID",
					"busPipelineID",
					"gameObjectID",
					"gameObjectName",
					"audioObjectName",
					"instigatorPipelineID",
					"busID",
					"busGUID",
					"spatializationMode",
					"x",
					"y",
					"z",
					"spread",
					"focus",
					"channelConfig",
					"effectClassID",
					"effectIndex",
					"metadata",
					"rmsMeter",
					"peakMeter"
                ]
            }
        },
        "audioObjectReturn": {
            "type": "object",
            "description": "An audio object. Use the return options to specify which property is required.",
            "properties": {
                "busName": {
                    "type": "string",
                    "description": "Name of the bus instance."
                },
                "effectPluginName": {
                    "type": "string",
                    "description": "Name of the effect plug-in after which the Audio Object was captured."
                },
                "audioObjectID": {
                    "$ref": "#/definitions/uint64",
                    "description": "The ID of the Audio Object."
                },
				"busPipelineID": {
                    "$ref": "#/definitions/uint32",
                    "description": "The Pipeline ID of the Bus instance."
                },
				"gameObjectID": {
                    "$ref": "#/definitions/uint64",
                    "description": "The Game Object ID of the Bus instance."
                },
				"gameObjectName": {
                    "type": "string",
                    "description": "The name of the Game Object of the Bus Instance."
                },
				"audioObjectName": {
                    "type": "string",
                    "description": "The name of the Audio Object. Can be empty."
                },
				"instigatorPipelineID": {
                    "$ref": "#/definitions/uint32",
                    "description": "The pipeline ID of the instigator from which the Audio Object originates. Can be either a Bus instance or a Voice."
                },
				"busID": {
                    "$ref": "#/definitions/uint32",
                    "description": "The short ID of the Bus."
                },
				"busGUID": {
                    "$ref": "#/definitions/guid",
                    "description": "The GUID of the Bus."
                },
				"spatializationMode": {
                    "$ref": "#/definitions/uint32",
                    "description": "The spatialization mode. Use <tt>Ak3DSpatializationMode</tt> to interpret the value."
                },
				"x": {
                    "type": "number",
                    "description": "The X value of the Audio Object position."
                },
				"y": {
                    "type": "number",
                    "description": "The Y value of the Audio Object position."
                },
				"z": {
                    "type": "number",
                    "description": "The Z value of the Audio Object position."
                },
				"spread": {
                    "type": "number",
                    "description": "The spread value (normalized) of the Audio Object."
                },
				"focus": {
                    "type": "number",
                    "description": "The focus value (normalized) of the Audio Object."
                },
				"channelConfig": {
                    "$ref": "#/definitions/uint32",
                    "description": "The channel configuration of the Audio Object. Use <tt>AK::AkChannelConfig::Deserialize</tt> to deserialize the value."
                },
				"effectClassID": {
                    "$ref": "#/definitions/uint32",
                    "description": "The Class ID of the effect after which the Audio Object was captured. Usage of <tt>AK_INVALID_UNIQUE_ID</tt> constant means that this Audio Object was captured before applying the first effect."
                },
				"effectIndex": {
                    "$ref": "#/definitions/uint32",
                    "description": "The index of the effect after which the Audio Object was captured."
                },
				"metadata": {
					"type": "array",
					"description": "Array of objects containing metadata of the Audio Object.",
					"items": {
						"type": "object",
						"description": "An object of metadata.",
						"properties": {
							"metadataClassID": {
								"$ref": "#/definitions/uint32",
								"description": "The class ID of the metadata."
							},
							"metadataName": {
								"type": "string",
								"description": "The name of the metadata."
							},
							"sourceID": {
								"type": "string",
								"description": "The ID (GUID) of the source object."
							},
							"sourceShortID": {
								"$ref": "#/definitions/uint32",
								"description": "The short ID of the source object."
							},
							"sourceName": {
								"type": "string",
								"description": "The name of the source object."
							}
						},
						"required":["metadataClassID", "sourceShortID"],
						"additionalProperties": false
					}
				},
				"rmsMeter": {
					"type": "array",
					"description": "Array of volume values (one per channel) for the RMS meter.",
					"items": {
						"type": "number",
						"description": "The volume value (DB) of the channel."
					}
				},
				"peakMeter": {
					"type": "array",
					"description": "Array of volume values (one per channel) for the Peak meter.",
					"items": {
						"type": "number",
						"description": "The volume value (DB) of the channel."
					}
				}
            },
            "additionalProperties": false
        },
        "voiceReturnOptions": {
            "type": "array",
            "description": "An array of options for the playing voices.",
            "items": {
                "type": "string",
                "description": "Specifies one of the defined members for a voice pipeline structure.",
                "enum": [
                    "pipelineID",
                    "playingID",
                    "soundID",
                    "gameObjectID",
                    "gameObjectName",
                    "objectGUID",
                    "objectName",
                    "playTargetID",
                    "playTargetGUID",
                    "playTargetName",
                    "baseVolume",
                    "gameAuxSendVolume",
                    "envelope",
                    "normalizationGain",
                    "lowPassFilter",
                    "highPassFilter",
                    "priority",
                    "isStarted",
                    "isVirtual",
                    "isForcedVirtual"
                ]
            }
        },
        "voiceReturn": {
            "type": "object",
            "description": "A playing voice. Use the return options to specify which property is required.",
            "properties": {
                "pipelineID": {
                    "$ref": "#/definitions/uint32",
                    "description": "Pipeline ID of the voice."
                },
                "playingID": {
                    "$ref": "#/definitions/uint32",
                    "description": "Playing ID of the voice."
                },
                "soundID": {
                    "$ref": "#/definitions/uint32",
                    "description": "Short ID of the sound object corresponding to the voice."
                },
                "gameObjectID": {
                    "$ref": "#/definitions/uint64",
                    "description": "Game Object ID corresponding to the voice."
                },
                "gameObjectName": {
                    "type": "string",
                    "description": "Game Object Name corresponding to the voice."
                },
                "objectGUID": {
                    "$ref": "#/definitions/guid",
                    "description": "Object GUID corresponding to the voice."
                },
                "objectName": {
                    "type": "string",
                    "description": "Object Name corresponding to the voice."
                },
                "playTargetID": {
                    "$ref": "#/definitions/uint32",
                    "description": "Short ID of the play target object corresponding to the voice."
                },
                "playTargetGUID": {
                    "$ref": "#/definitions/guid",
                    "description": "GUID of the play target object corresponding to the voice."
                },
                "playTargetName": {
                    "type": "string",
                    "description": "Name of the play target object corresponding to the voice."
                },
                "baseVolume": {
                    "type": "number",
                    "description": "Voice volume in dB, including HDR attenuation."
                },
                "gameAuxSendVolume": {
                    "type": "number",
                    "description": "Volume send to the auxiliary bus send in dB."
                },
                "envelope": {
                    "type": "number",
                    "description": "Current analyzed envelope value in dB. 0 if unavailable."
                },
                "normalizationGain": {
                    "type": "number",
                    "description": "Loudness normalization and make-up gain in dB."
                },
                "lowPassFilter": {
                    "type": "number",
                    "description": "Low-Pass Filter applied to the voice."
                },
                "highPassFilter": {
                    "type": "number",
                    "description": "High-Pass Filter applied to the voice."
                },
                "priority": {
                    "$ref": "#/definitions/int8",
                    "description": "Priority given to the voice."
                },
                "isStarted": {
                    "type": "boolean",
                    "description": "True if the voice has started playing, false otherwise."
                },
                "isVirtual": {
                    "type": "boolean",
                    "description": "True if the voice is virtual, false otherwise."
                },
                "isForcedVirtual": {
                    "type": "boolean",
                    "description": "True if the voice was forced as virtual, false otherwise."
                }
            },
            "additionalProperties": false
        },
        "profilerDataType": {
            "type": "string",
            "description": "Specifies the type of profiler data that can be captured.",
            "enum": [
                "cpu",
                "memory",
                "stream",
                "voices",
                "listener",
                "obstructionOcclusion",
                "markersNotification",
                "output",
                "soundBanks",
                "loadedMedia",
                "preparedEvents",
                "preparedGameSyncs",
                "musicTransitions",
                "streamingDevice",
                "meter",
                "auxiliarySends",
                "apiCalls",
                "spatialAudio",
                "voiceInspector",
                "audioObjects",
				"inactiveGameSyncs"
            ]
        },
        "objectReturn": {
            "type": "object",
            "description": "A Wwise object. Use the return options to specify which property is required.",
            "properties": {
                "id": {
                    "$ref": "#/definitions/guid",
                    "description": "The ID (GUID) of the object."
                },
                "name": {
                    "type": "string",
                    "description": "The name of the object."
                },
                "notes": {
                    "type": "string",
                    "description": "The notes of the object."
                },
                "type": {
                    "type": "string",
                    "description": "The type of the object. Refer to \\ref wobjects_index for more information on the types available."
                },
				"pluginName": {
                    "type": "string",
                    "description": "The name of the plug-in for Source, Effect, Mixer, Device and Metadata plug-in."
				},
                "path": {
                    "type": "string",
                    "description": "The path of the object from the project root. Ex: '\\\\Actor-Mixer Hierarchy\\\\Default Work Unit\\\\Sound1'"
                },
                "parent": {
                    "type": "object",
                    "description": "The parent of the object in the hierarchy.",
                    "properties": {
                        "id": {
                            "$ref": "#/definitions/guid",
                            "description": "The ID (GUID) of the object."
                        },
                        "name": {
                            "type": "string",
                            "description": "The name of the object."
                        }
                    }
                },
                "owner": {
                    "type": "object",
                    "description": "The owner of the object. This applies to objects being locally owned by other objects, such as custom effects, custom attenuations, etc.",
                    "properties": {
                        "id": {
                            "$ref": "#/definitions/guid",
                            "description": "The ID (GUID) of the object."
                        },
                        "name": {
                            "type": "string",
                            "description": "The name of the object."
                        }
                    }
                },
                "isPlayable": {
                    "type": "boolean",
                    "description": "True if the object can be played in Transport."
                },
                "shortId": {
                    "type": "integer",
                    "description": "The Short ID of the object."
                },
                "classId": {
                    "$ref": "#/definitions/uint32",
                    "description": "The class ID of the object."
                },
                "category": {
                    "type": "string",
                    "description": "The category of the object. Ex: 'Actor-Mixer Hierarchy'"
                },
                "filePath": {
                    "type": "string",
                    "description": "The path to the file containing the object. The path can be a Work Unit file or a project file. For using WAAPI on Mac, please refer to \\ref waapi_path_on_mac ."
                },
                "workunit": {
                    "type": "object",
                    "description": "The parent Work Unit containing the object. The 'id' and the 'name' is returned.",
                    "properties": {
                        "id": {
                            "$ref": "#/definitions/guid",
                            "description": "The ID (GUID) of the object."
                        },
                        "name": {
                            "type": "string",
                            "description": "The name of the object."
                        }
                    }
                },
                "childrenCount": {
                    "type": "number",
                    "description": "The number of children for the object."
                },
                "totalSize": {
                    "type": "integer",
                    "description": "The amount of space (in bytes) this object and all of its children take up in a SoundBank. This does not include the objectSize. Note that SoundBanks need to be generated for this value to be accurate."
                },
                "mediaSize": {
                    "type": "integer",
                    "description": "The total converted size (in bytes) of the media files of this object and all of its children. Note that SoundBanks need to be generated for this value to be accurate."
                },
                "objectSize": {
                    "type": "integer",
                    "description": "The amount of space (in bytes) the meta-data of the object takes up in a SoundBank. This does not include media files. Note that SoundBanks need to be generated for this value to be accurate."
                },
                "structureSize": {
                    "type": "integer",
                    "description": "The amount of space (in bytes) the meta-data of the object and all of its children take up in a SoundBank. This does not include media files. Note that SoundBanks need to be generated for this value to be accurate."
                },
                "musicTransitionRoot": {
                    "type": "object",
                    "description": "The music transition root containing all other music transitions recursively.",
                    "properties": {
                        "id": {
                            "$ref": "#/definitions/guid",
                            "description": "The ID (GUID) of the object."
                        }
                    }
                },
                "musicPlaylistRoot": {
                    "type": "object",
                    "description": "The music playlist root containing all other music playlist items recursively. This applies to Music Playlist Containers only.",
                    "properties": {
                        "id": {
                            "$ref": "#/definitions/guid",
                            "description": "The ID (GUID) of the object."
                        }
                    }
                },
                "originalWavFilePath": {
                    "type": "string",
                    "description": "Absolute path to the original wav file. Only valid for Sound and Audio Source objects. For using WAAPI on Mac, please refer to \\ref waapi_path_on_mac ."
                },
                "convertedWemFilePath": {
                    "type": "string",
                    "description": "Absolute path to the converted wem file. Specify the platform in the options. Only valid for Sound and Audio Source objects. To use WAAPI on Mac, please refer to \\ref waapi_path_on_mac ."
                },
                "soundbankBnkFilePath": {
                    "type": "string",
                    "description": "Absolute path to the generated SoundBank file associated with the SoundBank object. Only valid for SoundBank objects. To use WAAPI on Mac, please refer to \\ref waapi_path_on_mac ."
                },
                "playbackDuration": {
                    "type": "object",
                    "description": "The duration root that contains the min and max durations and duration type. This applies to all objects that can contain Audio Source objects, either directly as a source or indirectly through descendants.",
                    "properties": {
                        "playbackDurationMin":{
                            "type": "number",
                            "description": "The minimum possible time playback can take."
                        },
                        "playbackDurationMax":{
                            "type": "number",
                            "description": "The maximum possible time playback can take."
                        },
                        "playbackDurationType":{
                            "type": "string",
                            "description": "The type of duration."
                        }
                    }
                },
                "maxDurationSource": {
                  "type": "object",
                  "description": "Audio source with the longest duration. This applies to all objects that can contain Audio Source objects, either directly as a source or indirectly through descendants.",
                  "properties": {
                    "id": {
                      "$ref": "#/definitions/guid",
                      "description": "The ID (GUID) of the audio source object with the longest duration."
                    },
                    "trimmedDuration": {
                      "type": "number",
                      "description": "The duration in seconds of the longest trimmed source."
                    }
                  }
                },
                "audioSourceTrimValues": {
                    "type": "object",
                    "description": "Range of time for which the audio source is trimmed.",
                    "properties": {
                        "trimBegin": {
                            "type": "number",
                            "description": "The time value in seconds of the start trim."
                        },
                        "trimEnd": {
                            "type": "number",
                            "description": "The time value in seconds of the end trim."
                        }
                    }
                },
                "maxRadiusAttenuation": {
                    "type": "object",
                    "description": "Attenuation with the largest radius. This applies to all objects that can contain Audio Source objects, either directly as a source or indirectly through descendants.",
                    "properties": {
                        "id": {
                            "$ref": "#/definitions/guid",
                            "description": "The ID (GUID) of the attenuation object with the largest radius."
                        },
                        "radius": {
                            "type": "number",
                            "description": "The radius of the attenuation object."
                        }
                    }
                },
                "audioSourceLanguage": {
                    "type": "object",
                    "description": "Language associated to the audio source. This only applies to Audio Source objects directly.",
                    "properties": {
                        "id": {
                            "$ref": "#/definitions/guid",
                            "description": "The ID (GUID) of the Language object to which the Audio Source object is associated."
                        },
                        "name": {
                            "type": "string",
                            "description": "The name of the Language object to which the Audio Source object is associated."
                        }
                    }
                },
                "workunitIsDefault": {
                    "type": "boolean",
                    "description": "True if the work unit is the default."
                },
                "workunitType": {
                    "type": "string",
                    "description": "The type of the Work Unit. Please note that, like Work Units, physical folders have the type \"WorkUnit\". Physical folders have the workunitType \"folder\".",
                    "enum": [
                        "folder",
                        "rootFile",
                        "nestedFile"
                    ]
                },
                "workunitIsDirty": {
                    "type": "boolean",
                    "description": "True if a Work Unit or a Project (wproj file) is dirty, meaning it was modified but not saved."
                },
                "switchContainerChildContext": {
                    "type": "object",
                    "description": "The context object associated with the child of a Switch Container. This object holds the properties associated with the child that are context-dependent for the Switch Container (for example: the properties of the '1st only' checkbox).",
                    "properties": {
                        "id": {
                            "$ref": "#/definitions/guid",
                            "description": "The ID (GUID) of the object."
                        }
                    }
                }
            },
            "patternProperties": {
                "^((@?@?[a-zA-Z0-9:_]+)|[a-zA-Z]+\\(.+\\))(\\.@?@?[a-zA-Z0-9:_]+|[a-zA-Z]+\\(.+\\))*$": {
                    "description": "Specifies dot-separated accessors that form a query and yields a property value or an object reference. A single @ specifies the value of the property for the associated object. A double @@ specifies the value of the property for the source of override. Refer to \\ref wobjects_index for more information on the properties and references for all types available.",
                    "anyOf": [
                        { 
                            "type": "string",
                            "description": "A string value."
                        },
                        { 
                            "type": "number",
                            "description": "A numeric value."
                        },
                        { 
                            "type": "boolean",
                            "description": "A boolean value."
                        },
                        {
                            "type": "object",
                            "description": "An object reference value.",
                            "properties": {
                                "id": {
                                    "$ref": "#/definitions/guid",
                                    "description": "The ID (GUID) of the object."
                                },
                                "name": {
                                    "type": "string",
                                    "description": "The name of the object."
                                }
                            }
                        },
                        {
                            "type": "array",
                            "description": "An object list reference value.",
                            "items": {
                                "type": "object",
                                "description": "An object reference value.",
                                "properties": {
                                    "id": {
                                        "$ref": "#/definitions/guid",
                                        "description": "The ID (GUID) of the object."
                                    },
                                    "name": {
                                        "type": "string",
                                        "description": "The name of the object."
                                    }
                                }
                            }
                        }
                    ]
                }
            },
            "additionalProperties": false
        },
        "returnExpression": {
            "type": "array",
            "description":"The array of return expressions defines which elements of the Wwise object is returned. This can include built-in accessors, such as the name or id, or object properties, such as the Volume or the Pitch.",
            "items": {
                "description": "A return expression.",
                "anyOf": [
                    {
                        "type": "string",
                        "description": "Specifies one or many of the built-in accessors for Wwise objects.",
                        "enum": [
                            "id",
                            "name",
                            "notes",
                            "type",
							"pluginName",
                            "shortId",
                            "classId",
                            "category",
                            "filePath",
                            "workunit",
                            "parent",
                            "owner",
                            "path",
                            "isPlayable",
                            "childrenCount",
                            "totalSize",
                            "mediaSize",
                            "objectSize",
                            "structureSize",
                            "sound:convertedWemFilePath",
                            "sound:originalWavFilePath",
                            "soundbank:bnkFilePath",
                            "music:transitionRoot",
                            "music:playlistRoot",
                            "audioSource:playbackDuration",
                            "audioSource:maxDurationSource",
                            "audioSource:trimValues",
                            "audioSource:maxRadiusAttenuation",
                            "audioSource:language",
                            "workunit:isDefault",
                            "workunit:type",
                            "workunit:isDirty",
                            "switchContainerChild:context",
							"convertedWemFilePath",
							"originalWavFilePath",
							"soundbankBnkFilePath",
							"musicTransitionRoot",
							"musicPlaylistRoot",
							"playbackDuration",
							"maxDurationSource",
							"audioSourceTrimValues",
							"maxRadiusAttenuation",
							"audioSourceLanguage",
							"workunitIsDefault",
							"workunitType",
							"workunitIsDirty",
							"switchContainerChildContext"
                        ]
                    },
                    {
                        "type": "string",
                        "description": "Specifies one or many dot-separated accessors that form a query and yields a value or an object reference. Specifying a single @ returns the value of the property for the associated object. Specifying a double @@ returns the value of the property for the source of override. Refer to \\ref wobjects_index .",
                        "pattern": "^((@?@?[a-zA-Z0-9:_]+)|[a-zA-Z]+\\(.+\\))(\\.@?@?[a-zA-Z0-9:_]+|[a-zA-Z]+\\(.+\\))*$"
                    }
                ]
            }
        },
        "objectReturnOptions": {
            "type": "object",
            "description": "Object specifying the options for the results.",
            "properties": {
                "return": {
                    "$ref": "#/definitions/returnExpression",
                    "description": "Specifies what is being returned for every object. Refer to \\ref wobjects_index for more information on the properties and references available."
                },
                "platform": {
                    "anyOf": [
                        {
                            "type": "string",
                            "description": "The name of the platform."
                        },
                        {
                            "$ref": "#/definitions/guid",
                            "description": "The id of the platform."
                        }],
                    "description": "The ID (GUID) or name of the platform. This is an optional argument. When not specified, the current platform is used."
                },
                "language": {
                    "anyOf": [
                        {
                            "type": "string",
                            "description": "The name of the language."
                        },
                        {
                            "$ref": "#/definitions/guid",
                            "description": "The id of the language."
                        }],
                    "description": "The ID (GUID) or name of the language."
                }
            },
            "additionalProperties": false
        },
        "propertyValue": {
            "description": "The value of a property.",
            "anyOf": [
                { 
                    "type": "null",
                    "description": "A null value. No reference to an object."
                },
                { 
                    "type": "string",
                    "description": "A string value."
                },
                { 
                    "type": "number" ,
                    "description": "A numerical value."
                },
                { 
                    "type": "boolean",
                    "description": "A boolean value."
                }
            ]
        },
        "logCentralChannel": {
            "type": "string",
            "description": "The log channel.",
            "enum": ["soundbankGenerate", "conversion", "copyPlatformSettings", "waapi", "projectLoad", "general"]
        },
        "logCentralItem": {
            "type": "object",
            "description":"A log entry.",
            "properties": {
                "severity": {
                    "type":"string",
                    "enum": [ "Message","Warning", "Error","Fatal Error" ],
                    "description":"Message: not impacting the integrity of the current operation. \nWarning: potentially impacting the integrity of the current operation. \nError: impacting the integrity of the current operation. \nFatal Error: impacting the completion of the current operation."
                },
                "time": {
                    "type":"integer",
                    "description":"Number of seconds elapsed since midnight (00:00:00), January 1, 1970, Coordinated Universal Time (UTC), according to the system clock."
                },
                "messageId": {
                    "type":"string",
                    "description":"The message ID for the log item."
                },
                "message": {
                    "type":"string",
                    "description":"The description message of the log item."
                },
                "platform": {
                    "$ref": "#/definitions/objectReturn",
                    "descriptionOverride":"The platform ID and name for which the log item was reported."
                },
                "parameters": {
                    "type":"array",
                    "items":{
                        "description":"A parameter of the log entry. Normally an object name.",
                        "type":"string"
                    },
                    "description":"An array of parameters in the log item. Not present when no parameter."
                }
            },
            "required":["severity","time","messageId", "message"],
            "additionalProperties": false
        },
        "gameObject": {
            "type": "integer",
            "description":"A game object ID, unsigned integer 64-bit.",
            "minimum": 0,
            "maximum": 18446744073709551615
        },
        "int8": {
            "type": "integer",
            "description":"Integer 8-bit.",
            "minimum": -128,
            "maximum": 127
        },
        "uint16": {
            "type": "integer",
            "description":"Unsigned Integer 16-bit.",
            "minimum": 0,
            "maximum": 65535
        },
        "int32": {
            "type": "integer",
            "description":"Integer 32-bit.",
            "minimum": -2147483648,
            "maximum": 2147483647
        },
        "uint32": {
            "type": "integer",
            "description":"Unsigned Integer 32-bit.",
            "minimum": 0,
            "maximum": 4294967295
        },
        "uint64": {
            "type": "integer",
            "description":"Unsigned Integer 64-bit.",
            "minimum": 0,
            "maximum": 18446744073709551615
        },
        "addOnsCommands": {
            "type": "array",
            "description": "An array of command add-ons.",
            "items": {
                "type": "object",
                "description": "Specify a command add-on.",
                "properties": {
                    "id": {
                        "type": "string",
                        "description":"Defines a human readable unique ID for the command. To reduce risk of ID conflicts, please use a concatenation of the author name, the product name and the command name."
                    },
                    "displayName": {
                        "type": "string",
                        "description":"Defines the name displayed in the user interface."
                    },
                    "program": {
                        "type": "string",
                        "description":"Defines the program or script to run when the command is executed. Arguments are specified in 'args'."
                    },
                    "startMode":{
                        "type": "string",
                        "enum":["SingleSelectionSingleProcess", "MultipleSelectionSingleProcessSpaceSeparated", "MultipleSelectionMultipleProcesses"],
                        "description":"Specifies how to expand variables in the arguments field in case of multiple selection in the Wwise user interface. SingleSelectionSingleProcess: only support single selection, starts the program once. MultipleSelectionSingleProcessSpaceSeparated: program is started once with variables expanded to space separated arguments, each enclosed in double-quotes. MultipleSelectionMultipleProcesses: program is started once per selected item, in parallel. Each running instance receives one selected item."
                    },
                    "args": {
                        "type": "string",
                        "description":"Defines the arguments. Refer to the documentation for the list of supported built-in variables. Note that in the event of a multiple selection, the variables are expanded based on the startMode field."
                    },
                    "cwd": {
                        "type": "string",
                        "description":"Defines the current working directory to execute the program."
                    },
                    "defaultShortcut": {
                        "type": "string",
                        "description":"Defines the shortcut to use by default for this command. If the shortcut conflicts, it won't be used. This shortcut can be changed in the Keyboard Shortcut Manager."
                    },
                    "redirectOutputs": {
                        "type": "boolean",
                        "description":"Defines if the standard output streams of the program (stdout + stderr) should be redirected and logged to Wwise on termination. The value is of boolean type and false by default."
                    },
                    "contextMenu": {
                        "type": "object",
                        "description": "If present, specify how the command is added to Wwise context menus. If empty, no context menu is added.",
                        "properties": {
                            "basePath": {
                                "type": "string",
                                "description":"Defines a forward-separated path for the parent sub menus. If empty, the menu is inserted at the first level."
                            },
                            "visibleFor": {
                                "type": "string",
                                "description":"Defines a comma-separated list of the object types for which the item is visible. Refer to \\ref wobjects_index for the list of types supported. If empty, any type is allowed."
                            },
                            "enabledFor": {
                                "type": "string",
                                "description":"Defines a comma-separated list of the object types for which the item is enabled. Refer to \\ref wobjects_index for the list of types supported. If empty, any type is allowed."
                            }
                        },
                        "additionalProperties":false                        
                    },
                    "mainMenu": {
                        "type": "object",
                        "description": "If present, specify how the command is added to Wwise main menus. If empty, no main menu entry is added.",
                        "properties": {
                            "basePath": {
                                "type": "string",
                                "description":"Defines a forward-separated path for the parent sub menus. It must at least define one level, which is associated to the top menu."
                            }
                        },
                        "required":["basePath"],
                        "additionalProperties":false
                    }                    
                },
                "required":["id","displayName"],
                "additionalProperties":false
            }
        },
        "stringOrArrayOfString": {
            "oneOf": [
                {
                    "type": "string",
                    "description": "A single value provided for the option."
                },
                {
                    "type": "array",
                    "description": "Several values provided for the option.",
                    "items": {
                        "type": "string",
                        "description": "A value for the option."
                    }
                }
            ]
        },
        "platformMappingArray": {
            "oneOf": [
                {
                    "type": "array",
                    "description": "Association between a platform and a value.",
                    "minItems": 2,
                    "maxItems": 2,
                    "items": {
                        "type": "string",
                        "description": "Platform name for index 0, value for index 1."
                    }
                },
                {
                    "type": "array",
                    "description": "Array of associations between a platform name and a value.",
                    "items": {
                        "type": "array",
                        "description": "Association between a platform name and a value.",
                        "minItems": 2,
                        "maxItems": 2,
                        "items": {
                            "type": "string",
                            "description": "Platform name for index 0, value for index 1."
                        }
                    }
                }
            ]
        },
        "fileReference": {
            "type": "object",
            "description": "Media File reference",
            "properties": {
                "Id": {
                    "type": "string",
                    "description": "Short ID of the media."
                },
                "Language": {
                    "type": "string",
                    "description": "Language name used for this media."
                },
                "ShortName": {
                    "type": "string",
                    "description": "File name of the original file."
                },
                "Path": {
                    "type": "string",
                    "description": "Path of the converted media relative to the cache folder."
                },
                "PrefetchSize": {
                    "type": "string",
                    "description": "Size of bytes of the prefetch size"
                },
                "UseDeviceMemory" : {
                    "type": "string",
                    "description": "Does the media requires device memory or not.",
                    "enum": ["true", "false"]
                }
            },
            "additionalProperties": false
        }
    },

    "functions": [
        {
            "id": "ak.wwise.core.getInfo",
            "restrict": [ "userInterface", "commandLine" ],
            "description": "Retrieve global Wwise information.",
            "argsSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "resultSchema": {
                "type": "object",
                "properties": {
					"sessionId": {
						"$ref": "#/definitions/guid",
						"description": "Wwise session id."
					},
                    "apiVersion": {
                        "type": "number",
                        "minimum": 1,
                        "description": "Version of the Wwise Authoring API."
                    },
                    "displayName": {
                        "type": "string",
                        "pattern": "Wwise",
                        "description": "Wwise display name."
                    },
                    "branch": {
                        "type": "string",
                        "minLength": 1,
                        "description": "Branch built."
                    },
                    "copyright": {
                        "type": "string",
                        "minLength": 1,
                        "description": "Copyright information."
                    },
                    "version": {
                        "type": "object",
                        "properties": {
                            "displayName": {
                                "type": "string",
                                "minLength": 1,
                                "description": "Wwise version name."
                            },
                            "year": {
                                "type": "integer",
                                "minimum": 2000,
                                "maximum": 2100,
                                "description": "Version year."
                            },
                            "major": {
                                "type": "integer",
                                "minimum": 0,
                                "maximum": 100,
                                "description": "Version's major number"
                            },
                            "minor": {
                                "type": "integer",
                                "minimum": 0,
                                "maximum": 100,
                                "description": "Version's minor number."
                            },
                            "build": {
                                "type": "integer",
                                "minimum": 1,
                                "description": "Build number."
                            },
                            "nickname": {
                                "type": "string",
                                "description": "Special name given to a version."
                            },
                            "schema": {
                                "type": "integer",
                                "minimum": 1,
                                "description": "Schema version for the Wwise Project and Work Units."
                            }
                        },
						"required": [ "displayName", "year", "major", "minor", "build", "nickname", "schema" ],
                        "description": "Wwise version object."
                    },
                    "configuration": {
                        "type": "string",
                        "enum": [ "release", "debug" ],
                        "description": "Indicates a release or debug build."
                    },
                    "platform": {
                        "type": "string",
                        "enum": [ "x64", "win32", "macosx", "linux" ],
                        "description": "Indicates the platform on which Wwise was built."
                    },
                    "isCommandLine": {
                        "type": "boolean",
                        "description": "Indicates if Wwise is running in command line."
                    },
                    "processId": {
                        "type": "integer",
                        "description": "The process identifier of Wwise."
                    },
                    "processPath": {
                        "type": "string",
                        "description": "The process path of Wwise."
                    },
                    "directories": {
                        "type": "object",
                        "description": "Collection of directories used by Wwise.",
                        "properties": {
                            "install": {
                                "type": "string",
                                "minLength": 1,
                                "description": "The root directory of Wwise. This is the installation directory."
                            },
                            "authoring": {
                                "type": "string",
                                "minLength": 1,
                                "description": "The Wwise Authoring root directory"
                            },
                            "bin": {
                                "type": "string",
                                "minLength": 1,
                                "description": "The bin directory, where Wwise.exe is located."
                            },
                            "log": {
                                "type": "string",
                                "minLength": 1,
                                "description": "The log directory."
                            },
                            "help": {
                                "type": "string",
                                "minLength": 1,
                                "description": "The help directory."
                            },
                            "user": {
                                "type": "string",
                                "minLength": 1,
                                "description": "The Wwise user data directory root."
                            }
                        },
						"required": [ "install", "authoring", "bin", "log", "help", "user" ]
                    }
                },
				"required": ["sessionId", "apiVersion", "displayName", "branch", "copyright", "version", "configuration", "platform", "isCommandLine", "processId", "processPath", "directories" ]
            },
            "optionsSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "examples": [
                {
                    "title": "Getting information about Wwise",
                    "description": "Gets information about the currently connected Wwise.",
                    "args": { },
                    "result": {
                        "displayName": "Wwise",
                        "platform": "x64",
                        "directories": {
                            "log": "C:\\Projects\\Wwise\\Authoring\\source\\App\\",
                            "help": "C: \\Projects\\Wwise\\Authoring\\Help\\",
                            "user": "%APPDATA%\\Audiokinetic\\Wwise\\",
                            "install": "C:\\Projects\\Wwise\\",
                            "authoring": "C:\\Projects\\Wwise\\Authoring\\",
                            "bin": "C: \\Projects\\Wwise\\Authoring\\source\\App\\"
                        },
                        "branch": "v2016.2\/wwise_main",
                        "configuration": "debug",
                        "version": {
                            "displayName": "v2017.1.0",
                            "nickname": "",
                            "build": 83,
                            "minor": 0,
                            "year": 2017,
                            "major": 1,
							"schema": 103
                        },
                        "copyright": "\u00a9 2006-2017. Audiokinetic Inc. All rights reserved.",
                        "apiVersion": 1,
						"isCommandLine": false,
						"processId": 12345,
						"processPath": "C:\\Projects\\Wwise\\Authoring\\x64\\Release\\bin\\Wwise.exe",
						"sessionId": "{FF59687C-48CF-4385-B1C5-CE84B0A63880}"
                    }
                }
            ]
        },
        {
            "id": "ak.wwise.ui.bringToForeground",
            "restrict": [ "userInterface" ],
            "seeAlso": [ "ak.wwise.core.getInfo" ],
            "description": "Bring Wwise main window to foreground. Refer to SetForegroundWindow and AllowSetForegroundWindow on MSDN for more information on the restrictions. Refer to ak.wwise.core.getInfo to obtain the Wwise process ID for AllowSetForegroundWindow.",
            "argsSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "resultSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "optionsSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "examples": [
                {
                    "title": "Bringing the currently connected Wwise to foreground",
                    "description": "Brings the currently connected Wwise to the foreground.",
                    "args": { },
                    "result": { }
                }
            ]
        },
        {
            "id": "ak.soundengine.postEvent",
            "restrict": [ "userInterface" ],
            "seeAlso": [ "ak.soundengine.registerGameObj", "ak.soundengine.executeActionOnEvent", "ak.soundengine.seekOnEvent", "ak.soundengine.stopPlayingID" ],
            "description": "Asynchronously post an Event to the sound engine (by event ID). See <tt>AK::SoundEngine::PostEvent</tt>.",
            "argsSchema": {
                "type": "object",
                "properties": {
                    "event": {
                        "$ref": "#/definitions/soundEngineObjectArg",
                        "description": "Either the ID (GUID), name, or Short ID of the Event."
                    },
                    "gameObject": {
                        "$ref": "#/definitions/gameObject",
                        "description": "The unique ID of the game object. "
                    }
                },
                "required": [ "event", "gameObject" ],
                "additionalProperties": false
            },
            "resultSchema": {
                "type": "object",
                "properties": {
                    "return": {
                        "$ref": "#/definitions/uint32",
                        "description": "The playing ID of the Event launched, or \\c AK_INVALID_PLAYING_ID if posting the event failed."
                    }
                },
                "required": [ "return" ],
                "additionalProperties": false
            },
            "optionsSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "examples": [
                {
                    "title": "Posting an Event by name",
                    "description": "Posts an Event to the sound engine using the Event's name.",
                    "args": {
                        "event": "Play_Music",
                        "gameObject": 1122334
                    },
                    "result": {
                        "return": 8
                    }
                },
                {
                    "title": "Posting an Event by Short ID",
                    "description": "Posts an Event to the sound engine using the Event's Short ID.",
                    "args": {
                        "event": 2932040671,
                        "gameObject": 1122334
                    },
                    "result": {
                        "return": 8
                    }
                },
                {
                    "title": "Posting an Event by object GUID",
                    "description": "Posts an Event to the sound engine using the Event's GUID.",
                    "args": {
                        "event": "{FF59687C-48CF-4385-B1C5-CE84B0A63880}",
                        "gameObject": 1122334
                    },
                    "result": {
                        "return": 8
                    }
                }
            ]
        },
        {
            "id": "ak.soundengine.executeActionOnEvent",
            "restrict": [ "userInterface" ],
            "seeAlso": [ "ak.soundengine.registerGameObj", "ak.soundengine.stopPlayingID " ],
            "description": "Executes an action on all nodes that are referenced in the specified event in a Play action. See <tt>AK::SoundEngine::ExecuteActionOnEvent</tt>.",
            "argsSchema": {
                "type": "object",
                "properties": {
                    "event": {
                        "$ref": "#/definitions/soundEngineObjectArg",
                        "description": "Either the ID (GUID), name or Short ID of the event."
                    },
                    "actionType": {
                        "type": "integer",
                        "minimum": 0,
                        "maximum": 4,
                        "description": "Action to execute on all the elements that were played using the specified event. Uses values from <tt>AK::SoundEngine::AkActionOnEventType</tt>."
                    },
                    "gameObject": {
                        "$ref": "#/definitions/gameObject",
                        "description": "Associated game object ID."
                    },
                    "transitionDuration": {
                        "$ref": "#/definitions/int32",
                        "description": "Fade duration (ms)."
                    },
                    "fadeCurve": {
                        "type": "integer",
                        "minimum": 0,
                        "maximum": 9,
                        "description": "Use values from \\ref AkCurveInterpolation ."
                    }
                },
                "required": [ "event", "actionType", "gameObject", "transitionDuration", "fadeCurve" ],
                "additionalProperties": false
            },
            "resultSchema": {
                "type": "object",
                "properties": {
                },
                "additionalProperties": false
            },
            "optionsSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "examples": [
                {
                    "title": "Launching a stop Action on Event",
                    "description": "Executes a Stop action for the given Event, fading out with a 5 s log1 Curve.",
                    "args": {
                        "event": "{FF59687C-48CF-4385-B1C5-CE84B0A63880}",
                        "actionType": 0,
                        "gameObject": 1122334,
                        "transitionDuration": 5000,
                        "fadeCurve": 2
                    },
                    "result": {
                    }
                }
            ]
        },
        {
            "id": "ak.soundengine.registerGameObj",
            "restrict": [ "userInterface" ],
            "seeAlso": [ "ak.soundengine.unregisterGameObj" ],
            "description": "Register a game object. Registering a game object twice does nothing. Unregistering it once unregisters it no matter how many times it has been registered. See <tt>AK::SoundEngine::RegisterGameObj</tt>.",
            "argsSchema": {
                "type": "object",
                "properties": {
                    "gameObject": {
                        "$ref": "#/definitions/gameObject",
                        "description": "ID of the game object to be registered."
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the game object (for monitoring purpose)."
                    }
                },
                "required": [ "gameObject", "name" ],
                "additionalProperties": false
            },
            "resultSchema": {
                "type": "object",
                "properties": {
                },
                "additionalProperties": false
            },
            "optionsSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "examples": [
                {
                    "title": "Registering a game object",
                    "description": "Registers the \"MyGameObjectName\" game object.",
                    "args": {
                        "gameObject": 1122334,
                        "name": "MyGameObjectName"
                    },
                    "result": {
                    }
                }
            ]
        },
        {
            "id": "ak.soundengine.stopPlayingID",
            "restrict": [ "userInterface" ],
            "seeAlso": [ "ak.soundengine.postEvent" ],
            "description": "Stops the current content, associated to the specified playing ID, from playing. See <tt>AK::SoundEngine::StopPlayingID</tt>.",
            "argsSchema": {
                "type": "object",
                "properties": {
                    "playingId": {
                        "$ref": "#/definitions/uint32",
                        "description": "Playing ID to be stopped."
                    },
                    "transitionDuration": {
                        "$ref": "#/definitions/int32",
                        "description": "Fade duration (ms)."
                    },
                    "fadeCurve": {
                        "type": "integer",
                        "minimum": 0,
                        "maximum": 9,
                        "description": "Curve type to be used for the transition. Uses values from \\ref AkCurveInterpolation ."
                    }
                },
                "required": [ "playingId", "transitionDuration", "fadeCurve" ],
                "additionalProperties": false
            },
            "resultSchema": {
                "type": "object",
                "properties": {
                },
                "additionalProperties": false
            },
            "optionsSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "examples": [
                {
                    "title": "Stopping a current content playing",
                    "description": "Stops the content, specified by \"playingId\", by using \"transitionDuration\" with a Linear Curve.",
                    "args": {
                        "playingId": 5566998,
                        "transitionDuration": 2000,
                        "fadeCurve": 4
                    },
                    "result": {
                    }
                }
            ]
        },
        {
            "id": "ak.soundengine.stopAll",
            "seeAlso": [ "ak.soundengine.stopPlayingID", "ak.soundengine.postEvent" ],
            "restrict": [ "userInterface" ],
            "description": "Stop playing the current content associated to the specified game object ID. If no game object is specified, all sounds are stopped. See <tt>AK::SoundEngine::StopAll</tt>.",
            "argsSchema": {
                "type": "object",
                "properties": {
                    "gameObject": {
                        "$ref": "#/definitions/gameObject",
                        "description": "Specify a game object to stop only playback associated to the provided game object ID."
                    }
                },
                "required": [ "gameObject" ],
                "additionalProperties": false
            },
            "resultSchema": {
                "type": "object",
                "properties": {
                },
                "additionalProperties": false
            },
            "optionsSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "examples": [
                {
                    "title": "Stopping a currently playing content",
                    "description": "Stops playing all the content associated with \"gameObject\".",
                    "args": {
                        "gameObject": 1122334
                    },
                    "result": {
                    }
                }
            ]
        },
        {
            "id": "ak.soundengine.postMsgMonitor",
            "restrict": [ "userInterface" ],
            "seeAlso": [],
            "description": "Display a message in the Profiler's Capture Log view.",
            "argsSchema": {
                "type": "object",
                "properties": {
                    "message": {
                        "type": "string",
                        "description": "The message to display."
                    }
                },
                "required": [ "message" ],
                "additionalProperties": false
            },
            "resultSchema": {
                "type": "object",
                "properties": {
                },
                "additionalProperties": false
            },
            "optionsSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "examples": [
                {
                    "title": "Sending a message to the profiler",
                    "description": "Sends the \"message\" to the Profiler.",
                    "args": {
                        "message": "This is a message."
                    },
                    "result": {
                    }
                }
            ]
        },
        {
            "id": "ak.soundengine.setObjectObstructionAndOcclusion",
            "restrict": [ "userInterface" ],
            "seeAlso": [ "ak.soundengine.setListeners" ],
            "description": "Set a game object's obstruction and occlusion levels. This function is used to affect how an object should be heard by a specific listener. See <tt>AK::SoundEngine::SetObjectObstructionAndOcclusion</tt>.",
            "argsSchema": {
                "type": "object",
                "properties": {
                    "emitter": {
                        "$ref": "#/definitions/gameObject",
                        "description": "Emitter game object ID."
                    },
                    "listener": {
                        "$ref": "#/definitions/gameObject",
                        "description": "Listener game object ID"
                    },
                    "obstructionLevel": {
                        "type": "number",
                        "description": "ObstructionLevel: [0.0f..1.0f]."
                    },
                    "occlusionLevel": {
                        "type": "number",
                        "description": "OcclusionLevel: [0.0f..1.0f]."
                    }
                },
                "required": [ "emitter", "listener", "obstructionLevel", "occlusionLevel" ],
                "additionalProperties": false
            },
            "resultSchema": {
                "type": "object",
                "properties": {
                },
                "additionalProperties": false
            },
            "optionsSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "examples": [
                {
                    "title": "Setting the obstruction and occlusion level of a game object",
                    "description": "Sets the \"emitter\"'s \"obstructionLevel\" and \"occlusionLevel\" for the \"listener\".",
                    "args": {
                        "emitter": 1122334,
                        "listener": 4455667,
                        "obstructionLevel": 0.3,
                        "occlusionLevel": 0.3
                    },
                    "result": {
                    }
                }
            ]
        },
        {
            "id": "ak.soundengine.setGameObjectOutputBusVolume",
            "restrict": [ "userInterface" ],
            "seeAlso": [ "ak.soundengine.setListeners" ],
            "description": "Set the output bus volume (direct) to be used for the specified game object. See <tt>AK::SoundEngine::SetGameObjectOutputBusVolume</tt>.",
            "argsSchema": {
                "type": "object",
                "properties": {
                    "emitter": {
                        "$ref": "#/definitions/gameObject",
                        "description": "Associated emitter game object ID."
                    },
                    "listener": {
                        "$ref": "#/definitions/gameObject",
                        "description": "Associated listener game object ID."
                    },
                    "controlValue": {
                        "type": "number",
                        "description": "A multiplier where 0 means silence and 1 means no change. Therefore, values between 0 and 1 attenuate the sound, and values greater than 1 amplify it."
                    }
                },
                "required": [ "emitter", "listener", "controlValue" ],
                "additionalProperties": false
            },
            "resultSchema": {
                "type": "object",
                "properties": {
                },
                "additionalProperties": false
            },
            "optionsSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "examples": [
                {
                    "title": "Setting the emitter's output bus volume for the listener",
                    "description": "Amplifies the output bus volume of the emitter for the listener by using the multiplier control value.",
                    "args": {
                        "emitter": 1122334,
                        "listener": 4455667,
                        "controlValue": 2
                    },
                    "result": {
                    }
                }
            ]
        },
        {
            "id": "ak.soundengine.setGameObjectAuxSendValues",
            "restrict": [ "userInterface" ],
            "seeAlso": [ "ak.soundengine.setListeners", "ak.soundengine.registerGameObj" ],
            "description": "Sets the Auxiliary Busses to route the specified game object. See <tt>AK::SoundEngine::SetGameObjectAuxSendValues</tt>.",
            "argsSchema": {
                "type": "object",
                "properties": {
                    "gameObject": {
                        "$ref": "#/definitions/gameObject",
                        "description": "Associated game object ID."
                    },
                    "auxSendValues": {
                        "type": "array",
                        "items": {
                            "maxItems": 4,
                            "type": "object",
                            "properties": {
                                "listener": {
                                    "$ref": "#/definitions/gameObject",
                                    "description": "Game object ID of the listener associated with this send."
                                },
                                "auxBus": {
                                    "$ref": "#/definitions/soundEngineObjectArg",
                                    "description": "Either the ID (GUID), name or Short ID of the auxiliary bus."
                                },
                                "controlValue": {
                                    "type": "number",
                                    "description": "Value in the range [0.0f:1.0f], send level to auxiliary bus."
                                }
                            },
                            "description": "AkAuxSendValue structure.",
                            "required": [ "listener", "auxBus", "controlValue" ],
                            "additionalProperties": false
                        },
                        "description": "Array of AkAuxSendValue structures."
                    }
                },
                "required": [ "gameObject", "auxSendValues" ],
                "additionalProperties": false
            },
            "resultSchema": {
                "type": "object",
                "properties": {
                },
                "additionalProperties": false
            },
            "optionsSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "examples": [
                {
                    "title": "Setting the Auxiliary Busses for a game object",
                    "description": "Sets the Auxiliary Busses of \"emitter\" for \"listener\"s specifying the bus name and value for each.",
                    "args": {
                        "gameObject": 1122334,
                        "auxSendValues": [
                            {
                                "listener": 5566123,
                                "auxBus": "AuxBus1",
                                "controlValue": 0.6
                            },
                            {
                                "listener": 226486,
                                "auxBus": "AuxBus2",
                                "controlValue": 0.4
                            }
                        ]
                    },
                    "result": {
                    }
                }
            ]
        },
        {
            "id": "ak.soundengine.postTrigger",
            "restrict": [ "userInterface" ],
            "description": "Posts the specified Trigger. See <tt>AK::SoundEngine::PostTrigger</tt>.",
            "argsSchema": {
                "type": "object",
                "properties": {
                    "trigger": {
                        "$ref": "#/definitions/soundEngineObjectArg",
                        "description": "Either the ID (GUID), name, or Short ID of the Trigger."
                    },
                    "gameObject": {
                        "$ref": "#/definitions/gameObject",
                        "description": "Associated game object ID."
                    }
                },
                "required": [ "trigger", "gameObject" ],
                "additionalProperties": false
            },
            "resultSchema": {
                "type": "object",
                "properties": {
                },
                "additionalProperties": false
            },
            "optionsSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "examples": [
                {
                    "title": "Posting a Trigger by name",
                    "description": "Posts the specified \"trigger\" by name to be applied on \"gameObject\".",
                    "args": {
                        "trigger": "MyTrigger",
                        "gameObject": 1122334
                    },
                    "result": {
                    }
                },
                {
                    "title": "Posting a Trigger by GUID",
                    "description": "Posts the specified \"trigger\" by GUID to be applied on \"gameObject\".",
                    "args": {
                        "trigger": "{A076AA65-B71A-45BB-8841-5A20C52CE727}",
                        "gameObject": 1122334
                    },
                    "result": {
                    }
                }
            ]
        },
        {
            "id": "ak.soundengine.setSwitch",
            "restrict": [ "userInterface" ],
            "seeAlso": [ "ak.soundengine.setState" ],
            "description": "Sets the State of a Switch Group. See <tt>AK::SoundEngine::SetSwitch</tt>.",
            "argsSchema": {
                "type": "object",
                "properties": {
                    "switchGroup": {
                        "$ref": "#/definitions/soundEngineObjectArg",
                        "description": "Either the ID (GUID), name, or short ID of the Switch Group."
                    },
                    "switchState": {
                        "$ref": "#/definitions/soundEngineObjectArg",
                        "description": "Either the ID (GUID), name, or Short ID of the Switch State."
                    },
                    "gameObject": {
                        "$ref": "#/definitions/gameObject",
                        "description": "Associated game object ID."
                    }
                },
                "required": [ "switchGroup", "switchState", "gameObject" ],
                "additionalProperties": false
            },
            "resultSchema": {
                "type": "object",
                "properties": {
                },
                "additionalProperties": false
            },
            "optionsSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "examples": [
                {
                    "title": "Setting the Switch Group to another State using names",
                    "description": "Sets \"switchGroup\" to the \"switchState\" for \"gameObject\".",
                    "args": {
                        "switchGroup": "Ground",
                        "switchState": "Gravel",
                        "gameObject": 1122334
                    },
                    "return": {
                    }
                },
                {
                    "title": "Setting the Switch Group to another State using Short IDs",
                    "description": "Sets \"switchGroup\" to the \"switchState\" for \"gameObject\".",
                    "args": {
                        "switchGroup": 1270826848,
                        "switchState": 1208172755,
                        "gameObject": 1122334
                    },
                    "return": {
                    }
                }
            ]
        },
        {
            "id": "ak.soundengine.setState",
            "restrict": [ "userInterface" ],
            "seeAlso": [ "ak.soundengine.setSwitch" ],
            "description": "Sets the State of a State Group. See <tt>AK::SoundEngine::SetState</tt>.",
            "argsSchema": {
                "type": "object",
                "properties": {
                    "stateGroup": {
                        "$ref": "#/definitions/soundEngineObjectArg",
                        "description": "Either the ID (GUID), name, or Short ID of the State Group."
                    },
                    "state": {
                        "$ref": "#/definitions/soundEngineObjectArg",
                        "description": "Either the ID (GUID), name, or Short ID of the State."
                    }
                },
                "required": [ "stateGroup", "state" ],
                "additionalProperties": false
            },
            "resultSchema": {
                "type": "object",
                "properties": {
                },
                "additionalProperties": false
            },
            "optionsSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "examples": [
                {
                    "title": "Setting the State Group to another State using names",
                    "description": "Sets \"stateGroup\" to \"state\".",
                    "args": {
                        "stateGroup": "Character",
                        "state": "Happy"
                    },
                    "return": {
                    }
                },
                {
                    "title": "Setting the State Group to another State using Short IDs",
                    "description": "Sets \"stateGroup\" to \"state\".",
                    "args": {
                        "stateGroup": 1270826848,
                        "state": 1208172755
                    },
                    "return": {
                    }
                }
            ]
        },
        {
            "id": "ak.soundengine.resetRTPCValue",
            "restrict": [ "userInterface" ],
            "seeAlso": [ "ak.soundengine.setRTPCValue" ],
            "description": "Resets the value of a real-time parameter control to its default value, as specified in the Wwise project. See <tt>AK::SoundEngine::ResetRTPCValue</tt>.",
            "argsSchema": {
                "type": "object",
                "properties": {
                    "rtpc": {
                        "$ref": "#/definitions/soundEngineObjectArg",
                        "description": "Either the ID (GUID), name, or Short ID of the real-time parameter control."
                    },
                    "gameObject": {
                        "$ref": "#/definitions/gameObject",
                        "description": "Associated game object ID"
                    }
                },
                "required": [ "rtpc", "gameObject" ],
                "additionalProperties": false
            },
            "resultSchema": {
                "type": "object",
                "properties": {
                },
                "additionalProperties": false
            },
            "optionsSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "examples": [
                {
                    "title": "Resetting an RTPC value using its name",
                    "description": "Resets the value of \"rtpc\", using its name, to the default for \"gameObject\".",
                    "args": {
                        "rtpc": "Rain_Intensity",
                        "gameObject": 1122334
                    },
                    "return": {
                    }
                },
                {
                    "title": "Resetting an RTPC value using its GUID",
                    "description": "Resets the value of \"rtpc\", using its GUID, to the default for \"gameObject\".",
                    "args": {
                        "rtpc": "{12345678-9012-3456-7896-156685135438}",
                        "gameObject": 1122334
                    },
                    "return": {
                    }
                }
            ]
        },
        {
            "id": "ak.soundengine.setRTPCValue",
            "restrict": [ "userInterface" ],
            "seeAlso": [ "ak.soundengine.resetRTPCValue" ],
            "description": "Sets the value of a real-time parameter control. See <tt>AK::SoundEngine::SetRTPCValue</tt>.",
            "argsSchema": {
                "type": "object",
                "properties": {
                    "rtpc": {
                        "$ref": "#/definitions/soundEngineObjectArg",
                        "description": "Either the ID (GUID), name, or Short ID of the real-time parameter control."
                    },
                    "value": {
                        "type": "number",
                        "description": "Value to set."
                    },
                    "gameObject": {
                        "$ref": "#/definitions/gameObject",
                        "description": "Associated game object ID."
                    }
                },
                "required": [ "rtpc", "value", "gameObject" ],
                "additionalProperties": false
            },
            "resultSchema": {
                "type": "object",
                "properties": {
                },
                "additionalProperties": false
            },
            "optionsSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "examples": [
                {
                    "title": "Setting an RTPC value using its name",
                    "description": "Sets the value of \"rtpc\", using its name, to \"value\" for \"gameObject\".",
                    "args": {
                        "rtpc": "Rain_Intensity",
                        "value": 74,
                        "gameObject": 1122334
                    },
                    "return": {
                    }
                },
                {
                    "title": "Setting an RTPC value using its GUID",
                    "description": "Sets the value of \"rtpc\", using its GUID, to \"value\" for \"gameObject\".",
                    "args": {
                        "rtpc": "{A076AA65-B71A-45BB-8841-5A20C52CE727}",
                        "value": 1853,
                        "gameObject": 22556677
                    },
                    "return": {
                    }
                }
            ]
        },
        {
            "id": "ak.soundengine.setListenerSpatialization",
            "seeAlso": [ "ak.soundengine.setListeners" ],
            "restrict": [ "userInterface" ],
            "description": "Sets a listener's spatialization parameters. This lets you define listener-specific volume offsets for each audio channel. See <tt>AK::SoundEngine::SetListenerSpatialization</tt>.",
            "argsSchema": {
                "type": "object",
                "properties": {
                    "listener": {
                        "$ref": "#/definitions/gameObject",
                        "description": "Listener game object ID."
                    },
                    "spatialized": {
                        "type": "boolean",
                        "description": "Spatialization toggle (true: enable spatialization, false: disable spatialization)."
                    },
                    "channelConfig": {
                        "$ref": "#/definitions/uint32",
                        "description": "Channel configuration associated with volumeOffsets. Use <tt>AK::AkChannelConfig::Serialize</tt> to serialize the value."
                    },
                    "volumeOffsets": {
                        "type": "array",
                        "items": {
                            "type": "number",
                            "maxItems": 4294967295,
                            "description": "Per-speaker volume offset."
                        },
                        "description": "Array of per-speaker volume offsets, in dB. See AkSpeakerVolumes.h for how to manipulate this array."
                    }
                },
                "required": [ "listener", "spatialized", "channelConfig", "volumeOffsets" ],
                "additionalProperties": false
            },
            "resultSchema": {
                "type": "object",
                "properties": {
                },
                "additionalProperties": false
            },
            "optionsSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "examples": [
                {
                    "title": "Setting the listener spatialization",
                    "description": "Sets the spatialization for \"listener\" using \"volumeOffsets\" to pan to the left.",
                    "args": {
                        "listener": 555,
                        "spatialized": false,
                        "channelConfig": 12546,
                        "volumeOffsets": [ 0.0, -96.3 ]
                    },
                    "result": { }
                }
            ]
        },
        {
            "id": "ak.soundengine.setMultiplePositions",
            "restrict": [ "userInterface" ],
            "seeAlso": [ "ak.soundengine.setPosition", "ak.soundengine.registerGameObj" ],
            "description": "Sets multiple positions for a single game object. Setting multiple positions for a single game object is a way to simulate multiple emission sources while using the resources of only one voice. This can be used to simulate wall openings, area sounds, or multiple objects emitting the same sound in the same area. See <tt>AK::SoundEngine::SetMultiplePositions</tt>.",
            "argsSchema": {
                "type": "object",
                "properties": {
                    "gameObject": {
                        "$ref": "#/definitions/gameObject",
                        "description": "Game Object identifier."
                    },
                    "positions": {
                        "type": "array",
                        "items": {
                            "maxItems": 65535,
                            "type": "object",
                            "properties": {
                                "position": {
                                    "type": "object",
                                    "description": "A 3D position to set for the game object.",
                                    "properties": {
                                        "orientationFront": {
                                            "type": "object",
                                            "description": "Orientation of the listener.",
                                            "properties": {
                                                "x": {
                                                    "type": "number",
                                                    "description": "X Position."
                                                },
                                                "y": {
                                                    "type": "number",
                                                    "description": "Y Position."
                                                },
                                                "z": {
                                                    "type": "number",
                                                    "description": "Z Position."
                                                }
                                            },
                                            "required": [ "x", "y", "z" ],
                                            "additionalProperties": false
                                        },
                                        "orientationTop": {
                                            "type": "object",
                                            "description": "Top orientation of the listener.",
                                            "properties": {
                                                "x": {
                                                    "type": "number",
                                                    "description": "X Position."
                                                },
                                                "y": {
                                                    "type": "number",
                                                    "description": "Y Position."
                                                },
                                                "z": {
                                                    "type": "number",
                                                    "description": "Z Position."
                                                }
                                            },
                                            "required": [ "x", "y", "z" ],
                                            "additionalProperties": false
                                        },
                                        "position": {
                                            "type": "object",
                                            "description": "Position of the listener",
                                            "properties": {
                                                "x": {
                                                    "type": "number",
                                                    "description": "X Position."
                                                },
                                                "y": {
                                                    "type": "number",
                                                    "description": "Y Position."
                                                },
                                                "z": {
                                                    "type": "number",
                                                    "description": "Z Position."
                                                }
                                            },
                                            "required": [ "x", "y", "z" ],
                                            "additionalProperties": false
                                        }
                                    },
                                    "required": [ "orientationFront", "orientationTop", "position" ],
                                    "additionalProperties": false
                                }
                            },
                            "description":"Position",
                            "required": [ "position" ],
                            "additionalProperties": false
                        },
                        "description": "Array of positions to apply."
                    },
                    "multiPositionType": {
                        "type": "integer",
                        "minimum": 0,
                        "maximum": 2,
                        "description": "Uses values from <tt>AK::SoundEngine::MultiPositionType</tt>."
                    }
                },
                "required": [ "gameObject", "positions", "multiPositionType" ],
                "additionalProperties": false
            },
            "resultSchema": {
                "type": "object",
                "properties": {
                },
                "additionalProperties": false
            },
            "optionsSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "examples": [
                {
                    "title": "Setting multiple positions for a game object",
                    "description": "Sets \"gameObject\" to multiple positions, as defined in \"positions\", to simulate multiple sources for one playing sound.",
                    "args": {
                        "gameObject": 1122334,
                        "positions": [
                            {
                                "position": {
                                    "orientationFront": {
                                        "x": 5,
                                        "y": 20,
                                        "z": 10
                                    },
                                    "orientationTop": {
                                        "x": 70,
                                        "y": 150,
                                        "z": 6
                                    },
                                    "position": {
                                        "x": 70,
                                        "y": 150,
                                        "z": 10
                                    }
                                }
                            },
                            {
                                "position": {
                                    "orientationFront": {
                                        "x": -50,
                                        "y": 80,
                                        "z": 15
                                    },
                                    "orientationTop": {
                                        "x": 2,
                                        "y": 40,
                                        "z": 6
                                    },
                                    "position": {
                                        "x": 2,
                                        "y": -20,
                                        "z": 400
                                    }
                                }
                            }
                        ],
                        "multiPositionType": 1
                    },
                    "result": { }
                }
            ]
        },
        {
            "id": "ak.soundengine.setPosition",
            "restrict": [ "userInterface" ],
            "seeAlso": [ "ak.soundengine.setMultiplePositions", "ak.soundengine.registerGameObj" ],
            "description": "Sets the position of a game object. See <tt>AK::SoundEngine::SetPosition</tt>.",
            "argsSchema": {
                "type": "object",
                "properties": {
                    "gameObject": {
                        "$ref": "#/definitions/gameObject",
                        "description": "Game Object identifier."
                    },
                    "position": {
                        "type": "object",
                        "description": "The 3D position to set for the game object.",
                        "properties": {
                            "orientationFront": {
                                "type": "object",
                                "description": "Orientation of the listener.",
                                "properties": {
                                    "x": {
                                        "type": "number",
                                        "description": "X Position."
                                    },
                                    "y": {
                                        "type": "number",
                                        "description": "Y Position."
                                    },
                                    "z": {
                                        "type": "number",
                                        "description": "Z Position."
                                    }
                                },
                                "required": [ "x", "y", "z" ],
                                "additionalProperties": false
                            },
                            "orientationTop": {
                                "type": "object",
                                "description": "Top orientation of the listener.",
                                "properties": {
                                    "x": {
                                        "type": "number",
                                        "description": "X Position."
                                    },
                                    "y": {
                                        "type": "number",
                                        "description": "Y Position."
                                    },
                                    "z": {
                                        "type": "number",
                                        "description": "Z Position."
                                    }
                                },
                                "required": [ "x", "y", "z" ],
                                "additionalProperties": false
                            },
                            "position": {
                                "type": "object",
                                "description": "Position of the listener",
                                "properties": {
                                    "x": {
                                        "type": "number",
                                        "description": "X Position."
                                    },
                                    "y": {
                                        "type": "number",
                                        "description": "Y Position."
                                    },
                                    "z": {
                                        "type": "number",
                                        "description": "Z Position."
                                    }
                                },
                                "required": [ "x", "y", "z" ],
                                "additionalProperties": false
                            }
                        },
                        "required": [ "orientationFront", "orientationTop", "position" ],
                        "additionalProperties": false
                    }
                },
                "required": [ "gameObject", "position" ],
                "additionalProperties": false
            },
            "resultSchema": {
                "type": "object",
                "properties": {
                },
                "additionalProperties": false
            },
            "optionsSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "examples": [
                {
                    "title": "Setting the position of a game object",
                    "description": "Sets the position of \"gameObject\" to \"position/position\" with the provided orientation.",
                    "args": {
                        "gameObject": 1122334,
                        "position": {
                            "orientationFront": {
                                "x": 100,
                                "y": 200,
                                "z": 0
                            },
                            "orientationTop": {
                                "x": 0,
                                "y": 0,
                                "z": 200
                            },
                            "position": {
                                "x": 5,
                                "y": 10,
                                "z": 100
                            }
                        }
                    },
                    "return": {
                    }
                }
            ]
        },
        {
            "id": "ak.soundengine.setScalingFactor",
            "restrict": [ "userInterface" ],
            "seeAlso": [ "ak.soundengine.setPosition", "ak.soundengine.registerGameObj" ],
            "description": "Sets the scaling factor of a game object. You can modify the attenuation computations on this game object to simulate sounds with a larger or smaller affected areas. See <tt>AK::SoundEngine::SetScalingFactor</tt>.",
            "argsSchema": {
                "type": "object",
                "properties": {
                    "gameObject": {
                        "$ref": "#/definitions/gameObject",
                        "description": "The game object identifier."
                    },
                    "attenuationScalingFactor": {
                        "type": "number",
                        "description": "The scaling factor, where 1 means 100%, 0.5 means 50%, 2 means 200%, and so on."
                    }
                },
                "required": [ "gameObject", "attenuationScalingFactor" ],
                "additionalProperties": false
            },
            "resultSchema": {
                "type": "object",
                "properties": {
                },
                "additionalProperties": false
            },
            "optionsSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "examples": [
                {
                    "title": "Setting the scaling factor of a game object",
                    "description": "Sets the scaling factor of \"gameObject\" to \"attenuationScalingFactor\" (200%).",
                    "args": {
                        "gameObject": 1122334,
                        "attenuationScalingFactor": 2
                    },
                    "return": {
                    }
                }
            ]
        },
        {
            "id": "ak.soundengine.setDefaultListeners",
            "restrict": [ "userInterface" ],
            "seeAlso": [ "ak.soundengine.setListeners" ],
            "description": "Sets the default active listeners for all subsequent game objects that are registered. See <tt>AK::SoundEngine::SetDefaultListeners</tt>.",
            "argsSchema": {
                "type": "object",
                "properties": {
                    "listeners": {
                        "type": "array",
                        "items": {
                            "maxItems": 4294967295,
                            "$ref": "#/definitions/gameObject"
                        },
                        "description": "Array of listener game object IDs. Game objects must have been previously registered."
                    }
                },
                "required": [ "listeners" ],
                "additionalProperties": false
            },
            "resultSchema": {
                "type": "object",
                "properties": {
                },
                "additionalProperties": false
            },
            "optionsSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "examples": [
                {
                    "title": "Setting the list of default listeners",
                    "description": "Sets \"listeners\" as the list of default listeners.",
                    "args": {
                        "listeners": [
                            2233445,
                            5566778,
                            123456,
                            11222648
                        ]
                    },
                    "return": {
                    }
                }
            ]
        },
        {
            "id": "ak.soundengine.setListeners",
            "restrict": [ "userInterface" ],
            "seeAlso": [ "ak.soundengine.setDefaultListeners" ],
            "description": "Sets a single game object's active listeners. By default, all new game objects have no listeners active, but this behavior can be overridden with <tt>SetDefaultListeners()</tt>. Inactive listeners are not computed. See <tt>AK::SoundEngine::SetListeners</tt>.",
            "argsSchema": {
                "type": "object",
                "properties": {
                    "emitter": {
                        "$ref": "#/definitions/gameObject",
                        "description": "Emitter game object."
                    },
                    "listeners": {
                        "type": "array",
                        "items": {
                            "maxItems": 4294967295,
                            "$ref": "#/definitions/gameObject"
                        },
                        "description": "Array of listener game object IDs. Game objects must have been previously registered."
                    }
                },
                "required": [ "emitter", "listeners" ],
                "additionalProperties": false
            },
            "resultSchema": {
                "type": "object",
                "properties": {
                },
                "additionalProperties": false
            },
            "optionsSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "examples": [
                {
                    "title": "Setting a list of listeners for a game object",
                    "description": "Sets \"listeners\" as the list of active listeners for \"gameObject\".",
                    "args": {
                        "emitter": 1122334,
                        "listeners": [
                            2233445,
                            5566778,
                            123456,
                            11222648
                        ]
                    },
                    "return": {
                    }
                }
            ]
        },
        {
            "id": "ak.soundengine.seekOnEvent",
            "restrict": [ "userInterface" ],
            "seeAlso": [ "ak.soundengine.postEvent", "ak.soundengine.registerGameObj" ],
            "description": "Seeks inside all playing objects that are referenced in Play Actions of the specified Event. See <tt>AK::SoundEngine::SeekOnEvent</tt>.",
            "argsSchema": {
                "type": "object",
                "properties": {
                    "event": {
                        "$ref": "#/definitions/soundEngineObjectArg",
                        "description": "Either the ID (GUID), name, or Short ID of the Event."
                    },
                    "gameObject": {
                        "$ref": "#/definitions/gameObject",
                        "description": "Associated game object ID; use <tt>AK_INVALID_GAME_OBJECT</tt> to affect all game objects."
                    },
                    "position": {
                        "$ref": "#/definitions/int32",
                        "description": "Desired position where playback should restart, in milliseconds."
                    },
                    "percent": {
                        "type": "number",
                        "description": "Desired position where playback should restart, expressed in a percentage of the file's total duration, between 0 and 1.f. See note above about infinite looping sounds."
                    },
                    "seekToNearestMarker": {
                        "type": "boolean",
                        "description": "If true, the final seeking position is made equal to the nearest marker."
                    },
                    "playingId": {
                        "$ref": "#/definitions/uint32",
                        "description": "Specifies the playing ID for which the seek is to be applied. This results in the seek being applied only to active actions of the playing ID. Use \\c AK_INVALID_PLAYING_ID or nothing, to seek on all active Actions of this Event ID."
                    }
                },
                "oneOf": [
                    { "required": [ "event", "gameObject", "position", "seekToNearestMarker", "playingId" ] },
                    { "required": [ "event", "gameObject", "percent", "seekToNearestMarker", "playingId" ] }
                ],
                "additionalProperties": false
            },
            "resultSchema": {
                "type": "object",
                "properties": {
                },
                "additionalProperties": false
            },
            "optionsSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "examples": [
                {
                    "title": "Seeking to position 1 s",
                    "description": "Seeks on \"gameObject\" referenced in the Play Action of \"event\" at 1 second.",
                    "args": {
                        "event": "MyEventName",
                        "gameObject": 1122334,
                        "position": 1000,
                        "seekToNearestMarker": false,
                        "playingId": 0
                    },
                    "return": {
                    }
                },
                {
                    "title": "Seeking to 35% of duration",
                    "description": "Seeks on \"gameObject\" referenced in the Play Action of \"event\" at 35% of the duration.",
                    "args": {
                        "event": 5566123,
                        "gameObject": 1122334,
                        "percent": 0.35,
                        "seekToNearestMarker": false,
                        "playingId": 321654
                    },
                    "return": {
                    }
                }
            ]
        },
        {
            "id": "ak.soundengine.unregisterGameObj",
            "restrict": [ "userInterface" ],
            "seeAlso": [ "ak.soundengine.registerGameObj" ],
            "description": "Unregisters a game object. Registering a game object twice does nothing. Unregistering it once unregisters it no matter how many times it has been registered. Unregistering a game object while it is in use is allowed, but the control over the parameters of this game object is lost. For example, say a sound associated with this game object is a 3D moving sound. It stops moving when the game object is unregistered, and there is no way to regain control over the game object. See <tt>AK::SoundEngine::UnregisterGameObj</tt>.",
            "argsSchema": {
                "type": "object",
                "properties": {
                    "gameObject": {
                        "$ref": "#/definitions/gameObject",
                        "description": "ID of the game object to be unregistered. Use \\c AK_INVALID_GAME_OBJECT to unregister all game objects."
                    }
                },
                "required": [ "gameObject" ],
                "additionalProperties": false
            },
            "resultSchema": {
                "type": "object",
                "properties": {
                },
                "additionalProperties": false
            },
            "optionsSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "examples": [
                {
                    "title": "Unregistering a game object",
                    "description": "Unregisters \"gameObject\".",
                    "args": {
                        "gameObject": 1122334
                    },
                    "return": {
                    }
                }
            ]
        },
        {
            "id": "ak.wwise.waapi.getTopics",
            "restrict": [ "userInterface", "commandLine" ],
            "seeAlso": [ "ak.wwise.waapi.getFunctions", "ak.wwise.waapi.getSchema" ],
            "description": "Retrieves the list of topics to which a client can subscribe.",
            "argsSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "resultSchema": {
                "type": "object",
                "properties": {
                    "topics": {
                        "type": "array",
                        "description": "Array of topic URIs.",
                        "items": {
                            "type": "string",
                            "description": "Topic URIs retrieved from the Wwise Authoring API schema."
                        }
                    }
                },
                "additionalProperties": false
            },
            "optionsSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "examples": [ ]
        },
        {
            "id": "ak.wwise.waapi.getFunctions",
            "restrict": [ "userInterface", "commandLine" ],
            "seeAlso": [ "ak.wwise.waapi.getTopics", "ak.wwise.waapi.getSchema" ],
            "description": "Retrieves the list of functions.",
            "argsSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "resultSchema": {
                "type": "object",
                "properties": {
                    "functions": {
                        "type": "array",
                        "description": "An array of Function URIs.",
                        "items": {
                            "type": "string",
                            "description": "Function URIs retrieved from the Wwise Authoring API schema."
                        }
                    }
                },
                "additionalProperties": false
            },
            "optionsSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "examples": [ ]
        },
        {
            "id": "ak.wwise.waapi.getSchema",
            "restrict": [ "userInterface", "commandLine" ],
            "seeAlso": [ "ak.wwise.waapi.getFunctions", "ak.wwise.waapi.getTopics" ],
            "description": "Retrieves the JSON schema of a Waapi URI.",
            "argsSchema": {
                "type": "object",
                "properties": {
                    "uri": {
                        "type": "string",
                        "description": "Waapi URI (see ak.wwise.waapi.getTopics, ak.wwise.waapi.getFunctions)."
                    }
                },
                "required": [ "uri" ],
                "additionalProperties": false
            },
            "resultSchema": {
                "type": "object",
                "properties": {
                    "argsSchema": {
                        "type": "object",
                        "description": "The argument schema. Only possible for functions.",
                        "properties": { },
                        "additionalProperties": true
                    },
                    "optionsSchema": {
                        "type": "object",
                        "description": "The option schema.",
                        "properties": { },
                        "additionalProperties": true
                    },
                    "resultSchema": {
                        "type": "object",
                        "description": "The result schema. Only possible for functions.",
                        "properties": { },
                        "additionalProperties": true
                    },
                    "publishSchema": {
                        "type": "object",
                        "description": "The publish schema. Only possible for topics.",
                        "properties": { },
                        "additionalProperties": true
                    }
                },
                "additionalProperties": false
            },
            "optionsSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "examples": [ ]
        },
        {
            "id": "ak.wwise.ui.project.open",
            "restrict": [ "userInterface" ],
            "seeAlso": ["ak.wwise.ui.project.close", "ak.wwise.core.project.save", "ak.wwise.core.project.loaded" ],
            "description": "Opens a project, specified by path. Please refer to \\ref ak_wwise_core_project_loaded for further explanations on how to be notified when the operation has completed.",
            "argsSchema": {
                "type": "object",
                "properties": {
                    "path": {
                        "type": "string",
                        "pattern": "\\.wproj$",
                        "description": "The path to the project file. For using WAAPI on Mac, please refer to \\ref waapi_path_on_mac ."
                    },
                    "onUpgrade": {
                        "type": "string",
                        "enum": [ "migrate", "fail" ],
                        "description": "The action to be executed when opening a project that needs to be upgraded."
                    },
                    "bypassSave": {
                        "type": "boolean",
                        "description": "Indicates if the user should not be prompted to save the current project."
                    }
                },
                "required": [ "path" ],
                "additionalProperties": false
            },
            "resultSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "optionsSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "examples": [
                {
                    "title": "Opening a project",
                    "description": "Opens the .wproj project specified by path.",
                    "args": {
                        "path": "C:\\projects\\myWwiseProject.wproj",
                        "bypassSave": false
                    },
                    "result": { }
                }
            ]
        },
        {
            "id": "ak.wwise.ui.project.close",
            "restrict": [ "userInterface" ],
            "seeAlso": [ "ak.wwise.ui.project.open", "ak.wwise.core.project.save" ],
            "description": "Closes the current project.",
            "argsSchema": {
                "type": "object",
                "properties": {
                    "bypassSave": {
                        "type": "boolean",
                        "description": "Indicates if the user should not be prompted to save the current project."
                    }
                },
                "additionalProperties": false
            },
            "resultSchema": {
                "type": "object",
                "properties": {
                    "hadProjectOpen": {
                        "type": "boolean",
                        "description": "True if there was a project open, false otherwise. Note that if there was no project open, no ak.wwise.core.project.preClosed or ak.wwise.core.project.postClosed event is issued."
                    }
                },
                "additionalProperties": false
            },
            "optionsSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "examples": [
                {
                    "title": "Closing the current project",
                    "description": "Closes the current project.",
                    "args": { },
                    "result": { }
                }
            ]
        },
        {
            "id": "ak.wwise.core.project.save",
            "restrict": [ "userInterface", "commandLine" ],
            "seeAlso": [ "ak.wwise.core.project.saved" ],
            "description": "Saves the current project.",
            "argsSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "resultSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "optionsSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "examples": [
                {
                    "title": "Saving the current project",
                    "description": "Saves the current project.",
                    "args": { },
                    "result": { }
                }
            ]
        },
        {
            "id": "ak.wwise.core.object.setName",
            "restrict": [ "userInterface", "commandLine" ],
            "seeAlso": [ "ak.wwise.core.object.nameChanged", "ak.wwise.core.object.setNotes", "ak.wwise.core.undo.beginGroup" ],
            "description": "Renames an object.",
            "argsSchema": {
                "type": "object",
                "properties": {
                    "object": {
                        "$ref": "#/definitions/objectArg",
                        "description": "The ID (GUID), name, or path of the object to rename."
                    },
                    "value": {
                        "type": "string",
                        "description": "The new name of the object."
                    }
                },
                "required": [ "object", "value" ],
                "additionalProperties": false
            },
            "resultSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "optionsSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "examples": [
                {
                    "title": "Renaming a WwiseObject",
                    "description": "Renames the object specified by \"object\" to \"value\".",
                    "args": {
                        "object": "{24979032-B170-43E3-A2E4-469E0193E2C3}",
                        "value": "new name"
                    },
                    "result": { }
                }
            ]
        },
        {
            "id": "ak.wwise.core.object.setReference",
            "restrict": [ "userInterface", "commandLine" ],
            "seeAlso": [ "ak.wwise.core.object.referenceChanged", "ak.wwise.core.object.setProperty", "ak.wwise.core.undo.beginGroup" ],
            "description": "Sets an object's reference value. Refer to \\ref wobjects_index for more information on the references available on each object type.",
            "argsSchema": {
                "type": "object",
                "properties": {
                    "object": {
                        "$ref": "#/definitions/objectArg",
                        "description": "The ID (GUID), name, or path of the object which has the reference."
                    },
                    "platform": {
                        "$ref": "#/definitions/platformArg",
                        "description": "The ID (GUID) or unique name of the platform to link the reference. Set to null-guid for unlinked reference."
                    },
                    "reference": {
                        "type": "string",
                        "description": "The name of the reference to set. Refer to \\ref wobjects_index for more information on the references available."
                    },
                    "value": {
                        "$ref": "#/definitions/objectArg",
                        "description": "The ID (GUID), name, or path of the object to be referred to."
                    }
                },
                "required": [ "object", "reference", "value" ],
                "additionalProperties": false
            },
            "resultSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "optionsSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "examples": [
                {
                    "title": "Setting an object reference",
                    "description": "Sets the Output Bus on the specified object.",
                    "args": {
                        "object": "\\Actor-Mixer Hierarchy\\Default Work Unit\\MySound",
                        "reference": "OutputBus",
                        "value": "\\Master-Mixer Hierarchy\\Default Work Unit\\Master Audio Bus\\Environment Bus"
                    },
                    "result": { }
                }
            ]
        },
        {
            "id": "ak.wwise.core.object.setProperty",
            "restrict": [ "userInterface", "commandLine" ],
            "seeAlso": [ "ak.wwise.core.object.get", "ak.wwise.core.object.propertyChanged", "ak.wwise.core.object.setReference", "ak.wwise.core.undo.beginGroup" ],
            "description": "Sets a property value of an object for a specific platform. Refer to \\ref wobjects_index for more information on the properties available on each object type. Refer to \\ref ak_wwise_core_object_setreference to set a reference to an object. Refer to \\ref ak_wwise_core_object_get to obtain the value of a property for an object.",
            "argsSchema": {
                "type": "object",
                "properties": {
                    "object": {
                        "$ref": "#/definitions/objectArg",
                        "description": "The ID (GUID), name, or path of the object to set value."
                    },
                    "property": {
                        "type": "string",
                        "description": "The name of the property. For more information, refer to the property list of Wwise Objects listed in \\ref wobjects_index .",
                        "$ref":"#/definitions/propertyName"
                    },
                    "platform": {
                        "$ref": "#/definitions/platformArg",
                        "description": "The ID (GUID) or unique name of the platform. This is used to set values for unlinked properties. This is an optional argument. When not specified, the current platform is used to set the property."
                    },
                    "value": {
                        "$ref": "#/definitions/propertyValue",
                        "description": "The value of the object."
                    }
                },
                "required": [
                    "object",
                    "property",
                    "value"
                ],
                "additionalProperties": false
            },
            "resultSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "optionsSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "examples": [
                {
                    "title": "Setting the volume",
                    "description": "Sets the \"Volume\" property of the object defined by \"object\" to \"Value\".",
                    "args": {
                        "object": "\\Master-Mixer Hierarchy\\Default Work Unit\\Master Audio Bus",
                        "property": "Volume",
                        "value": -3
                    },
                    "result": { }
                },                
                {
                    "title": "Setting the value of a specified property on the specified platform",
                    "description": "Sets the \"Volume\" property of the object defined by \"object\" to \"Value\".",
                    "args": {
                        "object": "\\Master-Mixer Hierarchy\\Default Work Unit\\Master Audio Bus",
                        "property": "Volume",
                        "platform": "Windows",
                        "value": 5.7
                    },
                    "result": { }
                }
            ]
        },
        {
            "id": "ak.wwise.core.object.setRandomizer",
            "restrict": [ "userInterface", "commandLine" ],
            "seeAlso": [ "ak.wwise.core.object.propertyChanged" ],
            "description": "Sets the randomizer values of a property of an object for a specific platform. Refer to \\ref wobjects_index for more information on the properties available on each object type.",
            "argsSchema": {
                "type": "object",
                "properties": {
                    "object": {
                        "$ref": "#/definitions/objectArg",
                        "description": "The ID (GUID), name, or path of the object owning the property."
                    },
                    "property": {
                        "type": "string",
                        "description": "The name of the property. For more information, refer to the property list of Wwise Objects listed in \\ref wobjects_index .",
                        "$ref":"#/definitions/propertyName"
                    },
                    "platform": {
                        "$ref": "#/definitions/platformArg",
                        "description": "The ID (GUID) or unique name of the platform."
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Enabled state of the randomizer."
                    },
                    "min": {
                        "type": "number",
                        "maximum": 0,
                        "description": "Minimum value that the randomizer can offset by."
                    },
                    "max": {
                        "type": "number",
                        "minimum": 0,
                        "description": "Maximum value that the randomizer can offset by."
                    }
                },
                "anyOf": [
                    {"required": ["object", "property", "enabled"]},
                    {"required": ["object", "property", "min"]},
                    {"required": ["object", "property", "max"]}
                ],
                "additionalProperties": false
            },
            "resultSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "optionsSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "examples": [
                {
                    "title": "Setting the Volume randomizer values of a Sound object",
                    "description": "Sets the randomizer attributes corresponding to the \"Volume\" property of the object defined by \"object\".",
                    "args": {
                        "object": "{A076AA65-B71A-45BB-8841-5A20C52CE727}",
                        "property": "Volume",
                        "platform": "{66666666-7777-8888-9999-AAAAAAAAAAAA}",
                        "enabled": true,
                        "min": -8,
                        "max": 6
                    },
                    "result": { }
                }
            ]
        },
        {
            "id": "ak.wwise.core.object.setNotes",
            "restrict": [ "userInterface", "commandLine" ],
            "seeAlso": [ "ak.wwise.core.object.setName", "ak.wwise.core.object.notesChanged" ],
            "description": "Sets the object's notes.",
            "argsSchema": {
                "type": "object",
                "properties": {
                    "object": {
                        "$ref": "#/definitions/objectArg",
                        "description": "The ID (GUID), name, or path of the object to set value."
                    },
                    "value": {
                        "type": "string",
                        "description": "The new notes of the object."
                    }
                },
                "required": [
                    "object",
                    "value"
                ],
                "additionalProperties": false
            },
            "resultSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "optionsSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "examples": [
                {
                    "title": "Setting the notes of an object",
                    "description": "Sets the notes of the object defined by \"object\".",
                    "args": {
                        "object": "{A076AA65-B71A-45BB-8841-5A20C52CE727}",
                        "value": "This object's notes are set."
                    },
                    "result": { }
                }
            ]
        },
        {
            "id": "ak.wwise.ui.commands.execute",
            "restrict": [ "userInterface" ],
            "seeAlso": [ "ak.wwise.ui.commands.executed", "ak.wwise.ui.commands.getCommands" ],
            "description": "Executes a command. Some commands can take a list of objects as parameters. Refer to \\ref globalcommandsids for the available commands.",
            "argsSchema": {
                "type": "object",
                "properties": {
                    "command": {
                        "type": "string",
                        "description": "The ID of the command to execute. Refer to \\ref globalcommandsids for the lists of commands."
                    },
                    "objects": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/objectArg"
                        },
                        "description": "An array of objects. Each object is an ID (GUID), name, or path of the object. Some commands can take objects as arguments. Refer to the commands for more information."
                    },
                    "platforms": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/platformArg"
                        },
                        "description": "An array of platform. Each platform is an ID (GUID) or a unique name. Some commands can take platforms as arguments. Refer to the commands for more information."
                    },
                    "value": {
                        "$ref": "#/definitions/propertyValue",
                        "description": "A value to pass to the command. Some commands can take a value as an argument. Refer to the commands for more information."
                    }
                },
                "required": [ "command" ],
                "additionalProperties": false
            },
            "resultSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "optionsSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "examples": [
                {
                    "title": "Finding and selecting objects in Project Explorer",
                    "description": "Finds the specified objects in the Project Explorer view (sync group 1), and selects them.",
                    "args": {
                        "command": "FindInProjectExplorerSyncGroup1",
                        "objects": [ "{83D27335-6B94-4939-A01F-F00BEEB36E24}", "{A076AA65-B71A-45BB-8841-5A20C52CE727}" ]
                    },
                    "result": { }
                },
                {
                    "title": "Executing a command requiring the object's parameter",
                    "description": "Executes \"ConvertCurrentPlatform\" on objects defined by \"objects\" GUID's.",
                    "args": {
                        "command": "ConvertCurrentPlatform",
                        "objects": [ "{83D27335-6B94-4939-A01F-F00BEEB36E24}", "{A076AA65-B71A-45BB-8841-5A20C52CE727}" ]
                    },
                    "result": { }
                },
                {
                    "title": "Executing a command not requiring the object's parameter",
                    "description": "Executes the \"ResetAllMutes\" command.",
                    "args": {
                        "command": "ResetAllMutes"
                    },
                    "result": { }
                }
            ]
        },
        {
            "id": "ak.wwise.ui.commands.getCommands",
            "restrict": [ "userInterface" ],
            "seeAlso": [ "ak.wwise.ui.commands.execute" ],
            "description": "Gets the list of commands.",
            "argsSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "resultSchema": {
                "type": "object",
                "properties": {
                    "commands": {
                        "type": "array",
                        "description": "An array of command ids.",
                        "items": {
                            "type": "string",
                            "description": "Command ids which can be used with ak.wwise.ui.commands.execute."
                        }
                    }
                },
                "additionalProperties": false
            },
            "optionsSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "examples": [ ]
        },
        {
            "id": "ak.wwise.ui.getSelectedObjects",
            "restrict": [ "userInterface" ],
            "description": "Retrieves the list of objects currently selected by the user in the active view.",
            "argsSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "resultSchema": {
                "type": "object",
                "properties": {
                    "objects": {
                        "type": "array",
                        "description": "The selected objects, in the format specified in the options. Can be empty if no object is selected.",
                        "items": {
                            "$ref": "#/definitions/objectReturn",
                            "description": "The selected objects. Use the options to specify which data to return. Default returns id and name."
                        }
                    }
                },
                "required": [ "objects" ],
                "additionalProperties": false
            },
            "optionsSchema": {
                "$ref": "#/definitions/objectReturnOptions",
                "description": "Specifies the return options for every object returned."
            },
            "examples": [
                {
                    "title": "Getting the selected object",
                    "description": "Retrieves the GUID of the selected object",
                    "args": { },
                    "result": {
                        "objects": [
                            {
                                "id": "{A076AA65-B71A-45BB-8841-5A20C52CE727}",
                                "name": "MySound"
                            }
                        ]
                    }
                }
            ]
        },
        {
            "id": "ak.wwise.core.object.getAttenuationCurve",
            "restrict": [ "userInterface", "commandLine" ],
            "seeAlso": [ "ak.wwise.core.object.setAttenuationCurve" ],
            "description": "Gets the specified attenuation curve for a given attenuation object.",
            "argsSchema": {
                "type": "object",
                "properties": {
                    "object": {
                        "$ref": "#/definitions/objectArg",
                        "description": "The ID (GUID), name, or path of attenuation object."
                    },
                    "platform": {
                        "$ref": "#/definitions/platformArg",
                        "description": "The ID (GUID) or unique name of the platform to get curves.  Set to null-guid for unlinked reference."
                    },
                    "curveType": {
                        "type": "string",
                        "enum": [ "VolumeDryUsage", "VolumeWetGameUsage", "VolumeWetUserUsage", "LowPassFilterUsage", "HighPassFilterUsage", "SpreadUsage", "FocusUsage" ],
                        "description": "Type of attenuation curve."
                    }
                },
                "required": [ "object", "curveType" ]
            },
            "resultSchema": {
                "type": "object",
                "properties": {
                    "curveType": {
                        "type": "string",
                        "enum": [ "VolumeDryUsage", "VolumeWetGameUsage", "VolumeWetUserUsage", "LowPassFilterUsage", "HighPassFilterUsage", "SpreadUsage", "FocusUsage" ],
                        "description": "Name of attenuation curve."
                    },
                    "use": {
                        "type": "string",
                        "enum": [ "None", "Custom", "UseVolumeDry" ],
                        "description": "Defines whether the curve has no points, has its own set of points, or uses those of the VolumeDryUsage curve."
                    },
                    "points": {
                        "type": "array",
                        "description": "An array of points for the attenuation curve.",
                        "items": {
                            "type": "object",
                            "description": "A point in the curve.",
                            "properties": {
                                "x": {
                                    "type": "number",
                                    "description": "X coordinate of curve point."
                                },
                                "y": {
                                    "type": "number",
                                    "description": "Y coordinate of curve point."
                                },
                                "shape": {
                                    "type": "string",
                                    "description": "Shape of curve segment between this point and the next.",
                                    "enum": [ "Constant", "Linear", "Log3", "Log2", "Log1", "InvertedSCurve", "SCurve", "Exp1", "Exp2", "Exp3" ]
                                }
                            },
                            "required": [ "x", "y", "shape" ],
                            "additionalProperties": false
                        }
                    }
                }
            },
            "optionsSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "examples": [
                {
                    "title": "Getting an attenuation curve of an object",
                    "description": "Gets the \"curve\" from an object specified by \"object\"",
                    "args": {
                        "object": "{A076AA65-B71A-45BB-8841-5A20C52CE727}",
                        "platform": "{66666666-7777-8888-9999-AAAAAAAAAAAA}",
                        "curveType": "VolumeDryUsage"
                    },
                    "result": {
                        "curveType": "VolumeDryUsage",
                        "points": [
                            {
                                "shape": "Exp3",
                                "x": 0,
                                "y": 0
                            },
                            {
                                "shape": "SCurve",
                                "x": 30,
                                "y": -3
                            },
                            {
                                "shape": "Log1",
                                "x": 60,
                                "y": -5
                            },
                            {
                                "shape": "Linear",
                                "x": 100,
                                "y": -200
                            }
                        ],
                        "use": "Custom"
                    }
                }
            ]
        },
        {
            "id": "ak.wwise.core.object.setAttenuationCurve",
            "restrict": [ "userInterface", "commandLine" ],
            "seeAlso": [ "ak.wwise.core.object.getAttenuationCurve" ],
            "description": "Sets the specified attenuation curve for a given attenuation object.",
            "argsSchema": {
                "type": "object",
                "properties": {
                    "object": {
                        "$ref": "#/definitions/objectArg",
                        "description": "The ID (GUID), name, or path of attenuation object."
                    },
                    "platform": {
                        "$ref": "#/definitions/platformArg",
                        "description": "The ID (GUID) or unique name of the platform to set curves. Set to null-guid for unlinked curve."
                    },
                    "curveType": {
                        "type": "string",
                        "enum": [ "VolumeDryUsage", "VolumeWetGameUsage", "VolumeWetUserUsage", "LowPassFilterUsage", "HighPassFilterUsage", "SpreadUsage", "FocusUsage" ],
                        "description": "The type of attenuation curve."
                    },
                    "use": {
                        "type": "string",
                        "enum": [ "None", "Custom", "UseVolumeDry" ],
                        "description": "Defines if the curve has no points, has its own set of points, or uses those of the VolumeDryUsage curve."
                    },
                    "points": {
                        "type": "array",
                        "description": "An array of points defining the curve.",
                        "items": {
                            "type": "object",
                            "description": "A point in the curve.",
                            "properties": {
                                "x": {
                                    "type": "number",
                                    "description": "X coordinate of curve point."
                                },
                                "y": {
                                    "type": "number",
                                    "description": "Y coordinate of curve point."
                                },
                                "shape": {
                                    "type": "string",
                                    "description": "Shape of the curve segment between this point and the next.",
                                    "enum": [ "Constant", "Linear", "Log3", "Log2", "Log1", "InvertedSCurve", "SCurve", "Exp1", "Exp2", "Exp3" ]
                                }
                            },
                            "required": [ "x", "y", "shape" ],
                            "additionalProperties": false
                        }
                    }
                },
                "required": [ "object", "curveType", "use", "points" ],
                "additionalProperties": false
            },
            "resultSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "optionsSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "examples": [
                {
                    "title": "Defining an attenuation curve of an object",
                    "description": "Defines the \"object\"'s attenuation curve for \"curveType\" by setting a series of \"points\".",
                    "args": {
                        "object": "{A076AA65-B71A-45BB-8841-5A20C52CE727}",
                        "platform": "{66666666-7777-8888-9999-AAAAAAAAAAAA}",
                        "curveType": "VolumeDryUsage",
                        "use": "Custom",
                        "points": [
                            {
                                "x": 0,
                                "y": 0,
                                "shape": "Exp1"
                            },
                            {
                                "x": 8,
                                "y": -1,
                                "shape": "SCurve"
                            },
                            {
                                "x": 25,
                                "y": -2,
                                "shape": "Constant"
                            }
                        ]
                    },
                    "result": { }
                }
            ]
        },
        {
            "id": "ak.wwise.core.switchContainer.addAssignment",
            "restrict": [ "userInterface", "commandLine" ],
            "seeAlso": [ "ak.wwise.core.switchContainer.getAssignments", "ak.wwise.core.switchContainer.removeAssignment", "ak.wwise.core.switchContainer.assignmentAdded" ],
            "description": "Assigns a Switch Container's child to a Switch. This is the equivalent of doing a drag&drop of the child to a state in the Assigned Objects view. The child is always added at the end for each state.",
            "argsSchema": {
                "type": "object",
                "properties": {
                    "child": {
                        "$ref": "#/definitions/objectArg",
                        "description": "The ID (GUID), name, or path of the object to assign to a State. This object must be the child of a Switch Container."
                    },
                    "stateOrSwitch": {
                        "$ref": "#/definitions/objectArg",
                        "description": "The ID (GUID), name, or path of the State or Switch with which to assign. Must be the child of the Switch Group or State Group that is currently set for the Switch Container."
                    }
                },
                "required": [ "child", "stateOrSwitch" ],
                "additionalProperties": false
            },
            "resultSchema": {
                "type": "object",
                "properties": {},
                "additionalProperties": false
            },
            "optionsSchema": {
                "type": "object",
                "properties": {},
                "additionalProperties": false
            },
            "examples": [
                {
                    "title": "Assigning a Switch Container's child to a State",
                    "description": "Equivalent to dragging a child of a Switch Group to a State listed in the Assigned Objects view.",
                    "args": {
                        "child": "{7A12D08F-B0D9-4403-9EFA-2E6338C197C1}",
                        "stateOrSwitch": "{A076AA65-B71A-45BB-8841-5A20C52CE727}"
                    },
                    "result": {
                    }
                }
            ]
        },
        {
            "id": "ak.wwise.core.switchContainer.removeAssignment",
            "restrict": [ "userInterface", "commandLine" ],
            "seeAlso": [ "ak.wwise.core.switchContainer.getAssignments", "ak.wwise.core.switchContainer.addAssignment", "ak.wwise.core.switchContainer.assignmentRemoved" ],
            "description": "Removes an assignment between a Switch Container's child and a State.",
            "argsSchema": {
                "type": "object",
                "properties": {
                    "child": {
                        "$ref": "#/definitions/objectArg",
                        "description": "The ID (GUID), name, or path of the object assigned to a State. This object must be the child of a Switch Container and must be currently assigned to a State."
                    },
                    "stateOrSwitch": {
                        "$ref": "#/definitions/objectArg",
                        "description": "The ID (GUID), name, or path of the State or Switch to which the child is assigned. Must be the child of the Switch Group or State Group that is currently set for the Switch Container."
                    }
                },
                "required": [ "child", "stateOrSwitch" ],
                "additionalProperties": false
            },
            "resultSchema": {
                "type": "object",
                "properties": {},
                "additionalProperties": false
            },
            "optionsSchema": {
                "type": "object",
                "properties": {},
                "additionalProperties": false
            },
            "examples": [
                {
                    "title": "Removing an assignment from a Switch Container",
                    "description": "Equivalent to select and delete a child assigned to a State in the Assigned Objects view.",
                    "args": {
                        "child": "{7A12D08F-B0D9-4403-9EFA-2E6338C197C1}",
                        "stateOrSwitch": "{A076AA65-B71A-45BB-8841-5A20C52CE727}"
                    },
                    "result": {
                    }
                }
            ]
        },
        {
            "id": "ak.wwise.core.switchContainer.getAssignments",
            "restrict": [ "userInterface", "commandLine" ],
            "seeAlso": [ "ak.wwise.core.switchContainer.addAssignment", "ak.wwise.core.switchContainer.removeAssignment" ],
            "description": "Returns the list of assignments between a Switch Container's children and states.",
            "argsSchema": {
                "type": "object",
                "properties": {
                    "id": {
                        "$ref": "#/definitions/objectArg",
                        "description": "The ID (GUID), name, or path of the Switch Container."
                    }
                },
                "required": [ "id" ],
                "additionalProperties": false
            },
            "resultSchema": {
                "type": "object",
                "properties": {
                    "return": {
                        "description": "List of assignments (pairs of child and state).",
                        "items": [
                            {
                                "type": "object",
                                "properties": {
                                    "child": {
                                        "$ref": "#/definitions/objectArg",
                                        "description": "The ID (GUID), name, or path of the child assigned to a State."
                                    },
                                    "stateOrSwitch": {
                                        "$ref": "#/definitions/objectArg",
                                        "description": "The ID (GUID), name, or path of the State or Switch to which the child is assigned."
                                    }
                                },
                                "required": [ "child", "stateOrSwitch" ],
                                "additionalProperties": false
                            }
                        ]
                    }
                }
            },
            "optionsSchema": {
                "type": "object",
                "properties": {},
                "additionalProperties": false
            },
            "examples": [
                {
                    "title": "Getting the assignments of a Switch Container",
                    "description": "Gets the list of assignments for a Switch Container.",
                    "args": {
                        "id": "{7A12D08F-B0D9-4403-9EFA-2E6338C197C1}"
                    },
                    "result": {
                        "return": [
                            {
                                "child": "{7A12D08F-B0D9-4403-9EFA-2E6338C197C1}",
                                "stateOrSwitch": "{A076AA65-B71A-45BB-8841-5A20C52CE727}"
                            },
                            {
                                "child": "{8B12D08F-B0D9-4403-9EFA-2E6338C197D1}",
                                "stateOrSwitch": "{B076BB65-B71A-45BB-8841-5A20C52CE738}"
                            }
                        ]
                    }
                }
            ]
        },
        {
            "id": "ak.wwise.core.object.create",
            "restrict": [ "userInterface", "commandLine" ],
            "seeAlso": [ "ak.wwise.core.object.created", "ak.wwise.core.audio.import", "ak.wwise.core.undo.beginGroup" ],
            "description": "Creates an object of type 'type', as a child of 'parent'. Refer to \\ref waapi_import for more information about creating objects. Also refer to \\ref ak_wwise_core_audio_import to import audio files to Wwise.",
            "argsSchema": {
                "localDefinitions":{
                    "children": {
                        "type": "array",
                        "description": "An array of child objects to be created.",
                        "items": {
                            "type": "object",
                            "description": "A child objects to be created.",
                            "properties": {
                                "type": {
                                    "type": "string",
                                    "description": "The type of the new object.  Refer to \\ref wobjects_index for possible object types."
                                },
                                "name": {
                                    "type": "string",
                                    "description": "The name of the new object."
                                },
                                "notes": {
                                    "type": "string",
                                    "description": "The notes or comments of the new object."
                                },
                                "children": {
                                    "$ref":"#/localDefinitions/children",
                                    "description": "An array of child objects to be created (Recursive)."
                                }                            
                            },
                            "patternProperties": {
                                "^@[:_a-zA-Z0-9]+$": {
                                    "$ref": "#/definitions/propertyValue",
                                    "description": "Sets the value of property \\@propertyName. Refer to \\ref wobjects_index for property names."
                                }
                            },
                            "required": [ "type", "name" ],
                            "additionalProperties": false
                        }
                    }
                },
                "type": "object",
                "properties": {
                    "parent": {
                        "$ref": "#/definitions/objectArg",
                        "description": "The ID (GUID), name, or path of the parent of the new object."
                    },
                    "list": {
                        "type": "string",
                        "description": "The name of the list in which to insert the object. If this argument is set, the object gets inserted in a list owned by the parent and not as a child."
                    },
                    "onNameConflict": {
                        "type": "string",
                        "description": "The action to take if \"parent\" already has a child with the same name. Default value is \"fail\". Refer to \\ref waapi_create_objects_modes for more information.",
                        "enum": [ "rename", "replace", "fail", "merge" ]
                    },
                    "platform": {
                        "$ref": "#/definitions/platformArg",
                        "description": "The ID (GUID) or unique name of the platform used when setting properties via this command. Not specifying a platform sets the value for all linked platforms."
                    },
                    "autoAddToSourceControl": {
                        "type": "boolean",
                        "description": "Determines if Wwise automatically performs an Add or Checkout operation on the imported files with the source control. Defaults to false."
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the new object. Refer to \\ref wobjects_index for possible object types."
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the new object."
                    },
                    "notes": {
                        "type": "string",
                        "description": "The notes or comments of the new object."
                    },
                    "children": {
                        "$ref":"#/localDefinitions/children"
                    }                      
                },
                "patternProperties": {
                    "^@[:_a-zA-Z0-9]+$": {
                        "$ref": "#/definitions/propertyValue",
                        "description": "Sets the value of property \\@propertyName. Refer to \\ref wobjects_index for property names."
                    }
                },                
                "required": [ "type", "name", "parent" ],
                "additionalProperties": false
            },
            "resultSchema": {
                "type": "object",
                "properties": {
                    "id": {
                        "$ref": "#/definitions/guid",
                        "description": "The ID (GUID) of the newly created Object."
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the newly created Object."
                    },
                    "children": {
                        "type": "array",
                        "items": {
                            "$ref": "#",
                            "description": "An object created."
                        },
                        "description": "The children of objects created."
                    }
                }
            },
            "optionsSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "examples": [
                {
                    "title": "Creating a Sound object",
                    "description": "Creates a new Sound object called 'Boom' under the specified parent.",
                    "args": {
                        "parent": "{7A12D08F-B0D9-4403-9EFA-2E6338C197C1}",
                        "type": "Sound",
                        "name": "Boom"
                    },
                    "result": {
                        "id": "{66666666-7777-8888-9999-AAAAAAAAAAAA}",
                        "name": "Boom"
                    }
                },
                {
                    "title": "Creating a Virtual Folder",
                    "description": "Creates a new virtual folder called 'Guns' under the default work unit. If a folder with the same name already exists, it automatically finds a unique name.",
                    "args": {
                        "parent": "\\Actor-Mixer Hierarchy\\Default Work Unit",
                        "type": "Folder",
                        "name": "Guns",
                        "onNameConflict": "rename"
                    },
                    "result": {
                        "id": "{66666666-7777-8888-9999-AAAAAAAAAAAA}",
                        "name": "Guns"
                    }
                },
                {
                    "title": "Creating a Play Event on a Sound",
                    "description": "Creates an event called 'Play_SFX' under the virtual folder 'WAAPI', with Play action on the SFX sound object.",
                    "args": {
                        "parent": "\\Events\\Default Work Unit",
                        "type": "Folder",
                        "name": "WAAPI",
                        "onNameConflict": "merge",
                        "children": [
                            {
                                "type": "Event",
                                "name": "Play_SFX",
                                "children": [
                                    {
                                        "name": "",
                                        "type": "Action",
                                        "@ActionType": 1,
                                        "@Target": "\\Actor-Mixer Hierarchy\\Default Work Unit\\SFX"
                                    }
                                ]
                            }
                        ]
                    },
                    "result": {
                        "id": "{6114659F-9274-4031-B90E-F369568532E0}",
                        "name": "WAAPI",
                        "children": [
                            {
                                "id": "{F546017D-201A-49BD-8D4E-0A28F5DBB28D}",
                                "name": "Play_SFX",
                                "children": [
                                    {
                                        "id": "{400D0354-0FDB-48B4-B341-9DFA0B76078D}",
                                        "name": ""
                                    }
                                ]
                            }
                        ]
                    }
                },
                {
                    "title": "Creating a Random Container with two Sound objects",
                    "description": "Creates a Random Container called 'Boom' under the specified parent, with two Sound objects 'A' and 'B'.",
                    "args": {
                        "parent": "{7A12D08F-B0D9-4403-9EFA-2E6338C197C1}",
                        "type": "RandomSequenceContainer",
                        "name": "Boom",
                        "@RandomOrSequence": 1,
                        "children": [
                            {
                                "type": "Sound",
                                "name": "A"
                            },
                            {
                                "type": "Sound",
                                "name": "B"
                            }
                        ]
                    },
                    "result": {
                        "id": "{66666666-7777-8888-9999-AAAAAAAAAAAA}",
                        "name": "Boom",
                        "children": [
                            {
                                "id": "{46813545-2168-3547-8328-681AB678D6F5}",
                                "name": "A"
                            },
                            {
                                "id": "{68465134-2548-2377-3541-321354318ABD}",
                                "name": "B"
                            }

                        ]
                    }
                },
                {
                    "title": "Adding a Custom Cue to an existing Music Segment",
                    "description": "Creates a Custom Cue inside an existing Music Segment with the specified name and time in milliseconds.",
                    "args": {
                        "name":"My Music Cue",
                        "parent":"\\Interactive Music Hierarchy\\Default Work Unit\\My Segment",
                        "type":"MusicCue",
                        "list": "Cues",
                        "@TimeMs": 1200,
                        "@CueType": 2
                    },
                    "result": {
                        "id": "{1629938A-24F7-451F-B01F-49F448CED8FF}",
                        "name": "My Music Cue"
                    }
                }
            ]
        },
        {
            "id": "ak.wwise.core.object.move",
            "restrict": [ "userInterface", "commandLine" ],
            "seeAlso": [ "ak.wwise.core.object.copy", "ak.wwise.core.object.childAdded", "ak.wwise.core.object.childRemoved" ],
            "description": "Moves an object to the given parent. Returns the moved object.",
            "argsSchema": {
                "type": "object",
                "properties": {
                    "object": {
                        "$ref": "#/definitions/objectArg",
                        "description": "The ID (GUID), name, or path of the object to be moved."
                    },
                    "parent": {
                        "$ref": "#/definitions/objectArg",
                        "description": "The ID (GUID), name, or path of the object's new parent."
                    },
                    "onNameConflict": {
                        "type": "string",
                        "description": "The action to take if \"parent\" already has a child with the same name. Default value is \"fail\".",
                        "enum": [ "rename", "replace", "fail" ]
                    }
                },
                "required": [ "object", "parent" ],
                "additionalProperties": false
            },
            "resultSchema": {
                "$ref": "#/definitions/objectReturn",
                "description": "The moved object."
            },
            "optionsSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "examples": [
                {
                    "title": "Moving an object to a new parent",
                    "description": "Moves object \"id\" and makes it a child of \"parent\". The object fails if \"parent\" already contains a child with the same name.",
                    "args": {
                        "object": "{A076AA65-B71A-45BB-8841-5A20C52CE727}",
                        "parent": "{66666666-7777-8888-9999-AAAAAAAAAAAA}"
                    },
                    "result": {
                        "id": "{A076AA65-B71A-45BB-8841-5A20C52CE727}",
                        "name": "myObjectName",
                        "type": "Sound",
                        "path": "\\Actor-Mixer Hierarchy\\Default Work Unit\\myObjectName",
                        "shortId": 12345
                    }
                },
                {
                    "title": "Moving an object to a parent containing a child of the same name",
                    "description": "Moves object \"id\" and makes it a child of \"parent\".  The object is renamed if \"parent\" already contains a child with the same name.",
                    "args": {
                        "object": "{A076AA65-B71A-45BB-8841-5A20C52CE727}",
                        "parent": "{66666666-7777-8888-9999-AAAAAAAAAAAA}",
                        "onNameConflict": "rename"
                    },
                    "result": {
                        "id": "{A076AA65-B71A-45BB-8841-5A20C52CE727}",
                        "name": "new_object_name",
                        "type": "Sound",
                        "path": "\\Actor-Mixer Hierarchy\\Default Work Unit\\Sound1",
                        "shortId": 456678
                    }
                }
            ]
        },
        {
            "id": "ak.wwise.core.object.copy",
            "restrict": [ "userInterface", "commandLine" ],
            "seeAlso": [ "ak.wwise.core.object.move", "ak.wwise.core.object.childAdded", "ak.wwise.core.object.childRemoved" ],
            "description": "Copies an object to the given parent.",
            "argsSchema": {
                "type": "object",
                "properties": {
                    "object": {
                        "$ref": "#/definitions/objectArg",
                        "description": "The ID (GUID), name, or path of the object to be copied."
                    },
                    "parent": {
                        "$ref": "#/definitions/objectArg",
                        "description": "The ID (GUID), name, or path of the object's new parent."
                    },
                    "onNameConflict": {
                        "type": "string",
                        "description": "The action to take if \"parent\" already has a child with the same name. Default value is \"fail\".",
                        "enum": [ "rename", "replace", "fail" ]
                    }
                },
                "required": [ "object", "parent" ],
                "additionalProperties": false
            },
            "resultSchema": {
                "description": "The copied object.",
                "$ref": "#/definitions/objectReturn"
            },
            "optionsSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "examples": [
                {
                    "title": "Copying an object to the given parent",
                    "description": "Copies the object specified by the \"object\" ID and makes that copy a child of \"parent\". The object is renamed if \"parent\" already contains a child with the same name.",
                    "args": {
                        "object": "{A076AA65-B71A-45BB-8841-5A20C52CE727}",
                        "parent": "{66666666-7777-8888-9999-AAAAAAAAAAAA}",
                        "onNameConflict": "rename"
                    },
                    "result": {
                        "id": "{AAAAAAAA-BBBB-CCCC-DDDD-EEEEEEEEEEEE}",
                        "name": "new_object_name",
                        "type": "Sound",
                        "path": "\\Actor-Mixer Hierarchy\\Default Work Unit\\Sound1",
                        "shortId": 1234
                    }
                }
            ]
        },
        {
            "id": "ak.wwise.core.object.delete",
            "restrict": [ "userInterface", "commandLine" ],
            "seeAlso": [ "ak.wwise.core.object.postDeleted", "ak.wwise.core.object.preDeleted" ],
            "description": "Deletes the specified object.",
            "argsSchema": {
                "type": "object",
                "properties": {
                    "object": {
                        "$ref": "#/definitions/objectArg",
                        "description": "The ID (GUID), name, or path of the object to be deleted."
                    }
                },
                "required": [ "object" ],
                "additionalProperties": false
            },
            "resultSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "optionsSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "examples": [
                {
                    "title": "Deleting an object by GUID",
                    "description": "Deletes the object specified by GUID.",
                    "args": {
                        "object": "{A076AA65-B71A-45BB-8841-5A20C52CE727}"
                    },
                    "result": {
                    }
                },
                {
                    "title": "Deleting an object by path",
                    "description": "Deletes the MyTone object specified by its path.",
                    "args": {
                        "object": "\\Actor-Mixer Hierarchy\\Default Work Unit\\MyTone"
                    },
                    "result": {
                    }
                }
            ]
        },
        {
            "id": "ak.wwise.core.object.get",
            "restrict": [ "userInterface", "commandLine" ],
            "description": "Performs a query and returns the data, as specified in the options, for each object in the query result. The query can specify either a 'waql' argument or a 'from' argument with an optional 'transform' argument. Refer to \\ref waql_introduction or \\ref waapi_query for more information. Refer to \\ref waapi_query_return to learn about options.",
            "argsSchema": {
                "type": "object",
                "properties": {
                    "waql": {
                        "type": "string",
                        "description": "Specifies a query in the WAQL language. Refer to \\ref waql_introduction for more information."
                    },
                    "from": {
                        "description": "The query starting point. Note, this is deprecated. The WAQL argument should be used instead.",
                        "oneOf": [
                            {
                                "type": "object",
                                "description":"Specify an object with an id field.",
                                "properties": {
                                    "id": {
                                        "type": "array",
                                        "description": "An array of object IDs, either GUID or Short ID (uint32).",
                                        "items": {
                                            "description": "A GUID or Short ID (uint32).",
                                            "oneOf": [
                                                {
                                                    "$ref": "#/definitions/guid"
                                                },
                                                {
                                                    "$ref": "#/definitions/shortId"
                                                }
                                            ]
                                        }
                                    }
                                },
                                "required": [ "id" ],
                                "additionalProperties": false
                            },
                            {
                                "type": "object",
                                "description":"Specifies an object with a search field.",
                                "properties": {
                                    "search": {
                                        "type": "array",
                                        "description": "An array of text tokens used for searching the project.",
                                        "items": {
                                            "description": "A search token.",
                                            "type": "string"
                                        },
                                        "minItems": 1,
                                        "maxItems": 1
                                    }
                                },
                                "required": [ "search" ],
                                "additionalProperties": false
                            },
                            {
                                "type": "object",
                                "description":"Specifies an object with a name field.",
                                "properties": {
                                    "name": {
                                        "type": "array",
                                        "description": "An array of unique object qualified names.",
                                        "items": {
                                            "$ref": "#/definitions/uniqueQualifiedName"
                                        }
                                    }
                                },
                                "required": [ "name" ],
                                "additionalProperties": false
                            },
                            {
                                "type": "object",
                                "description":"Specifies an object with a path field.",
                                "properties": {
                                    "path": {
                                        "type": "array",
                                        "description": "An array of object paths.",
                                        "items": {
                                            "$ref": "#/definitions/objectPathArg"
                                        }
                                    }
                                },
                                "required": [ "path" ],
                                "additionalProperties": false
                            },
                            {
                                "type": "object",
                                "description":"Specify an object with an ofType field.",
                                "properties": {
                                    "ofType": {
                                        "type": "array",
                                        "description": "An array of object types.",
                                        "items": {
                                            "description": "An object type. Refer to \\ref wobjects_index for a list of types.",
                                            "type": "string"
                                        }
                                    }
                                },
                                "required": [ "ofType" ],
                                "additionalProperties": false
                            },
                            {
                                "type": "object",
                                "description":"Specifies an object with a query field.",
                                "properties": {
                                    "query": {
                                        "type": "array",
                                        "description": "An array of query object ID.",
                                        "items": {
                                            "$ref": "#/definitions/guid"
                                        },
                                        "minItems": 1,
                                        "maxItems": 1
                                    }
                                },
                                "required": [ "query" ],
                                "additionalProperties": false
                            }
                        ]
                    },
                    "transform": {
                        "type": "array",
                        "description": "Array of sequential transformations chained on the object list returned by \"from\".",
                        "items": {
                            "description": "An object transformation.",
                            "oneOf": [
                                {
                                    "type": "object",
                                    "description": "An select transformation.",
                                    "properties": {
                                        "select": {
                                            "type": "array",
                                            "description": "An array of only 1 selector.",
                                            "items": {
                                                "type": "string",
                                                "description": "A selector. The resulting objects depend on the selector specified.",
                                                "enum": [ 
                                                    "parent", 
                                                    "children", 
                                                    "descendants", 
                                                    "ancestors", 
                                                    "referencesTo" ]
                                            },
                                            "minItems": 1,
                                            "maxItems": 1
                                        }
                                    },
                                    "required": [ "select" ],
                                    "additionalProperties": false
                                },
                                {
                                    "type": "string",
                                    "description": "Unique object instances are returned, i.e. no duplicate object is returned.",
                                    "enum": [ "distinct" ]
                                },
                                {
                                    "type": "object",
                                    "description":"Specifies an object with a range field.",
                                    "properties": {
                                        "range": {
                                            "type": "array",
                                            "description":"An array of two numbers specifying the boundary indexes. Use this to only include a portion of the results. For example, this could be used to obtain the 100 first items of a search result: [0,100].",
                                            "items": {
                                                "description":"One of the two range limit numbers.",
                                                "type": "number"
                                            },
                                            "minItems": 2,
                                            "maxItems": 2
                                        }
                                    },
                                    "required": [ "range" ],
                                    "additionalProperties": false
                                },
                                {
                                    "type": "object",
                                    "description":"Specifies an object with an where field.",
                                    "properties": {
                                        "where": {
                                            "type": "array",
                                            "description":"An array of two tokens to filter results. The first token is the filter predicate. Refer \\ref waapi_query for the list of possible predicates. The second token is the parameter to the predicate.",
                                            "items": {
                                                "description":"A where statement.",
                                                "anyOf": [
                                                    { 
                                                        "type": "string",
                                                        "description": "A string token. The first token in the array is always the 'where' predicate name string. The second token is the parameter."

                                                    },
                                                    { 
                                                        "type": "array",
                                                        "description": "An array of strings. Refer \\ref waapi_query for more information.",
                                                        "items": {
                                                            "type": "string",
                                                            "description": "The parameter for the 'where' predicate. Refer \\ref waapi_query for more information."
                                                        }
                                                    }
                                                ]
                                            },
                                            "minItems": 1
                                        }
                                    },
                                    "required": [ "where" ],
                                    "additionalProperties": false
                                }
                            ]
                        }
                    }
                },
                "additionalProperties": false
            },
            "resultSchema": {
                "type": "object",
                "properties": {
                    "return": {
                        "type": "array",
                        "description": "An array of objects found, with properties matching what was supplied in the options.",
                        "items": {
                            "$ref": "#/definitions/objectReturn",
                            "description": "Wwise object"
                        }
                    }
                }
            },
            "optionsSchema": {
                "$ref": "#/definitions/objectReturnOptions",
                "description": "Specifies the return options for every object returned."
            },
            "examples": [
                {
                    "title": "Getting an object's name",
                    "description": "Returns the object's name property.",
                    "args": {
						"waql": "\"{24979032-B170-43E3-A2E4-469E0193E2C3}\""
                    },
                    "options": {
                        "return": [ "name" ]
                    },
                    "result": {
                        "return": [
                            {
                                "name": "MyObjectName"
                            }
                        ]
                    }
                },
                {
                    "title": "Getting the volume of an object",
                    "description": "Returns the volume of the Master Audio Bus.",
                    "args": {
						"waql": "\"\\Master-Mixer Hierarchy\\Default Work Unit\\Master Audio Bus\""
                    },
                    "options": {
                        "return": [ "volume" ]
                    },
                    "result": {
                        "return": [
                            {
                                "volume": 2.3
                            }
                        ]
                    }
                },                
                {
                    "title": "Getting the properties and references of an object",
                    "description": "Returns the voice volume and the output bus of an object.",
                    "args": {
						"waql": "\"{24979032-B170-43E3-A2E4-469E0193E2C3}\""
                    },
                    "options": {
                        "return": [ "Volume", "OutputBus" ]
                    },
                    "result": {
                        "return": [
                            {
                                "Volume": 2.3,
                                "OutputBus": {
                                    "id": "{1514A4D8-1DA6-412A-A17E-75CA0C2149F3}",
                                    "name": "Master Audio Bus"
								}
                            }
                        ]
                    }
                },
                {
                    "title": "Getting the output bus being used",
                    "description": "Returns the inherited output bus. It uses the override parent values to determine the source of override.",
                    "args": {
						"waql": "\"{24979032-B170-43E3-A2E4-469E0193E2C3}\""
                    },
                    "options": {
                        "return": [ "OutputBus" ]
                    },
                    "result": {
                        "return": [
                            {
                                "OutputBus": {
                                    "id": "{1514A4D8-1DA6-412A-A17E-75CA0C2149F3}",
                                    "name": "Master Audio Bus"
                            }
                            }
                        ]
                    }
                },
                {
                    "title": "Getting the descendant objects matching a filter",
                    "description": "From all the descendants in the Actor-Mixer Hierarchy, return the objects whose names start with 'My'. This uses the regular expression '^My'.",
                    "args": {
						"waql": "\"\\Actor-Mixer Hierarchy\" select descendants where name = /^My/"
                    },
                    "options": {
                        "return": [ "name" ]
                    },
                    "result": {
                        "return": [
                            {
                                "name": "MySound"
                            },
                            {
                                "name": "MyRandomContainer"
                            }
                        ]
                    }
                },
                {
                    "title": "Getting all platforms",
                    "description": "Retrieves the platform ids and names.",
                    "args": {
						"waql": "from type platform"
                    },
                    "options": {
                        "return": [
                            "id",
                            "name"
                        ]
                    },
                    "result": {
                        "return": [
                            {
                                "id": "{8237B143-A4F0-4B01-8C7B-FFC53A888271}",
                                "name": "Windows"
                            },
                            {
                                "id": "{508A9810-5C76-4CF7-B9BB-D6AE396F973B}",
                                "name": "iOS"
                            }
                        ]
                    }
                },
                {
                    "title": "Getting the project name, path, and dirty state",
                    "description": "Retrieves the project name, file path, and dirty state. Note that the project name is defined in the WPROJ MXL, and may not match the filename. For using WAAPI on Mac, please refer to \\ref waapi_path_on_mac .",
                    "args": {
						"waql": "\"\\\""
                    },
                    "options": {
                        "return": [
                            "name",
                            "filePath",
                            "workunitIsDirty"
                        ]
                    },
                    "result": {
                        "return": [
                            {
                                "filePath": "C:\\WwiseProjects\\MyProject\\MyProject.wproj",
                                "name": "MyProject",
                                "workunitIsDirty": true
                            }
                        ]
                    }
                },
                {
                    "title": "Searching objects by text",
                    "description": "Search objects with 'gun' in the name.",
                    "args": {
						"waql": "from search \"gun\""
                    },
                    "options": {
                        "return": [
                            "id",
                            "name"
                        ]
                    },
                    "result": {
                        "return": [
                            {
                                "id": "{8237B143-A4F0-4B01-8C7B-FFC53A888271}",
                                "name": "Big Gun"
                            },
                            {
                                "id": "{508A9810-5C76-4CF7-B9BB-D6AE396F973B}",
                                "name": "Small Gun"
                            }
                        ]
                    }
                },
                {
                    "title": "Getting all objects containing a sound object",
                    "description": "Retrieves the id of objects with at least one child being a sound object. Duplicates are filtered out using the \"distinct\" transform.",
                    "args": {
						"waql": "from type sound select parent distinct"
                    },
                    "options": {
                        "return": [
                            "id",
                            "name"
                        ]
                    },
                    "result": {
                        "return": [
                            {
                                "id": "{01181963-13CA-4946-B4C2-7A04BF727596}",
                                "name": "Folder0"
                            },
                            {
                                "id": "{F9912AA4-7835-4828-99E6-C327840EFE3D}",
                                "name": "Folder1"
							}
						]
                    }
                },
                {
                    "title": "Searching objects of a certain type",
                    "description": "Retrieves the id, name and notes of objects with \"Tone\" in their text properties and filters the results to retrieve only those of type \"Sound\". Refer to \\ref wobjects_index for the types available.",
                    "args": {
						"waql": "from search \"Tone\" where type = \"Sound\""
                    },
                    "options": {
                        "return": [
                            "id",
                            "name",
                            "notes"
                        ]
                    },
                    "result": {
                        "return": [
                            {
                                "id": "{24979032-B170-43E3-A2E4-469E0193E2C3}",
                                "name": "Tone SFX",
                                "notes": "MyNotes"
                            },
                            {
                                "id": "{A076AA65-B71A-45BB-8841-5A20C52CE727}",
                                "name": "MyTone",
                                "notes": ""
                            },
                            {
                                "id": "{72CB44BE-C699-4032-B615-EEFD0E707FFC}",
                                "name": "MyToneToMove",
                                "notes": ""
                            }
						]
                    }
                },
                {
                    "title": "Searching objects of a certain category",
                    "description": "Retrieves the id and name of objects with \"Tone\" in their text properties and filters the results to retrieve only those within the category \"Actor-Mixer Hierarchy\".",
                    "args": {
						"waql": "from search \"Tone\" where category = \"Actor-Mixer Hierarchy\""
                    },
                    "options": {
                        "return": [
                            "id",
                            "name",
                            "notes"
                        ]
                    },
                    "result": {
                        "return": [
                            {
                                "id": "{24979032-B170-43E3-A2E4-469E0193E2C3}",
                                "name": "Tone SFX"
                            },
                            {
                                "id": "{A076AA65-B71A-45BB-8841-5A20C52CE727}",
                                "name": "MyTone"
                            },
                            {
                                "id": "{72CB44BE-C699-4032-B615-EEFD0E707FFC}",
                                "name": "MyToneToMove"
                            }
                        ]
                    }
                }
			]
        },
        {
            "id": "ak.wwise.core.audio.import",
            "restrict": [ "userInterface", "commandLine" ],
            "seeAlso": [ "ak.wwise.core.audio.importTabDelimited", "ak.wwise.core.audio.imported", "ak.wwise.core.object.create" ],
            "description": "Creates Wwise objects and imports audio files. This function uses the same importation processor available through the Tab Delimited import in the Audio File Importer. The function returns an array of all objects created, replaced or re-used. Use the options to specify how the objects are returned. For more information, refer to \\ref waapi_import.",
            "argsSchema": {
                "type": "object",
                "properties": {
                    "importOperation": {
                        "$ref": "#/definitions/importOperationType"
                    },
                    "default": {
                        "type": "object",
                        "description": "Default values for each item in \"imports\". Use this object to avoid repeating common properties of every imported element.",
                        "properties": {
                            "importLanguage": {
                                "type": "string",
                                "description": "Imports the language for the audio file import (taken from the project's defined languages, found in the WPROJ file LanguageList)."
                            },
                            "importLocation": {
                                "$ref": "#/definitions/objectArg",
                                "description": "Object ID (GUID), name, or path used as root relative object paths."
                            },
                            "audioFile": {
                                "type": "string",
                                "description": "Path to media file to import. This path must be accessible from Wwise. For using WAAPI on Mac, please refer to \\ref waapi_path_on_mac ."
                            },
                            "audioFileBase64": {
                                "type": "string",
                                "description": "Base64 encoded WAV audio file data to import with its target file path relative to the Originals folder, separated by a vertical bar. E.g. 'MySound.wav|UklGRu...'.",
                                "pattern": "^(.+\\.wav\\|((?:[A-Za-z0-9\\+\\/]{4})*(?:[A-Za-z0-9\\+\\/]{2}==|[A-Za-z0-9\\+\\/]{3}=))+)$"
                            },
                            "originalsSubFolder": {
                                "type": "string",
                                "description": "Specifies the 'originals' sub-folder in which to place the imported audio file. This folder is relative to the 'originals' folder in which the file would normally be imported. Example: if importing an SFX, then the audio file is imported to the folder Originals\\\\SFX\\\\originalsPath."
                            },
                            "objectPath": {
                                "type": "string",
                                "description": "The path and name of the object(s) to be created. The path uses backslashes and can either be absolute or relative. Object types can be specified before the name. For example: \\verbatim \\\\Actor-Mixer Hierarchy\\\\Default Work Unit\\\\<Random Container>MyContainer\\\\<Sound>MySound. \\endverbatim Refer to \\ref wobjects_index for the available types."
                            },
                            "objectType": {
                                "type": "string",
                                "description": "Specifies the type of object to create when importing an audio file. This type can also be specified directly in the objectPath. Refer to \\ref wobjects_index for the available types."
                            },
                            "notes": {
                                "type": "string",
                                "description": "The \"Notes\" field of the created object."
                            },
                            "audioSourceNotes": {
                                "type": "string",
                                "description": "The \"Notes\" field of the created audio source object."
                            },
                            "switchAssignation": {
                                "type": "string",
                                "description": "Defines a Switch Group or State Group that is associated to a Switch Container, within the Actor-Mixer Hierarchy only. Also defines which Switch Container's child is assigned to which Switch or State from the associated group. Refer to Tab Delimited Import in the Wwise Help documentation for more information."
                            },
                            "event": {
                                "type": "string",
                                "description": "Defines the path and name of an Event to be created for the imported object. Refer to Tab Delimited Import in the Wwise Help documentation for more information."
                            },
                            "dialogueEvent": {
                                "type": "string",
                                "description": "Defines the path and name of a Dialogue Event to be created for the imported object. Refer to Tab Delimited Import in the Wwise Help documentation for more information."
                            }
                        },
                        "patternProperties": {
                            "^@[:_a-zA-Z0-9]+$": {
                                "description": "Specifies a Wwise object property and its value. Property names are prefixed with @. Refer to \\ref wobjects_index for the properties available. For example: \\@Volume:3",
                                "$ref": "#/definitions/propertyValue"
                            }
                        },
                        "additionalProperties": false
                    },
                    "imports": {
                        "type": "array",
                        "description": "Array of import commands.",
                        "items": {
                            "type": "object",
                            "description": "Import command. The members of this object are combined with those of \"default\", with this object's members having precedence. In addition to the listed properties, you can also set wobject properties and references using \\@Property. For example, you can set the volume by adding the \\@Volume property. References that have constraints from other references, such as a Switch Container's State/Switch, which is constrained to being a child of a State/Switch Group, should not be set because WAAPI cannot ensure that a reference is set in the required order.",
                            "properties": {
                                "importLanguage": { "$ref": "#/properties/default/properties/importLanguage" },
                                "importLocation": { "$ref": "#/properties/default/properties/importLocation" },
                                "audioFile": { "$ref": "#/properties/default/properties/audioFile" },
                                "audioFileBase64": { "$ref": "#/properties/default/properties/audioFileBase64" },
                                "originalsSubFolder": { "$ref": "#/properties/default/properties/originalsSubFolder" },
                                "objectPath": { "$ref": "#/properties/default/properties/objectPath" },
                                "objectType": { "$ref": "#/properties/default/properties/objectType" },
                                "notes": { "$ref": "#/properties/default/properties/notes" },
                                "audioSourceNotes": { "$ref": "#/properties/default/properties/audioSourceNotes" },
                                "switchAssignation": { "$ref": "#/properties/default/properties/switchAssignation" },
                                "event": { "$ref": "#/properties/default/properties/event" },
                                "dialogueEvent": { "$ref": "#/properties/default/properties/dialogueEvent" }
                            },
                            "patternProperties": {
                                "^@[:_a-zA-Z0-9]+$": {
                                    "description": "Specifies the value of the property. Refer to \\ref wobjects_index for the properties available.",
                                    "$ref": "#/definitions/propertyValue"
                                }
                            },
                            "additionalProperties": false,
                            "required": [ "objectPath" ]
                        }
                    },
                    "autoAddToSourceControl": {
                        "type": "boolean",
                        "description": "Determines if Wwise automatically performs an Add or Checkout operation on the imported files with the source control. Defaults to false."
                    }
                },
                "required": [ "imports" ],
                "additionalProperties": false
            },
            "resultSchema": {
                "type": "object",
                "properties": {
                    "objects":{
                        "type": "array",
                        "description": "Array of objects.",
                        "items": {
                            "$ref": "#/definitions/objectReturn",
                            "description": "Import command. The members of this object are combined with those of \"default\", with this object's members having precedence. In addition to the listed properties, you can also set wobject properties and references using \\@Property. For example, you can set the volume by adding the \\@Volume property. References that have constraints from other references, such as a Switch Container's State/Switch, which is constrained to being a child of a State/Switch Group, should not be set because WAAPI  cannot ensure that a reference is set in the required order."
                        }
                    }
                 },
                "additionalProperties": false
            },
            "optionsSchema": {
                "$ref": "#/definitions/objectReturnOptions",
                "description": "Specifies the return options for every object returned."
            },
            "examples": [
                {
                    "title": "Importing a new SFX and setting a value to a property",
                    "description": "Creates a new SFX under \"objectPath\", setting its volume attribute to 1.",
                    "args": {
                        "importOperation": "createNew",
                        "default": { },
                        "imports": [
                            {
                                "importLanguage": "SFX",
                                "@Volume": "1",
                                "objectPath": "\\Actor-Mixer Hierarchy\\Default Work Unit\\<Actor-Mixer>Test 0\\<Sequence Container>Container 0\\<Sound SFX>Sound 0"
                            }
                        ]
                    },
                    "result": {
                        "objects": [
                            {
                                "name": "Test 0",
                                "id": "{47EF0874-4C86-4DB6-A63B-4411A1EA766E}"
                            },
                            {
                                "name": "Container 0",
                                "id": "{E9AD319F-BCC3-43C0-9645-851B758A86FD}"
                            },
                            {
                                "name": "Sound 0",
                                "id": "{692C77EB-7542-4AE9-A56A-ADB9D4CE0008}"
                            }
                        ]
                    }
                },
                {
                    "title": "Importing audio files to SFXs WwiseObjects",
                    "description": "Imports files specified by \"audioFile\" into \"objectPath\"",
                    "args": {
                        "importOperation": "useExisting",
                        "default": {
                            "importLanguage": "SFX"
                        },
                        "imports": [
                            {
                                "audioFile": "C:\\audio0.wav",
                                "objectPath": "\\Actor-Mixer Hierarchy\\Default Work Unit\\<Sequence Container>Test 0\\<Sound SFX>My SFX 0"
                            },
                            {
                                "audioFile": "C:\\audio1.wav",
                                "objectPath": "\\Actor-Mixer Hierarchy\\Default Work Unit\\<Sequence Container>Test 0\\<Sound SFX>My SFX 1"
                            }
                        ]
                    },
                    "options":{ "return": ["id", "name", "path"] },
                    "result": {
                        "objects": [
                            {
                                "name": "Test 0",
                                "id": "{E81CAE71-7361-4F4B-BE36-817B8ADF26FD}",
                                "path": "\\Actor-Mixer Hierarchy\\Default Work Unit\\Test 0"
                            },
                            {
                                "name": "My SFX 0",
                                "id": "{F5F8A5B9-B5F4-4E82-AB9E-AA3BD997F98C}",
                                "path": "\\Actor-Mixer Hierarchy\\Default Work Unit\\Test 0\\My SFX 0"
                            },
                            {
                                "name": "My SFX 1",
                                "id": "{0366B1D9-740A-4980-B411-F1012BF73E69}",
                                "path": "\\Actor-Mixer Hierarchy\\Default Work Unit\\Test 0\\My SFX 1"
                            }
                        ]
                    }
                }
            ]
        },
        {
            "id": "ak.wwise.core.audio.importTabDelimited",
            "restrict": [ "userInterface", "commandLine" ],
            "seeAlso": [ "ak.wwise.core.audio.import", "ak.wwise.core.audio.imported" ],
            "description": "Scripted object creation and audio file import from a tab-delimited file.",
            "argsSchema": {
                "type": "object",
                "properties": {
                    "importLocation": {
                        "$ref": "#/definitions/objectArg",
                        "description": "Object ID (GUID), name, or path used as root relative object paths."
                    },
                    "importLanguage": {
                        "type": "string",
                        "description": "Imports language for audio file import (taken from the project's defined languages, found in the WPROJ file LanguageList)."
                    },
                    "importOperation": {
                        "type": "string",
                        "description": "Determines how import object creation is performed. For each object created:\n- createNew: creates a new object; the object is given the desired name if possible, otherwise a new unique name is used.\n- useExisting: uses the object if it exists, updating the specified properties; otherwise it creates a new object. This is the default value.\n- replaceExisting: creates a new object. If an existing object has the same name, the existing object is destroyed.",
                        "enum": [ "createNew", "useExisting", "replaceExisting" ]
                    },
                    "importFile": {
                        "type": "string",
                        "description": "Location of tab-delimited import file. For using WAAPI on Mac, please refer to \\ref waapi_path_on_mac ."
                    },
                    "autoAddToSourceControl": {
                        "type": "boolean",
                        "description": "Determines if Wwise automatically performs an Add or Checkout operation on the imported files with the source control. Defaults to false."
                    }
                },
                "required": [ "importLanguage", "importOperation", "importFile" ],
                "additionalProperties": false
            },
            "resultSchema": {
                "type": "object",
                "properties": {
                    "objects":{
                        "type": "array",
                        "description": "Array of objects.",
                        "items": {
                            "$ref": "#/definitions/objectReturn",
                            "description": "Objects that have been imported in the process of the tab delimited import. The objects have the properties specified in the return option, if applicable."
                        }
                     }
                 },
                "additionalProperties": false
            },
            "optionsSchema": {
                "$ref": "#/definitions/objectReturnOptions",
                "description": "Specifies the return options for every object returned.",
                "additionalProperties": false
            },
            "examples": [
                {
                    "title": "Importing an audio file",
                    "description": "Imports an audio file from a tab-delimited file",
                    "args": {
                        "importLocation": "{A076AA65-B71A-45BB-8841-5A20C52CE727}",
                        "importLanguage": "SFX",
                        "importOperation": "createNew",
                        "importFile": "C:\\MyWaves\\MyFolder\\myImportFile.txt"
                    },
                    "result": {
                        "objects": [
                            {
                                "id": "{02AC7121-AF3D-48C4-BEEA-25BD5EA4FB1E}",
                                "name": "My SFX 0"
                            },
                            {
                                "id": "{A014BD8D-E7DA-4401-A1F9-C36829A1B77C}",
                                "name": "My SFX 1"
                            }
                        ]
                    }
                }
            ]
        },
        {
            "id": "ak.wwise.core.remote.connect",
            "restrict": [ "userInterface" ],
            "seeAlso": [ "ak.wwise.core.remote.disconnect", "ak.wwise.core.remote.getAvailableConsoles", "ak.wwise.core.remote.getConnectionStatus" ],
            "description": "Connects the Wwise Authoring application to a Wwise Sound Engine running executable. The host must be running code with communication enabled. If only \"host\" is provided, Wwise connects to the first Sound Engine instance found. To distinguish between different instances, you can also provide the name of the application to connect to.",
            "argsSchema": {
                "type": "object",
                "properties": {
                    "host": {
                        "type": "string",
                        "description": "The host to connect to. The host can be an IPv4 address or a computer name. Use 127.0.0.1 to connect to localhost."

                    },
                    "appName": {
                        "type": "string",
                        "description": "The value in the Application Name column from the Remote Connection dialog in Wwise, or from from ak.wwise.core.remote.getAvailableConsoles. If you are running more than one Sound Engine instance, you can specify the name of the application to connect to."
                    },
                    "commandPort": {
                        "$ref": "#/definitions/uint16",
                        "description": "The command port. If you are running two or more Sound Engine instances that use the same application name, you can specify the command port and the notification port to distinguish between different applications sharing the same name. You don't need to use this if the application name is unique. When using this, you must also provide appName. If you specify a command port, you must also specify a notification port. You can obtain this information from ak.wwise.core.remote.getAvailableConsoles."
                    },
                    "notificationPort": {
                        "$ref": "#/definitions/uint16",
                        "description": "The notification port associated with the command port. If you specify a notification port, you must also specify a command port. You can obtain this information from ak.wwise.core.remote.getAvailableConsoles."
                    }
                },
                "required": [ "host" ],
                "additionalProperties": false
            },
            "resultSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "optionsSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "examples": [
                {
                    "title": "Connecting to Cube",
                    "description": "Connects to a game named Cube on the same computer.",
                    "args": {
                        "host": "127.0.0.1",
                        "appName": "Cube"
                    },
                    "result": { }
                }
            ]
        },
        {
            "id": "ak.wwise.core.remote.disconnect",
            "restrict": [ "userInterface" ],
            "seeAlso": [ "ak.wwise.core.remote.connect", "ak.wwise.core.remote.getAvailableConsoles", "ak.wwise.core.remote.getConnectionStatus" ],
            "description": "Disconnects the Wwise Authoring application from a connected Wwise Sound Engine running executable.",
            "argsSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "resultSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "optionsSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "examples": [
                {
                    "title": "Disconnecting from a game",
                    "description": "Disconnects from the currently connected game or process.",
                    "args": { },
                    "result": { }
                }
            ]
        },
        {
            "id": "ak.wwise.core.remote.getAvailableConsoles",
            "restrict": [ "userInterface" ],
            "seeAlso": [ "ak.wwise.core.remote.connect", "ak.wwise.core.remote.disconnect", "ak.wwise.core.remote.getConnectionStatus" ],
            "description": "Retrieves all consoles available for connecting Wwise Authoring to a Sound Engine instance.",
            "argsSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "resultSchema": {
                "type": "object",
                "properties": {
                    "consoles": {
                        "type": "array",
                        "description": "An array of remote consoles available.",
                        "items": {
                            "type": "object",
                            "description": "Describe the remote process.",
                            "properties": {
                                "name": {
                                    "type": "string",
                                    "description": "Name of the remote console as returned by the executable."
                                },
                                "platform": {
                                    "type": "string",
                                    "description": "Platform of the remote console as returned by the executable."
                                },
                                "customPlatform": {
                                    "type": "string",
                                    "description": "Platform, as defined in the project platforms of the remote console as returned by the executable."
                                },
                                "host": {
                                    "type": "string",
                                    "description": "The IPv4 of the connected host. This can also be a file path if Wwise is connected to a local file (profiler session). For using WAAPI on Mac, please refer to \\ref waapi_path_on_mac ."
                                },
                                "appName": {
                                    "type": "string",
                                    "description": "The name of the connected application as returned by the executable. Must be used when connecting to a specific Sound Engine instance."
                                },
                                "commandPort": {
                                    "$ref": "#/definitions/uint16",
                                    "description": "The command port. Can be used when connecting to a specific Sound Engine instance."
                                },
                                "notificationPort": {
                                    "$ref": "#/definitions/uint16",
                                    "description": "The notification port. Can be used when connecting to a specific Sound Engine instance."
                                }
                            },
                            "required": [ "name", "platform", "customPlatform", "host", "appName", "commandPort", "notificationPort" ]
                        }
                    }
                },
                "required": [ "consoles" ],
                "additionalProperties": false
            },
            "optionsSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "examples": [
                {
                    "title": "Getting available consoles",
                    "description": "Gets the available console for the connected sound engine.",
                    "args": {
                    },
                    "result": {
                        "consoles": [
                            {
                                "name": "MyConsole01",
                                "platform": "Android",
                                "customPlatform": "CustomAndroid",
                                "host": "127.0.0.1",
                                "appName": "MyApp",
                                "commandPort": 57610,
                                "notificationPort": 57611
                            },
                            {
                                "name": "MyConsole02",
                                "platform": "Windows",
                                "customPlatform": "CustomBuild01",
                                "host": "127.0.0.1",
                                "appName": "MyApp",
                                "commandPort": 57610,
                                "notificationPort": 57611
                            }
                        ]
                    }
                }
            ]
        },
        {
            "id": "ak.wwise.core.remote.getConnectionStatus",
            "restrict": [ "userInterface" ],
            "seeAlso": [ "ak.wwise.core.remote.connect", "ak.wwise.core.remote.getAvailableConsoles" ],
            "description": "Retrieves the connection status.",
            "argsSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "resultSchema": {
                "type": "object",
                "properties": {
                    "isConnected": {
                        "type": "boolean",
                        "description": "Indicates if the Wwise Authoring application is connected to a Wwise Sound Engine process."
                    },
                    "status": {
                        "type": "string",
                        "description": "The current connection status in text."
                    },
                    "console": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "description": "Name of the remote console as returned by the executable."
                            },
                            "platform": {
                                "type": "string",
                                "description": "Platform of the remote console as returned by the executable."
                            },
                            "customPlatform": {
                                "type": "string",
                                "description": "Platform, as defined in the project platforms of the remote console, as returned by the executable."
                            },
                            "host": {
                                "type": "string",
                                "description": "The IPv4 of the connected host. This can also be a file path if Wwise is connected to a local file (profiler session)."
                            },
                            "appName": {
                                "type": "string",
                                "description": "The name of the connected application as returned by the executable."
                            }
                        },
                        "required": [ "name", "platform", "customPlatform", "host", "appName" ],
                        "description": "Describe the remote process."
                    }
                },
                "required": [ "isConnected", "status" ],
                "additionalProperties": false
            },
            "optionsSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "examples": [
                {
                    "title": "Getting the connection status",
                    "description": "Retrieves the current connection status. In this example, Wwise is connected to the Integration Demo.",
                    "args": { },
                    "result": {
                        "isConnected": true,
                        "console": {
                            "name": "PC-USERNAME",
                            "platform": "Windows",
                            "host": "127.0.0.1",
                            "customPlatform": "Windows",
                            "appName": "Integration Demo"
                        },
                        "status": "Connected to PC-USERNAME (Windows - Local host) Integration Demo"
                    }
                }
            ]
        },
        {
            "id": "ak.wwise.core.undo.beginGroup",
            "restrict": [ "userInterface", "commandLine" ],
            "seeAlso": [ "ak.wwise.core.undo.endGroup", "ak.wwise.core.undo.cancelGroup" ],
            "description": "Begins an undo group. Make sure to call \\ref ak_wwise_core_undo_endgroup exactly once for every ak.wwise.core.beginUndoGroup call you make. Calls to ak.wwise.core.undo.beginGroup can be nested.",
            "argsSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "resultSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "optionsSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "examples": [
                {
                    "title": "Beginning an undo group",
                    "description": "Begins an undo group.",
                    "args": { },
                    "result": { }
                }
            ]
        },
        {
            "id": "ak.wwise.core.undo.cancelGroup",
            "restrict": [ "userInterface", "commandLine" ],
            "seeAlso": [ "ak.wwise.core.undo.endGroup", "ak.wwise.core.undo.beginGroup" ],
            "description": "Cancels the last undo group. Please note that this does not revert the operations made since the last \\ref ak_wwise_core_undo_begingroup call.",
            "argsSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "resultSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "optionsSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "examples": [
                {
                    "title": "Canceling an undo group",
                    "description": "Cancels an undo group.",
                    "args": { },
                    "result": { }
                }
            ]
        },
        {
            "id": "ak.wwise.core.undo.endGroup",
            "restrict": [ "userInterface", "commandLine" ],
            "seeAlso": [ "ak.wwise.core.undo.beginGroup", "ak.wwise.core.undo.cancelGroup" ],
            "description": "Ends the last undo group.",
            "argsSchema": {
                "type": "object",
                "properties": {
                    "displayName": {
                        "type": "string",
                        "description": "The name that is displayed in the history for this undo group."
                    }
                },
                "required": [ "displayName" ],
                "additionalProperties": false
            },
            "resultSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "optionsSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "examples": [
                {
                    "title": "Ending an undo group",
                    "description": "Ends an undo group.",
                    "args": {
                        "displayName": "My Undo Group"
                    },
                    "result": { }
                }
            ]
        },
        {
            "id": "ak.wwise.core.plugin.getList",
            "alias": "ak.wwise.core.object.getTypes"
        },
        {
            "id": "ak.wwise.core.object.getTypes",
            "restrict": [ "userInterface", "commandLine" ],
            "seeAlso": [ "ak.wwise.core.object.getPropertyInfo", "ak.wwise.core.object.getPropertyAndReferenceNames" ],
            "description": "Retrieves the list of all object types registered in Wwise's object model. This function returns the equivalent of \\ref wobjects_index .",
            "argsSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "resultSchema": {
                "type": "object",
                "properties": {
                    "return": {
                        "type": "array",
                        "description": "An array of all Wwise object types.",
                        "items": {
                            "type": "object",
                            "description": "A Wwise object type. Refer to \\ref wobjects_index .",
                            "properties": {
                                "classId": {
                                    "$ref": "#/definitions/uint32",
                                    "description": "The ID (class ID) of the object."
                                },
                                "name": {
                                    "type": "string",
                                    "description": "The name of the object."
                                },
                                "type": {
                                    "type": "string",
                                    "description": "The type of the object. Refer to \\ref wobjects_index for more information on the types available."
                                }
                            },
                            "additionalProperties": false
                        }
                    }
                },
                "additionalProperties": false
            },
            "optionsSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "examples": [
                {
                    "title": "Getting the list of all object types",
                    "description": "Retrieves the list of all object types.",
                    "args": { },
                    "result": {
                        "return": [
                            {
                                "classId": 16,
                                "name": "AudioSource",
                                "type": "WObject"
                            },
                            {
                                "classId": 65537,
                                "name": "PCM",
                                "type": "Conversion"
                            },
                            {
                                "classId": 8192003,
                                "name": "Wwise Flanger",
                                "type": "Effect"
                            }
                        ]
                    }
                }
            ]
        },
        {
            "id": "ak.wwise.core.plugin.getProperty",
            "alias": "ak.wwise.core.object.getPropertyInfo"
        },
        {
            "id": "ak.wwise.core.object.getPropertyInfo",
            "restrict": [ "userInterface", "commandLine" ],
            "seeAlso": [ "ak.wwise.core.object.getTypes", "ak.wwise.core.object.getPropertyAndReferenceNames" ],
            "description": "Retrieves information about an object property. Note that this function does not return the value of a property. To retrieve the value of a property, refer to \\ref ak_wwise_core_object_get and \\ref waapi_query_return.",
            "argsSchema": {
                "type": "object",
                "properties": {
                    "object": {
                        "$ref": "#/definitions/objectArg",
                        "description": "The ID (GUID), name, or path of the object to watch."
                    },
                    "classId": {
                        "$ref": "#/definitions/uint32",
                        "description": "The ID (class ID) of the object to retrieve the property from."
                    },
                    "property": {
                        "type": "string",
                        "description": "The name of the property to retrieve. For more information, refer to the property list of Wwise Objects listed in \\ref wobjects_index .",
                        "$ref":"#/definitions/propertyName"
                    }
                },
                "oneOf": [
                    { "required": [ "object", "property" ] },
                    { "required": [ "classId", "property" ] }
                ],
                "additionalProperties": false
            },
            "resultSchema": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the property."
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the property. For more information, refer to the property list of Wwise Objects found in \\ref wobjects_index ."
                    },
                    "audioEngineId": {
                        "$ref": "#/definitions/uint32",
                        "description": "The ID (audio engine ID) of the property."
                    },
                    "default": {
                        "$ref": "#/definitions/propertyValue",
                        "description": "The default value of the property."
                    },
                    "supports": {
                        "type": "object",
                        "description": "The features supported by the property.",
                        "properties": {
                            "rtpc": {
                                "type": "string",
                                "enum": [ "None", "Additive", "Exclusive", "Multiplicative" ],
                                "description": "The RTPC mode that is supported by the property."
                            },
                            "randomizer": {
                                "type": "boolean",
                                "description": "Indicates if the randomizer is supported by the property."
                            },
                            "unlink": {
                                "type": "boolean",
                                "description": "Indicates if unlink is supported by the property."
                            }
                        },
                        "additionalProperties": false
                    },
                    "display": {
                        "type": "object",
                        "description": "Displays information related to the property.",
                        "properties": {
                            "name": {
                                "type": "string",
                                "description": "The display name of the property."
                            },
                            "group": {
                                "type": "string",
                                "description": "The display group of the property."
                            },
                            "index": {
                                "type": "integer",
                                "description": "The display index of the property."
                            }
                        },
                        "additionalProperties": false
                    },
                    "dependencies": {
                        "type": "array",
                        "description": "List of dependencies on other properties with their related action and conditions.",
                        "items": {
                            "type": "object",
                            "description": "A dependency.",
                            "properties": {
                                "type":{
                                    "type":"string",
                                    "enum":["override", "property", "reference", "objectType"],
                                    "description":"Defines the type of dependency."
                                },
                                "property": {
                                    "type": "string",
                                    "description": "The name of the property to which the dependency is applied. For more information, refer to the property list of Wwise Objects listed in \\ref wobjects_index .",
                                    "$ref":"#/definitions/propertyName"
                                },
                                "action": {
                                    "type": "string",
                                    "description": "The name of the action that is performed when the conditions are met."
                                },
                                "context": {
                                    "type": "string",
                                    "description": "The name of the context in which the dependency is evaluated."
                                },
                                "conditions": {
                                    "type": "array",
                                    "description": "An array of conditions related to the dependency.",
                                    "items": {
                                        "type": "object",
                                        "description": "A dependency condition.",
                                        "properties": {
                                            "referenceIsSet":{
                                                "type": "boolean",
                                                "description":"Used for reference dependencies, defines if the target reference must be set or not."
                                            },
                                            "restriction":{
                                                "$ref": "#/properties/restriction",
                                                "description":"Used for property dependencies, defines the restriction on which the property must be set."
                                            }
                                        },
                                        "oneOf": [
                                            { "required": [ "referenceIsSet" ] },
                                            { "required": [ "restriction" ] }
                                        ],
                                        "additionalProperties": false
                                    }
                                }
                            },
                            "required": [ "type", "action", "context" ],
                            "additionalProperties": false
                        }
                    },
                    "restriction": {
                        "description": "Restricts the value of the property.",
                        "oneOf": [
                            {
                                "type":"object",
                                "description": "Empty object indicating that the property has no restriction.",
                                "additionalProperties": false
                            },
                            {
                                "type":"object",
                                "description": "Restrictions on the range of values supported by the property.",
                                "properties": {
                                    "type": {
                                        "type": "string",
                                        "enum": [ "range" ],
                                        "description": "The value restriction of the property."
                                    },
                                    "min":{
                                        "type": "number",
                                        "description": "The minimum value for the property."
                                    },
                                    "max":{
                                        "type": "number",
                                        "description": "The maximum value for the property."
                                    }
                                },
                                "additionalProperties": false,
                                "required":["type", "min", "max"]
                            },
                            {
                                "type":"object",
                                "description": "Restrictions on the reference object.",
                                "properties": {
                                    "type": {
                                        "type": "string",
                                        "enum": [ "reference" ],
                                        "description": "The object reference restrictions of the property."
                                    },
                                    "restrictions":{
                                        "type":"array",
                                        "description": "The list of object reference restrictions.",
                                        "items": {
                                            "oneOf": [
                                                {
                                                    "type": "object",
                                                    "description": "Restrictions on the object type that can be referenced.",
                                                    "properties": {
                                                        "type": {
                                                            "type": "array",
                                                            "description": "An array of possible types.",
                                                            "items": {
                                                                "type": "string",
                                                                "description": "Possible object type supported. See \\ref wobjects_index for the list of objects."
                                                            }
                                                        }
                                                    },
                                                    "additionalProperties": false,
                                                    "required":["type"]
                                                },
                                                {
                                                    "type": "object",
                                                    "description": "Restrictions on the object category from which objects can be referenced.",
                                                    "properties": {
                                                        "category": {
                                                            "type": "array",
                                                            "description": "An array of supported categories.",
                                                            "items": {
                                                                "type": "string",
                                                                "description": "Possible category supported."
                                                            }
                                                        }
                                                    },
                                                    "additionalProperties": false,
                                                    "required":["category"]
                                                },
                                                {
                                                    "type": "object",
                                                    "description": "Restrictions on the hierarchy position relative to a parent objects must occupy.",
                                                    "properties": {
                                                        "childOfReference": {
                                                            "type": "string",
                                                            "description": "Name of the reference."
                                                        }
                                                    },
                                                    "additionalProperties": false,
                                                    "required":["childOfReference"]
                                                },
                                                {
                                                    "type": "string",
                                                    "description": "Flag restrictions that, when present, are considered true. <b>notNull</b> indicates that the referenced object must exist; it cannot be null. <b>playable</b> indicates that the referenced object must be playable.",
                                                    "enum": ["notNull", "playable"]
                                                }
                                            ]
                                        }
                                    }
                                },
                                "additionalProperties": false,
                                "required":["type", "restrictions"]
                            },
                            {
                                "type":"object",
                                "description": "Restrictions of the property values.",
                                "properties": {
                                    "type": {
                                        "type": "string",
                                        "enum": [ "enum" ],
                                        "description": "The value restriction of the property."
                                    },
                                    "values":{
                                        "type":"array",
                                        "description": "Array of the possible enumerated values the property is restricted to.",
                                        "items": {
                                            "type": "object",
                                            "description": "An enumerated value with a name.",
                                            "properties": {
                                                "value":{
                                                    "oneOf":[
                                                            { 
                                                                "type":"number",
                                                                "description":"A numerical value."
                                                            },
                                                            { 
                                                                "type":"boolean",
                                                                "description":"A boolean value."
                                                            }
                                                        ]
                                                    ,
                                                    "description":"The enumerated value."
                                                },
                                                "displayName":{
                                                    "type":"string",
                                                    "description":"The name associated with the value."
                                                }
                                            },
                                            "additionalProperties": false
                                        }
                                    }
                                },
                                "additionalProperties": false,
                                "required":["type", "values"]
                            }
                        ]
                    },
                    "ui": {
                        "type": "object",
                        "description": "Information related to how the property is displayed.",
                        "properties": {
                            "value": {
                                "type": "object",
                                "description": "Specifies how the property value is handled by Wwise UI.",
                                "properties": {
                                    "decimals": {
                                        "type": "integer",
                                        "description": "The number of decimals displayed for the value."
                                    },
                                    "step": {
                                        "type": "number",
                                        "description": "The amount by which the display increments the value."
                                    },
                                    "fine": {
                                        "type": "number",
                                        "description": "The amount by which the display increments the value for fine adjustment."
                                    },
                                    "min": {
                                        "type": "number",
                                        "description": "The minimum display value."
                                    },
                                    "max": {
                                        "type": "number",
                                        "description": "The maximum display value."
                                    },
                                    "infinity": {
                                        "type": "number",
                                        "description": "The number used to represent infinity."
                                    }
                                },
                                "additionalProperties": false
                            },
                            "displayAs": {
                                "type": "object",
                                "description": "Describe how the property is displayed.",
                                "properties": {
                                    "lrMix": {
                                        "type": "boolean",
                                        "description": "Indicates if the property should be displayed as a left-right mix."
                                    },
                                    "musicNote": {
                                        "type": "boolean",
                                        "description": "Indicates if the property should be displayed as a music note (MIDI)."
                                    },
                                    "bitfield": {
                                        "type": "boolean",
                                        "description": "Indicates if the property should be displayed as a bitfield."
                                    }
                                },
                                "additionalProperties": false
                            },
                            "dataMeaning": {
                                "type": "string",
                                "enum": [ "None", "Frequency", "Decibels", "PitchCents" ],
                                "description": "The unit type of the property."
                            },
                            "autoUpdate": {
                                "type": "boolean",
                                "description": "Indicates if the value of the property is updated while moving the slider."
                            }
                        },
                        "additionalProperties": false
                    }
                },
                "additionalProperties": false
            },
            "optionsSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "examples": [
                {
                    "title": "Retrieving information about an object property",
                    "description": "Retrieves information about an object property.",
                    "args": {
                        "classId": 65552,
                        "property": "Volume"
                    },
                    "result": {
                        "name": "Volume",
                        "type": "Real64",
                        "default": 0,
                        "audioEngineId": 0,
                        "supports": {
                            "rtpc": "Additive",
                            "randomizer": true,
                            "unlink": true
                        },
                        "display": {
                            "name": "Voice Volume",
                            "index": 1816,
                            "group": "Audio/General Settings"
                        },
                        "dependencies": [],
                        "restriction": {
                            "type": "range",
                            "max": 200,
                            "min": -200
                        },
                        "ui": {
                            "value": {
                                "max": 12,
                                "min": -96,
                                "decimals": 1,
                                "step": 1,
                                "fine": 0.1,
                                "infinity": 0
                            },
                            "displayAs": {
                                "lrMix": false,
                                "musicNote": false,
                                "bitfield": false
                            },
                            "dataMeaning": "Decibels",
                            "autoUpdate": false
                        }
                    }
                }
            ]
        },
        {
            "id": "ak.wwise.core.plugin.getProperties",
            "alias": "ak.wwise.core.object.getPropertyAndReferenceNames"
        },
        {
            "id": "ak.wwise.core.object.getPropertyNames",
            "alias": "ak.wwise.core.object.getPropertyAndReferenceNames"
        },
        {
            "id": "ak.wwise.core.object.getPropertyAndReferenceNames",
            "restrict": [ "userInterface", "commandLine" ],
            "seeAlso": [ "ak.wwise.core.object.getPropertyInfo", "ak.wwise.core.object.getTypes" ],
            "description": "Retrieves the list of property and reference names for an object.",
            "argsSchema": {
                "type": "object",
                "properties": {
                    "object": {
                        "$ref": "#/definitions/objectArg",
                        "description": "The ID (GUID), name, or path of the object to watch."
                    },
                    "classId": {
                        "$ref": "#/definitions/uint32",
                        "description": "The ID (class ID) of the object to retrieve the property and reference names from."
                    }
                },
                "oneOf": [
                    { "required": [ "object" ] },
                    { "required": [ "classId" ] }
                ],
                "additionalProperties": false
            },
            "resultSchema": {
                "type": "object",
                "properties": {
                    "return": {
                        "type": "array",
                        "description": "An array of all properties and references for the specified object.",
                        "items": {
                            "type": "string",
                            "description": "The name of the property or reference."
                        }
                    }
                },
                "additionalProperties": false
            },
            "optionsSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "examples": [
                {
                    "title": "Retrieving the list of property and reference names of an object",
                    "description": "Retrieves the list of property and reference names of an object.",
                    "args": {
                        "classId": 8192003
                    },
                    "result": {
                        "return": [
                            "DelayTime",
                            "DryLevel",
                            "FeedForwardLevel",
                            "FeedBackLevel",
                            "EnableLFO",
                            "ModDepth",
                            "ModFrequency",
                            "ModWaveform",
                            "ModSmoothing",
                            "ModPWM",
                            "ModPhaseOffset",
                            "ModPhaseMode",
                            "ModPhaseSpread",
                            "WetDryMix",
                            "OutputLevel",
                            "ProcessCenter",
                            "ProcessLFE"
                        ]
                    }
                }
            ]
        },
        {
            "id": "ak.wwise.core.object.isPropertyEnabled",
            "restrict": [ "userInterface", "commandLine" ],
            "seeAlso": [ "ak.wwise.core.object.getPropertyInfo", "ak.wwise.core.object.get" ],
            "description": "Returns true if a property is enabled based on the values of the properties it depends on.",
            "argsSchema": {
                "type": "object",
                "properties": {
                    "object": {
                        "$ref": "#/definitions/objectArg",
                        "description": "The ID (GUID), name, or path of the object to check."
                    },
                    "platform": {
                        "$ref": "#/definitions/platformArg",
                        "description": "The ID (GUID) or unique name of the platform to link the reference. Set to null-guid for unlinked reference."
                    },
                    "property": {
                        "type": "string",
                        "description": "The name of the property. For more information, refer to the property list of Wwise Objects listed in \\ref wobjects_index .",
                        "$ref":"#/definitions/propertyName"
                    }
                },
                "required": [ "object", "platform", "property" ],
                "additionalProperties": false
            },
            "resultSchema": {
                "type": "object",
                "properties": {
                    "return": {
                        "type": "boolean",
                        "description": "Indicates if the property is enabled."
                    }
                },
                "additionalProperties": false
            },
            "optionsSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "examples": [
                {
                    "title": "Checking if a property is enabled",
                    "description": "Checks if a property is enabled.",
                    "args": {
                        "object": "{A076AA65-B71A-45BB-8841-5A20C52CE727}",
                        "platform": "{66666666-7777-8888-9999-AAAAAAAAAAAA}",
                        "property": "Volume"
                    },
                    "result": {
                        "return": true
                    }
                }
            ]
        },
        {
            "id": "ak.wwise.debug.enableAsserts",
            "restrict": [ "userInterface", "commandLine" ],
            "seeAlso": [ "ak.wwise.debug.assertFailed", "ak.wwise.debug.testAssert", "ak.wwise.debug.enableAutomationMode" ],
            "description": "Enables debug assertions. Every call to enableAsserts with 'false' increments the ref count. Calling with true decrements the ref count. This is only available with Debug builds.",
            "argsSchema": {
                "type": "object",
                "properties": {
                    "enable": {
                        "type": "boolean",
                        "description": "Indicates whether assertions should be enabled or disabled."
                    }
                },
                "required": [ "enable" ],
                "additionalProperties": false
            },
            "resultSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "optionsSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            }
        },
        {
            "id": "ak.wwise.debug.testAssert",
            "restrict": [ "userInterface", "commandLine" ],
            "seeAlso": [ "ak.wwise.debug.assertFailed" ],
            "description": "Private use only.",
            "argsSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "resultSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "optionsSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            }
        },
        {
            "id": "ak.wwise.debug.testCrash",
            "restrict": [ "userInterface", "commandLine" ],
            "description": "Private use only.",
            "argsSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "resultSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "optionsSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            }
        },
        {
            "id": "ak.wwise.debug.enableAutomationMode",
            "restrict": [ "userInterface", "commandLine" ],
            "seeAlso": [ "ak.wwise.debug.enableAsserts" ],
            "description": "Enables or disables the automation mode for Wwise. This reduces the potential interruptions caused by message boxes and dialogs. For instance, enabling the automation mode silently accepts: project migration, project load log, EULA acceptance, project licence display and generic message boxes.",
            "argsSchema": {
                "type": "object",
                "properties": {
                    "enable": {
                        "type": "boolean",
                        "description": "When set to true, the automation mode reduces the blocking of dialogs and popups. When set to false, it reverts to the normal mode."
                    }
                },
                "required": [ "enable" ],
                "additionalProperties": false
            },
            "resultSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "optionsSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            }
        },
        {
            "id": "ak.wwise.ui.captureScreen",
            "restrict": [ "userInterface", "commandLine" ],
            "description": "Captures a part of the Wwise UI relative to a view.",
            "argsSchema": {
                "type": "object",
                "properties": {
                    "viewName": {
                        "type": "string",
                        "description": "The name of the view as displayed in Wwise UI. By default, the whole UI is captured."
                    },
                    "viewSyncGroup": {
                        "type": "integer",
                        "description": "The sync group of the view. By default, the current sync group of the view is detected automatically."
                    },
                    "rect": {
                        "type": "object",
                        "description": "The capture region. By default, the whole view is captured.",
                        "properties": {
                            "x": {
                                "type": "integer",
                                "description": "The left position of the capture region (in pixels)."
                            },
                            "y": {
                                "type": "integer",
                                "description": "The top position of the capture region (in pixels)."
                            },
                            "width": {
                                "type": "integer",
                                "description": "The width of the capture region (in pixels)."
                            },
                            "height": {
                                "type": "integer",
                                "description": "The height of the capture region (in pixels)."
                            }
                        }
                    }
                },
                "additionalProperties": false
            },
            "resultSchema": {
                "type": "object",
                "properties": {
                    "contentType": {
                        "type": "string",
                        "description": "The underlying image data format (e.g. image/png)."
                    },
                    "contentBase64": {
                        "type": "string",
                        "description": "The encoded image data (Base64)."
                    }
                },
                "additionalProperties": false
            },
            "optionsSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            }
        },
        {
            "id": "ak.wwise.core.soundbank.getInclusions",
            "restrict": [ "userInterface", "commandLine" ],
            "seeAlso": [ "ak.wwise.core.soundbank.setInclusions" ],
            "description": "Retrieves a SoundBank's inclusion list.",
            "argsSchema": {
                "type": "object",
                "properties": {
                    "soundbank": {
                        "$ref": "#/definitions/objectArg",
                        "description": "The ID (GUID), name, or path of the SoundBank to add an inclusion to."
                    }

                },
                "required": [ "soundbank" ],
                "additionalProperties": false
            },
            "resultSchema": {
                "type": "object",
                "properties": {
                    "inclusions": {
                        "type": "array",
                        "description": "An array of inclusions.",
                        "items": {
                            "type": "object",
                            "description": "A SoundBank inclusion.",
                            "properties": {
                                "object": {
                                    "$ref": "#/definitions/guid",
                                    "description": "The ID (GUID) of the object to add to / remove from the SoundBank's inclusion list."
                                },
                                "filter": {
                                    "type": "array",
                                    "description": "Specifies what relations are being included.",
                                    "items": {
                                        "type": "string",
                                        "description": "Specifies one of the inclusion types.",
                                        "enum": [ "events", "structures", "media" ],
                                        "maxItems": 3
                                    }
                                }
                            },
                            "required": [ "object", "filter" ],
                            "additionalProperties": false
                        }
                    }
                },
                "additionalProperties": false
            },
            "optionsSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "examples": [
                {
                    "title": "Retrieving a SoundBank's inclusion list",
                    "description": "Gets a SoundBank's inclusion list.",
                    "args": {
                        "soundbank": "{A076AA65-B71A-45BB-8841-5A20C52CE727}"
                    },
                    "result": {
                        "inclusions": [
                            {
                                "object": "{1111AAAA-BBBB-CCCC-DDDD-EEEEEEEEEEEE}",
                                "filter": [ "events" ]
                            },
                            {
                                "object": "{2222AAAA-BBBB-CCCC-DDDD-EEEEEEEEEEEE}",
                                "filter": [ "structures", "media" ]
                            }
                        ]
                    }
                }
            ]
        },
        {
            "id": "ak.wwise.core.soundbank.setInclusions",
            "restrict": [ "userInterface", "commandLine" ],
            "seeAlso": [ "ak.wwise.core.soundbank.getInclusions" ],
            "description": "Modifies a SoundBank's inclusion list. The 'operation' argument determines how the 'inclusions' argument modifies the SoundBank's inclusion list; 'inclusions' may be added to / removed from / replace the SoundBank's inclusion list.",
            "argsSchema": {
                "type": "object",
                "properties": {
                    "soundbank": {
                        "$ref": "#/definitions/objectArg",
                        "description": "The ID (GUID), name, or path of the SoundBank to add an inclusion to."
                    },
                    "operation": {
                        "type": "string",
                        "enum": [ "add", "remove", "replace" ],
                        "description": "Determines how the 'inclusions' argument is used to modify the SoundBank's inclusion list; 'inclusions' may be used to add to / remove from / replace the SoundBank's inclusion list."
                    },
                    "inclusions": {
                        "type": "array",
                        "description": "An array of SoundBank inclusions.",
                        "items": {
                            "type": "object",
                            "description": "A SoundBank inclusion.",
                            "properties": {
                                "object": {
                                    "$ref": "#/definitions/objectArg",
                                    "description": "The ID (GUID), name, or path of the object to add to / remove from the SoundBank's inclusion list."
                                },
                                "filter": {
                                    "type": "array",
                                    "description": "An array of inclusion types defining what to include.",
                                    "items": {
                                        "type": "string",
                                        "description": "One of the possible inclusion types.",
                                        "enum": [ "events", "structures", "media" ],
                                        "maxItems": 3
                                    }
                                }
                            },
                            "required": [ "object", "filter" ],
                            "additionalProperties": false
                        }
                    }
                },
                "required": [ "soundbank", "inclusions", "operation" ],
                "additionalProperties": false
            },
            "resultSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "optionsSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "examples": [
                {
                    "title": "Adding an object to the inclusion list",
                    "description": "Adds an object to the SoundBank's inclusion list.  The 'media' filter is left out.",
                    "args": {
                        "soundbank": "{A076AA65-B71A-45BB-8841-5A20C52CE727}",
                        "operation": "add",
                        "inclusions": [
                            {
                                "object": "{AAAAAAAA-BBBB-CCCC-DDDD-EEEEEEEEEEEE}",
                                "filter": [ "events", "structures" ]
                            }
                        ]
                    },
                    "result": { }
                },
                {
                    "title": "Clearing the inclusion list",
                    "description": "The SoundBank's inclusion list is cleared via the 'replace' operation and an empty 'inclusions' list.",
                    "args": {
                        "soundbank": "{A076AA65-B71A-45BB-8841-5A20C52CE727}",
                        "operation": "replace",
                        "inclusions": [ ]
                    },
                    "result": { }
                }
            ]
        },
        {
            "id": "ak.wwise.core.soundbank.generate",
            "restrict": [ "userInterface", "commandLine" ],
            "seeAlso": [ "ak.wwise.core.soundbank.generated", "ak.wwise.core.soundbank.generationDone" ],
            "description": "Generate a list of SoundBank with import definition defined in the WAAPI request. If you choose to not write the SoundBanks to disk, subscribe to \\ref ak_wwise_core_soundbank_generated to get SoundBank structure info and the bank data as base64.",
            "argsSchema": {
                "type": "object",
                "properties": {
                    "soundbanks": {
                        "type": "array",
                        "description": "List of SoundBank to generate.",
                        "items": {
                            "type": "object",
                            "description": "SoundBank Info.",
                            "properties": {
                                "name": {
                                    "type": "string",
                                    "description": "The name of the SoundBank to generate, a temporary SoundBank will be created if the SoundBank doesn't exists."
                                },
                                "events": {
                                    "type": "array",
                                    "description": "List of events to include in this SoundBank. Not required if the bank already exists.",
                                    "items": {
                                        "$ref": "#/definitions/objectArg",
                                        "description": "The ID (GUID), name, or path of the event to include in the SoundBank."
                                    }
                                },
                                "auxBusses": {
                                    "type": "array",
                                    "description": "List of AuxBus to include in this SoundBank.",
                                    "items": {
                                        "$ref": "#/definitions/objectArg",
                                        "description": "The ID (GUID), name, or path of the Auxiliary Bus to include in the SoundBank."
                                    }
                                },
                                "inclusions": {
                                    "type": "array",
                                    "description": "List of inclusion type to use for this SoundBank. Not required if the bank already exists.",
                                    "items": {
                                        "type": "string",
                                        "enum": [ "event", "structure", "media" ],
                                        "maxItems": 3
                                    }
                                },
                                "rebuild": {
                                    "type": "boolean",
                                    "description": "Force rebuild of this particuliar SoundBank. Default value: false"
                                }
                            },
                            "required": [ "name" ]
                        }
                    },
                    "platforms": {
                        "type": "array",
                        "description": "List of platforms to generate. If you don't specify any platforms, all the platforms will be generated",
                        "items": {
                            "type": "string",
                            "description": "The ID (GUID) or the name of the platforms"
                        }
                    },
                    "languages": {
                        "type": "array",
                        "description": "List of languages to generate. If you don't specify any languages, all the languages will be generated.",
                        "items": {
                            "$ref": "#/definitions/languageArg",
                            "description": "The ID (GUID) or name of the language."
                        }
                    },
                    "skipLanguages": {
                        "type": "boolean",
                        "description": "By default, if you don't specify any languages all languages will be generated. If you set this parameter to true, no localized SoundBank will be generated."
                    },
                    "rebuildSoundBanks": {
                        "type": "boolean",
                        "description": "Will rebuild all SoundBanks if true. If you want to clear the converted media as well, use clearAudioFileCache parameter. Default value: false"
                    },
                    "clearAudioFileCache": {
                        "type": "boolean",
                        "description": "Deletes the content of the Wwise audio file cache folder prior to converting source files and generating SoundBanks, which ensures that all source files are reconverted. Note that the whole cache is cleared, for all platforms, regardless of the platforms arguments. Default value: false"
                    },
                    "writeToDisk": {
                        "type": "boolean",
                        "description": "Use the normal SoundBank generation process and write the sound bank and info file to disk. Default value: false"
                    },
                    "rebuildInitBank": {
                        "type": "boolean",
                        "description": "If you don't use rebuildSoundBanks, use this option to force a rebuild of the Init bank for each specified platform."
                    }
                },
                "additionalProperties": false
            },
            "resultSchema": {
                "type": "object",
                "properties": {},
                "additionalProperties": false
            },
            "optionsSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "examples": [
                {
                    "title": "Generating several existing SoundBanks without writing them to disk",
                    "description": "Generating SoundBanks already in project and have the bank data streamed via WAAPI. Refer to \\ref ak_wwise_core_soundbank_generated to learn how to retrieve the SoundBank data.",
                    "args": {
                        "soundbanks": [
                            {
                                "name": "SampleBank"
                            },
                            {
                                "name": "AnotherBank"
                            }
                        ],
                        "platforms": [ "Windows", "Linux" ],
                        "languages": [ "English(US)" ]
                    },
                    "result": {
                    }
                },
                {
                    "title": "Generating a new SoundBank by specifying inclusions",
                    "description": "Sample call that import a new SoundBank and then generate it, the SoundBank will not be saved in the project. Refer to \\ref ak_wwise_core_soundbank_generated to learn how to retrieve the SoundBank data.",
                    "args": {
                        "soundbanks": [
                            {
                                "name": "SampleBank",
                                "events": [
                                    "Event:Play_Footsteps",
                                    "Event:Play_Music"
                                ],
                                "auxBusses": [
                                    "AuxBus:Cavern"
                                ],
                                "inclusions": [ "event", "structure", "media" ]
                            }
                        ],
                        "platforms": [ "Windows", "Linux" ]
                    }
                },
                {
                    "title": "Generating a new SoundBank on disk by specifying inclusions",
                    "description": "Import a new SoundBank, generate it and then write it to disk in the SoundBank generation folder.",
                    "args": {
                        "soundbanks": [
                            {
                                "name": "SampleBank",
                                "events": [
                                    "Event:Play_Footsteps",
                                    "Event:Play_Music"
                                ],
                                "auxBusses": [
                                    "AuxBus:Cavern"
                                ],
                                "inclusions": [ "event", "structure", "media" ],
                                "rebuild": true
                            }
                        ],
                        "platforms": [ "Windows", "Linux" ],
                        "clearAudioFileCache": true,
                        "writeToDisk": true
                    }
                }
            ]
        },
        {
            "id": "ak.wwise.cli.migrate",
            "restrict": [ "commandLine" ],
            "description": "Migrate and save the project.",
            "argsSchema": {
                "type": "object",
                "properties": {
                    "project": {
                        "$ref": "#/definitions/projectCliArg"
                    },
                    "verbose": {
                        "$ref": "#/definitions/verboseCliArg"
                    },
                    "quiet": {
                        "$ref": "#/definitions/quietCliArg"
                    },
                    "abort-on-load-issues": {
                        "$ref": "#/definitions/abortOnLoadIssuesCliArg"
                    }
                },
                "required": [ "project" ],
                "additionalProperties": false
            },
            "resultSchema": {
                "type": "object",
                "properties": {
                    "result": {
                        "$ref": "#/definitions/processResultCli"
                    }
                },
                "required": [ "result" ],
                "additionalProperties": false
            },
            "optionsSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "examples": [
                {
                    "title": "Migrating a project to the most recent version",
                    "description": "Migrates a project with verbose logging.",
                    "args": {
                        "project": "C:\\MyProject\\MyProject.wproj",
                        "verbose": true
                    },
                    "result": {
                        "result": 0
                    }
                }
            ]
        },
        {
            "id": "ak.wwise.cli.tabDelimitedImport",
            "restrict": [ "commandLine" ],
            "description": "Imports a tab-delimited file to create and modify different object hierarchies. The project is automatically migrated (if required). It is also automatically saved following the import.",
            "argsSchema": {
                "type": "object",
                "properties": {
                    "project": {
                        "$ref": "#/definitions/projectCliArg"
                    },
                    "verbose": {
                        "$ref": "#/definitions/verboseCliArg"
                    },
                    "quiet": {
                        "$ref": "#/definitions/quietCliArg"
                    },
                    "continue-on-error": {
                        "$ref": "#/definitions/continueOnErrorCliArg"
                    },
                    "custom-global-closing-cmd": {
                        "$ref": "#/definitions/customGlobalClosingCmdCliArg"
                    },
                    "custom-global-opening-cmd": {
                        "$ref": "#/definitions/customGlobalOpeningCmdCliArg"
                    },
                    "audio-source-from-original": {
                        "$ref": "#/definitions/audioSourceFromOriginalCliArg"
                    },
                    "import-language": {
                        "$ref": "#/definitions/importLanguageCliArg"
                    },
                    "tab-delimited-operation": {
                        "$ref": "#/definitions/tabDelimitedOperationCli"
                    },
                    "tab-delimited-import-file": {
                        "type": "string",
                        "description": "The tab delimited file to import.",
                        "synopsis": ["FILE"]
                    }
                },
                "required": [ "project", "tab-delimited-import-file" ],
                "additionalProperties": false
            },
            "resultSchema": {
                "type": "object",
                "properties": {
                    "result": {
                        "$ref": "#/definitions/processResultCli"
                    }
                },
                "required": [ "result" ],
                "additionalProperties": false
            },
            "optionsSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "examples": [
                {
                    "title": "Importing a tab delimited file",
                    "description": "Imports a tab delimited file using default \"useExisting\" operation with quiet logging.",
                    "args": {
                        "project": "C:\\MyProject\\MyProject.wproj",
                        "tab-delimited-import-file": "C:\\fileToImport.tsv",
                        "quiet": true
                    },
                    "result": {
                        "result": 0
                    }
                }
            ]
        },
        {
            "id": "ak.wwise.cli.waapiServer",
            "restrict": [ "commandLine" ],
            "description": "Starts a command-line Wwise Authoring API server, to which client applications, using the Wwise Authoring API, can connect.",
            "argsSchema": {
                "type": "object",
                "properties": {
                    "project": {
                        "$ref": "#/definitions/projectCliArg"
                    },
                    "verbose": {
                        "$ref": "#/definitions/verboseCliArg"
                    },
                    "quiet": {
                        "$ref": "#/definitions/quietCliArg"
                    },
                    "allowed-addr": {
                        "type": "string",
                        "description": "Specifies the IP addresses that are allowed to connect to WAAPI. This option must be followed by a comma-separated list, for example: \"127.0.0.1\". Default value is \"127.0.0.1\".",
                        "synopsis": [
                            "--allowed-addr ADDRESS",
                            "--allowed-addr ADDRESS1,ADDRESS2,..."
                        ]
                    },
                    "allowed-origin": {
                        "type": "string",
                        "description": "Specifies the hosts that are allowed to connect to WAAPI. This option must be followed by a comma-separated list, for example: \"www.myhost.com,www.myhost2.com\". Validation is performed on the HTTP header Origin. Connections that do not provide the Origin header, as well as file-based connections (for example: file://), are always allowed.",
                        "synopsis": [
                            "--allowed-origin HOST",
                            "--allowed-origin HOST1,HOST2,..."
                        ]
                    },
                    "http-port": {
                        "type": "number",
                        "description": "Specifies the port number used by WAAPI when using HTTP POST. This option must be followed by a port number between 0 and 65,535. Using 0 prevents the server from running. Default value is 8090.",
                        "synopsis": ["--http-port PORT"],
                        "minimum": 0,
                        "maximum": 65535
                    },
                    "wamp-port": {
                        "type": "number",
                        "description": "Specifies the port number used by WAAPI when using WAMP. This option, which takes precedence over the User Preferences, must be followed by a port number between 0 and 65,535. Using 0 prevents the server from running. Default value is 8080.",
                        "synopsis": ["--wamp-port PORT"],
                        "minimum": 0,
                        "maximum": 65535
                    },
                    "http-max-clients": {
                        "type": "number",
                        "description": "Specifies the maximum number of concurrent WAAPI clients that can connect to the server when using HTTP POST. This option must be followed by a number between 0 and 100. Using 0 will prevent the server from running. Default value is 2.",
                        "synopsis": ["--http-max-clients NUM"],
                        "minimum": 0,
                        "maximum": 100
                    },
                    "wamp-max-clients": {
                        "type": "number",
                        "description": "Specifies the maximum number of concurrent WAAPI clients that can connect to the server when using WAMP. This option must be followed by a number between 0 and 100. Using 0 will prevent the server from running. Default value is 5.",
                        "synopsis": ["--wamp-max-clients NUM"],
                        "minimum": 0,
                        "maximum": 100
                    },
                    "allow-migration": {
                        "$ref": "#/definitions/allowMigrationCliArg"
                    }
                },
                "required": [ "project" ],
                "additionalProperties": false
            },
            "resultSchema": {
                "type": "object",
                "properties": {
                    "result": {
                        "$ref": "#/definitions/processResultCli"
                    }
                },
                "required": [ "result" ],
                "additionalProperties": false
            },
            "optionsSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "examples": [
                {
                    "title": "Running a WAAPI server",
                    "description": "Loads MyProject.wproj and runs a WAAPI server. Migrates the project first if necessary. Uses WAMP port 8085 and default HTTP port 8090.",
                    "args": {
                        "project": "C:\\MyProject\\MyProject.wproj",
                        "allow-migration": true,
                        "wamp-port": 8085
                    },
                    "result": {
                        "result": 0
                    }
                }
            ]
        },
        {
            "id": "ak.wwise.cli.createNewProject",
            "restrict": [ "commandLine" ],
            "description": "Creates a blank new project. The project must not already exist. If the folder does not exist, it is created.",
            "argsSchema": {
                "type": "object",
                "properties": {
                    "project": {
                        "$ref": "#/definitions/projectCliArg"
                    },
                    "verbose": {
                        "$ref": "#/definitions/verboseCliArg"
                    },
                    "quiet": {
                        "$ref": "#/definitions/quietCliArg"
                    },
                    "platform": {
                        "$ref": "#/definitions/stringOrArrayOfString",
                        "description": "Specifies which platform the new project supports. If not specified, Windows only is used.",
                        "synopsis": [
                            "--platform PLATFORM",
                            "--platform PLATFORM1 PLATFORM2 ...",
                            "--platform PLATFORM1 --platform PLATFORM2 ..."
                        ]
                    }
                },
                "required": [ "project" ],
                "additionalProperties": false
            },
            "resultSchema": {
                "type": "object",
                "properties": {
                    "result": {
                        "$ref": "#/definitions/processResultCli"
                    }
                },
                "required": [ "result" ],
                "additionalProperties": false
            },
            "optionsSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "examples": [
                {
                    "title": "Creating a new blank project",
                    "description": "Creates MyProject.wproj for platforms Windows and Linux.",
                    "args": {
                        "project": "C:\\MyProject\\MyProject.wproj",
                        "platform": ["Windows", "Linux"]
                    },
                    "result": {
                        "result": 0
                    }
                }            
            ]
        },
        {
            "id": "ak.wwise.cli.dumpObjects",
            "restrict": [ "commandLine" ],
            "description": "Dump the objects model of a project as a JSON file.",
            "visibility": "private",
            "argsSchema": {
                "type": "object",
                "properties": {
                    "project": {
                        "$ref": "#/definitions/projectCliArg"
                    },
                    "output": {
                        "type": "string",
                        "description": "Full path of the output file",
                        "synopsis": ["OUTPUT"]
                    },
                    "content": {
                        "type": "string",
                        "description": "Content to output from the object model. Default is 'name'.",
                        "enum": [ "name", "propertyset" ],
                        "synopsis": [
                            "--content name",
                            "--content propertyset"
                        ]
                    },
                    "no-session": {
                        "type": "boolean",
                        "description": "Specify to skip objects with session lifetime.",
                        "synopsis": ["--no-session"]
                    }
                },
                "required": [ "project", "output" ],
                "additionalProperties": false
            },
            "resultSchema": {
                "type": "object",
                "properties": {
                    "result": {
                        "$ref": "#/definitions/processResultCli"
                    }
                },
                "required": [ "result" ],
                "additionalProperties": false
            },
            "optionsSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "examples": []
        },
        {
            "id": "ak.wwise.cli.addNewPlatform",
            "restrict": [ "commandLine" ],
            "description": "Adds a new platform to a project. The platform must not already exist.",
            "visibility": "private",
            "argsSchema": {
                "type": "object",
                "properties": {
                    "project": {
                        "$ref": "#/definitions/projectCliArg"
                    },
                    "new-platform-base": {
                        "type": "string",
                        "description": "The base platform to create.",
                        "synopsis": ["--new-platform-base PLATFORM"]
                    },
                    "copy-from-platform": {
                        "type": "string",
                        "description": "The platform to copy settings from.",
                        "synopsis": ["--copy-from-platform PLATFORM"]
                    },
                    "new-platform-name": {
                        "type": "string",
                        "description": "The name of the new platform.",
                        "synopsis": ["--new-platform-name PLATFORM"]
                    }
                },
                "required": [ "project" ],
                "additionalProperties": false
            },
            "resultSchema": {
                "type": "object",
                "properties": {
                    "result": {
                        "$ref": "#/definitions/processResultCli"
                    }
                },
                "required": [ "result" ],
                "additionalProperties": false
            },
            "optionsSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "examples": [
                {
                    "title": "Adding a new platform to a project",
                    "description": "Adds a new Lumin platform named Lumin1 and copies settings from Android.",
                    "args": {
                        "project": "C:\\MyProject\\MyProject.wproj",
                        "new-platform-base": "Lumin",
                        "copy-from-platform": "Android",
                        "new-platform-name": "Lumin1"
                    },
                    "result": {
                        "result": 0
                    }
                }
            ]
        },
        {
            "id": "ak.wwise.cli.convertExternalSource",
            "restrict": [ "commandLine" ],
            "description": "External Sources conversion. Converts the external sources files for the specified project. Optionally, additional WSOURCES can be specified. External Sources are a special type of source that you can put in a Sound object in Wwise. It indicates that the real sound data will be provided at run time. While External Source conversion is also triggered by SoundBank generation, this operation can be used to process sources not contained in the Wwise Project. Please refer to Wwise SDK help page \"Integrating External Sources\".",
            "argsSchema": {
                "type": "object",
                "properties": {
                    "project": {
                        "$ref": "#/definitions/projectCliArg"
                    },
                    "verbose": {
                        "$ref": "#/definitions/verboseCliArg"
                    },
                    "quiet": {
                        "$ref": "#/definitions/quietCliArg"
                    },
                    "no-wwise-dat": {
						"$ref": "#/definitions/noWwiseDatArg"
                    },
                    "source-file": {
                        "$ref": "#/definitions/stringOrArrayOfString",
                        "description": "Specifies the WSOURCES file(s) to use. Those WSOURCES files are used for all platforms.",
                        "synopsis": [
                            "--source-file FILE",
                            "--source-file FILE1 FILE2 ..."
                        ]
                    },
                    "source-by-platform": {
                        "$ref": "#/definitions/platformMappingArray",
                        "description": "Specifies the WSOURCES file(s) to use by platform. When specified for a specific platform, it overrides the WSOURCES files from the project settings for this platform. For platforms for which this is not specified, the project settings are used. Specify the platform first, then the WSOURCES file(s) to use for this platform. Repeat the operation for each platform and WSOURCES file.",
                        "synopsis": [
                            "--source-by-platform PLATFORM FILE",
                            "--source-by-platform PLATFORM1 FILE1 --source-by-platform PLATFORM2 FILE2 ..."
                        ]
                    },
                    "platform": {
                        "$ref": "#/definitions/stringOrArrayOfString",
                        "description": "Specifies for which platform(s) the source(s) are converted using the project settings. This option must be followed by the platform identifiers.",
                        "synopsis": [
                            "--platform PLATFORM",
                            "--platform PLATFORM1 PLATFORM2 ...",
                            "--platform PLATFORM1 --platform PLATFORM2 ..."
                        ]
                    },
                    "output": {
                        "oneOf": [
                            {
                                "$ref": "#/definitions/platformMappingArray"
                            },
                            {
                                "type": "string"
                            }
                        ],
                        "description": "Allows you to follow this option with a platform and an output path to override the output path of this platform. Repeat this option for other platforms. If only a folder is specified, sources for all platforms is generated in that folder.",
                        "synopsis": [
                            "--output PLATFORM PATH",
                            "--output PLATFORM1 PATH1 --output PLATFORM2 PATH2 ...",
                            "--output PATH"
                        ]
                    }
                },
                "required": [ "project" ],
                "additionalProperties": false
            },
            "resultSchema": {
                "type": "object",
                "properties": {
                    "result": {
                        "$ref": "#/definitions/processResultCli"
                    }
                },
                "required": [ "result" ],
                "additionalProperties": false
            },
            "optionsSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "examples": [
                {
                    "title": "Converting external source",
                    "description": "Converts external sources of MyProject.wproj for all platforms using the current project settings.",
                    "args": {
                        "project": "C:\\MyProject\\MyProject.wproj"
                    },
                    "result": {
                        "result": 0
                    }
                }
            ]
        },
        {
            "id": "ak.wwise.cli.generateSoundbank",
            "restrict": [ "commandLine" ],
            "description": "SoundBank generation. SoundBank generation is performed according to the settings stored in the project. Custom user settings are ignored when SoundBank generation is launched from the command line. However, some of these settings can be overridden from the command line.",
            "argsSchema": {
                "type": "object",
                "properties": {
                    "project": {
                        "$ref": "#/definitions/projectCliArg"
                    },
                    "verbose": {
                        "$ref": "#/definitions/verboseCliArg"
                    },
                    "quiet": {
                        "$ref": "#/definitions/quietCliArg"
                    },
                    "no-wwise-dat": {
						"$ref": "#/definitions/noWwiseDatArg"
                    },
                    "license": {
                        "type": "string",
                        "description": "Sets the license to be used. The license is not saved in the project.",
                        "synopsis": ["--license LICENSE"]
                    },
                    "save": {
                        "type": "boolean",
                        "description": "Saves the project before generating SoundBanks. If a tab-delimited-import-file was provided, the imported content is saved as well. Saving the project implicitly migrates first, if required.",
                        "synopsis": ["--save"]
                    },
                    "platform": {
                        "$ref": "#/definitions/stringOrArrayOfString",
                        "description": "Specifies the platforms for which SoundBanks are generated. This option must be followed by the platform identifiers.",
                        "synopsis": [
                            "--platform PLATFORM",
                            "--platform PLATFORM1 PLATFORM2 ...",
                            "--platform PLATFORM1 --platform PLATFORM2 ..."
                        ]
                    },
                    "abort-on-load-issues": {
                        "$ref": "#/definitions/abortOnLoadIssuesCliArg"
                    },
                    "bank": {
                        "$ref": "#/definitions/stringOrArrayOfString",
                        "description":  "Specifies which SoundBanks are generated. This option must be followed by the name of the SoundBank to be generated. Multiple SoundBanks can be specified. If no SoundBank is specified, all SoundBanks are generated. Alternatively, a text file containing a list of SoundBank names can be specified, by specifying the full path to the text file, including the extension '.txt'.",
                        "synopsis": [
                            "--bank SOUNDBANK",
                            "--bank SOUNDBANK1 SOUNDBANK2 ...",
                            "--bank FILE"
                        ]
                    },
                    "cache": {
                        "type": "string",
                        "description": "Overrides the project's cache folder path and instead uses the (relative) path specified in the command.",
                        "synopsis": ["--cache PATH"]
                    },
                    "clear-audio-file-cache": {
                        "type": "boolean",
                        "description": "Deletes the content of the Wwise audio file cache folder prior to converting source files and generating SoundBanks, which ensures that all source files are reconverted. Note that the whole cache is cleared, for all platforms, regardless of the --platform option.",
                        "synopsis": ["--clear-audio-file-cache"]
                    },
                    "continue-on-error": {
                        "$ref": "#/definitions/continueOnErrorCliArg"
                    },
                    "custom-global-closing-cmd": {
                        "$ref": "#/definitions/customGlobalClosingCmdCliArg"
                    },
                    "custom-global-opening-cmd": {
                        "$ref": "#/definitions/customGlobalOpeningCmdCliArg"
                    },
                    "custom-post-gen-cmd": {
                        "$ref": "#/definitions/platformMappingArray",
                        "description": "Overrides the custom post-generation step command line that was defined for this platform in Wwise. This option must be followed by the platform identifier (listed above), followed again by the new command line (use quotes if there are spaces). To override the custom post-generation step command line of another platform, repeat the option --custom-post-gen-cmd followed by the other platform's identifier and its new command line. An empty string (\"\") specified for the command-line means no post-generation step is executed.",
                        "synopsis": [
                            "--custom-post-gen-cmd PLATFORM CMD",
                            "--custom-post-gen-cmd PLATFORM1 CMD1 --custom-post-gen-cmd PLATFORM2 CMD2 ..."
                        ]
                    },
                    "custom-pre-gen-cmd": {
                        "$ref": "#/definitions/platformMappingArray",
                        "description": "Overrides the custom pre-generation step command line that was defined for this platform in Wwise. This option must be followed by the platform identifier (listed above), followed again by the new command line (use quotes if there are spaces). To override the custom pre-generation step command line of another platform, repeat the option --custom-pre-gen-cmd followed by the other platform's identifier and its new command line. An empty string (\"\") specified for the command-line means no pre-generation step is executed.",
                        "synopsis": [
                            "--custom-pre-gen-cmd PLATFORM CMD",
                            "--custom-pre-gen-cmd PLATFORM1 CMD1 --custom-pre-gen-cmd PLATFORM2 CMD2 ..."
                        ]
                    },
                    "header-file": {
                        "type": "boolean",
                        "description": "Generates the header file Wwise_IDs.h, even if this option is not specified in the project settings.",
                        "synopsis": ["--header-file"]
                    },
                    "header-file-path": {
                        "type": "string",
                        "description": "Overrides the header file path specified in the project settings. This option must be followed by the path (absolute or relative) in which the header file (Wwise_IDs.h) will be written. This is only effective if the header file's creation is required.",
                        "synopsis": ["--header-file-path"]
                    },
                    "readable-soundbanks": {
                        "type": "boolean",
                        "description": "Generates readable SoundBanks (.rbnk), even if this option is not specified in the project settings.",
                        "synopsis": ["--readable-soundbanks"]
                    },
                    "import-definition-file": {
                        "$ref": "#/definitions/stringOrArrayOfString",
                        "description": "Imports a SoundBank definition file. This option must be followed by the full path of the bank definition file to be imported. Multiple files can be specified. If the option --save is not specified, the changes made to the project as a result of the imported definition file do not persist.",
                        "synopsis": [
                            "--import-definition-file FILE",
                            "--import-definition-file FILE1 FILE2 ...",
                            "--import-definition-file FILE1 --import-definition-file FILE2 ..."
                        ]
                    },
                    "language": {
                        "$ref": "#/definitions/stringOrArrayOfString",
                        "description": "Specifies the languages for which the SoundBanks are generated. This option must be followed by a language identifier defined in the project. Each specified language must be prefixed with this option.",
                        "synopsis": [
                            "--language LANGUAGE",
                            "--language LANGUAGE1 --language LANGUAGE2 ..."
                        ]
                    },
                    "skip-languages": {
                        "type": "boolean",
                        "description": "Will not generate any localized SoundBank in the project.",
                        "synopsis": [
                            "--skip-languages"
                        ]
                    },
                    "use-stable-guid": {
                        "type": "boolean",
                        "description": "Give the SoundBank a stable GUID accross multiple builds if you don't want to save the project.",
                        "synopsis": [
                            "--use-stable-guid"
                        ]
                    },
                    "no-decode": {
                        "type": "boolean",
                        "description": "Avoids generating DECODED files in the .cache folder, which saves CPU and disk space for your Wwise project. It also reduces the SoundBank generation time. Warning: If you do not generate the DECODED files, playing back these sounds in Wwise Authoring could result in an outdated playback or no playback at all. Clearing the file cache is recommended after using this option.",
                        "synopsis": ["--no-decode"]
                    },
                    "soundbank-path": {
                        "$ref": "#/definitions/platformMappingArray",
                        "description": "Overrides the SoundBank path specified for this platform. This option must be followed by the platform identifier (listed above), followed again by the new path (absolute or relative, use quotes if there are spaces). To override the path of another platform, repeat the option --soundbank-path followed by the other platform's specifier and its new path.",
                        "synopsis": [
                            "--soundbank-path PLATFORM PATH",
                            "--soundbank-path PLATFORM1 PATH1 --soundbank-path PLATFORM2 PATH2 ..."
                        ]
                    },
                    "audio-source-from-original": {
                        "$ref": "#/definitions/audioSourceFromOriginalCliArg"
                    },
                    "import-language": {
                        "$ref": "#/definitions/importLanguageCliArg"
                    },
                    "tab-delimited-operation": {
                        "$ref": "#/definitions/tabDelimitedOperationCli"
                    },
                    "tab-delimited-import-file": {
                        "$ref": "#/definitions/stringOrArrayOfString",
                        "description": "The tab delimited file to import. Multiple files to import can be specified after this option.",
                        "synopsis": [
                            "--tab-delimited-import-file FILE",
                            "--tab-delimited-import-file FILE1 FILE2 ...",
                            "--tab-delimited-import-file FILE1 --tab-delimited-import-file FILE2 ..."
                        ]
                    }
                },
                "required": [ "project" ],
                "additionalProperties": false
            },
            "resultSchema": {
                "type": "object",
                "properties": {
                    "result": {
                        "$ref": "#/definitions/processResultCli", 
                        "description": "The process exit code of SoundBank generation. Although your SoundBanks may generate properly with warnings, it is strongly recommended that you consider these warnings as errors. For example, WwiseConsole.exe returns an error code when a source file is missing. Although a missing source file does not prevent your SoundBanks from being generated, the resulting SoundBanks may potentially be incomplete. You can change the severity of most messages encountered during the SoundBank Generation by going to Project Settings > Logs, in Wwise. Changing the severity of the messages impacts the return codes."
                    }
                },
                "required": [ "result" ],
                "additionalProperties": false
            },
            "optionsSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "examples": [
                {
                    "title": "Generating all the SoundBanks",
                    "description": "Generates all the SoundBanks for MyProject.wproj, for the Windows and Linux platforms, using the English(US) language.",
                    "args": {
                        "project": "C:\\MyProject\\MyProject.wproj",
                        "platform": ["Windows", "Linux"],
                        "language": "English(US)"
                    },
                    "result": {
                        "result": 0
                    }
                }
            ]
        },
        {
            "id": "ak.wwise.cli.moveMediaIdsToSingleFile",
            "restrict": [ "userInterface", "commandLine" ],
            "description": "Moves the project's media IDs from its work units (.wwu) to a single file, <project-name>.mediaid.  This command will force a save of all the project's work units.",
            "argsSchema": {
                "type": "object",
                "properties": {
                    "project": {
                        "$ref": "#/definitions/projectCliArg"
                    }
                },
                "required": [ "project" ],
                "additionalProperties": false
            },
            "resultSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "optionsSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "examples": [
                {
                    "title": "Moving a project's media IDs out of work units",
                    "description": "Moving a project's media IDs from its work units to a single xml file, <project-name>.mediaid.",
                    "args": {
                        "project": "C:\\MyProject\\MyProject.wproj"
                    },
                    "result": { }
                }
            ]
        },
        {
            "id": "ak.wwise.cli.moveMediaIdsToWorkUnits",
            "restrict": [ "userInterface", "commandLine" ],
            "description": "Moves the project's media IDs from a single xml file <project-name>.mediaid to its work units (.wwu).  This command will force a save of all the project's work units.",
            "argsSchema": {
                "type": "object",
                "properties": {
                    "project": {
                        "$ref": "#/definitions/projectCliArg"
                    }
                },
                "required": [ "project" ],
                "additionalProperties": false
            },
            "resultSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "optionsSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "examples": [
                {
                    "title": "Moving a project's media IDs into its work units",
                    "description": "Moving a project's file IDs from a single file <project-name>.mediaid to its work units.",
                    "args": {
                        "project": "C:\\MyProject\\MyProject.wproj"
                    },
                    "result": { }
                }
            ]
        },
        {
            "id": "ak.wwise.cli.updateMediaIdsInSingleFile",
            "restrict": [ "userInterface", "commandLine" ],
            "description": "Loads the project and updates the contents of <project-name>.mediaid, if it exists.",
            "argsSchema": {
                "type": "object",
                "properties": {
                    "project": {
                        "$ref": "#/definitions/projectCliArg"
                    }
                },
                "required": [ "project" ],
                "additionalProperties": false
            },
            "resultSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "optionsSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "examples": [
                {
                    "title": "Updating the contents of <project-name>.mediaid",
                    "description": "Loads the project and updates the contents of <project-name>.mediaid, if it exists.",
                    "args": {
                        "project": "C:\\MyProject\\MyProject.wproj"                        
                    },
                    "result": { }
                }
            ]
        },
        {
            "id": "ak.wwise.core.log.get",
            "restrict": [ "userInterface", "commandLine" ],
            "seeAlso": [ "ak.wwise.core.log.itemAdded" ],
            "description": "Retrieves the latest log for a specific channel. Refer to \\ref ak_wwise_core_log_itemadded to be notified when a item is added to the log.",
            "argsSchema": {
                "type": "object",
                "properties": {
                    "channel":{
                        "$ref":"#/definitions/logCentralChannel",
                        "description": "The log channel."
                    }
                },
                "required": ["channel"],
                "additionalProperties": false
            },
            "resultSchema": {
                "type": "object",
                "properties": {
                    "items":{
                        "type":"array",
                        "items":{
                            "$ref":"#/definitions/logCentralItem"
                        },
                        "description": "The entries of the log."
                    }
                },
                "required": [ "items" ],
                "additionalProperties": false
            },
            "optionsSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "examples": [
                {
                    "title": "Retrieving the SoundBank log",
                    "description": "Uses the channel 'soundbankGenerate' to retrieve the latest SoundBank generation log.",
                    "args": {
                        "channel": "soundbankGenerate"
                    },
                    "result": {
                        "items":[
                            {
                                "severity": "Warning",
                                "time": 1523563779,
                                "messageId": "ParamControlIntegrityIssue",
                                "message": "RTPC : object New Audio Bus, property PositioningType cannot be resolved; the RTPC is ignored.",
                                "platform": {"id":"{F546017D-201A-49BD-8D4E-0A28F5DBB28D}","name":"Windows"},
                                "parameters": ["Init"]
                            },
                            {
                                "severity": "Message",
                                "time": 1523563779,
                                "messageId": "",
                                "message": "2 message(s), 2 warning(s), 0 error(s), 0 fatal error(s)"
                            }
                        ]
                    }
                }
            ]
        },

        {
            "id": "ak.wwise.core.transport.create",
            "restrict": [ "userInterface", "commandLine" ],
            "seeAlso" : ["ak.wwise.core.transport.destroy", "ak.wwise.core.transport.executeAction", "ak.wwise.core.transport.getList" ],
            "description": "Creates a transport object for the given Wwise object. The return transport object can be used to play, stop, pause and resume the Wwise object via the other transport functions.",
            "argsSchema": {
                "type": "object",
                "properties": {
                    "object": {
                        "$ref": "#/definitions/objectArg",
                        "description": "The ID (GUID), name, or path of the object to control via the transport object."
                    },
                    "gameObject": {
                        "$ref": "#/definitions/gameObject",
                        "description": "The game object to use for playback."
                    }
                },
                "required": [ "object" ],
                "additionalProperties": false
            },
            "resultSchema": {
                "type": "object",
                "properties": {
                    "transport": {
                        "$ref": "#/definitions/uint32",
                        "description": "Transport object ID to be used with all other ak.wwise.core.transport functions."
                    }
                },
                "additionalProperties": false
            },
            "optionsSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "examples": [
                {
                    "title": "Creating a transport object",
                    "description": "Creates a transport object for a given Wwise object.",
                    "args": {
                        "object": "{A076AA65-B71A-45BB-8841-5A20C52CE727}"
                    },
                    "result": {
                        "transport": 1234
                    }
                }
            ]
        },
        {
            "id": "ak.wwise.core.transport.destroy",
            "restrict": [ "userInterface", "commandLine" ],
            "seeAlso": [ "ak.wwise.core.transport.create", "ak.wwise.core.transport.getList" ],
            "description": "Destroys the given transport object.",
            "argsSchema": {
                "type": "object",
                "properties": {
                    "transport": {
                        "$ref": "#/definitions/uint32",
                        "description": "The transport object ID to be used with all other ak.wwise.core.transport functions."
                    }
                },
                "required": [ "transport" ],
                "additionalProperties": false
            },
            "resultSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "optionsSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "examples": [
                {
                    "title": "Destroying a transport object",
                    "description": "Destroys the given transport object.",
                    "args": {
                        "transport": 1234
                    },
                    "result": { }
                }
            ]
        },
        {
            "id": "ak.wwise.core.transport.getState",
            "restrict": [ "userInterface", "commandLine" ],
            "seeAlso": [ "ak.wwise.core.transport.create", "ak.wwise.core.transport.executeAction" ],
            "description": "Gets the state of the given transport object.",
            "argsSchema": {
                "type": "object",
                "properties": {
                    "transport": {
                        "$ref": "#/definitions/uint32",
                        "description": "The transport object ID to be used with all other ak.wwise.core.transport functions."
                    }
                },
                "required": [ "transport" ],
                "additionalProperties": false
            },
            "resultSchema": {
                "type": "object",
                "properties": {
                    "state": {
                        "type": "string",
                        "description": "The state of the transport object.",
                        "enum": [ "playing", "stopped", "paused" ]
                    }
                },
                "required": [ "state" ],
                "additionalProperties": false
            },
            "optionsSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "examples": [
                {
                    "title": "Getting a transport object's State",
                    "description": "Gets the State of the given transport object.",
                    "args": {
                        "transport": 1234
                    },
                    "result": {
                        "state": "playing"
                    }
                }
            ]
        },
        {
            "id": "ak.wwise.core.transport.getList",
            "restrict": [ "userInterface", "commandLine" ],
            "seeAlso": [ "ak.wwise.core.transport.create" ],
            "description": "Returns the list of transport objects.",
            "argsSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "resultSchema": {
                "type": "object",
                "properties": {
                    "list": {
                        "type": "array",
                        "description": "An array of transport object.",
                        "items": {
                            "type": "object",
                            "description": "A transport object.",
                            "properties": {
                                "object": {
                                    "$ref": "#/definitions/guid",
                                    "description": "The ID (GUID) of the object controlled by the transport object."
                                },
                                "gameObject": {
                                    "$ref": "#/definitions/gameObject",
                                    "description": "The game object used by the transport object."
                                },
                                "transport": {
                                    "$ref": "#/definitions/uint32",
                                    "description": "Transport object ID."
                                }
                            }
                        }
                    }
                }
            },
            "optionsSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "examples": [
                {
                    "title": "Retrieving the list of transport objects",
                    "description": "Retrieves the list of transport objects.",
                    "args": { },
                    "result": {
                        "list": [
                            {
                                "object": "{A076AA65-B71A-45BB-8841-5A20C52CE727}",
                                "gameObject": 1234,
                                "transport": 5
                            },
                            {
                                "object": "{AAAAAAAA-BBBB-CCCC-DDDD-EEEEEEEEEEEE}",
                                "gameObject": 6789,
                                "transport": 12
                            }
                        ]
                    }
                }
            ]
        },
        {
            "id": "ak.wwise.core.transport.executeAction",
            "restrict": [ "userInterface", "commandLine" ],
            "seeAlso": [ "ak.wwise.core.transport.create", "ak.wwise.core.transport.getState" ],
            "description": "Executes an action on the given transport object, or all transport objects if none is specified.",
            "argsSchema": {
                "type": "object",
                "properties": {
                    "transport": {
                        "$ref": "#/definitions/uint32",
                        "description": "The transport object ID to be used with all other ak.wwise.core.transport functions."
                    },
                    "action": {
                        "type": "string",
                        "enum": [ "play", "stop", "pause", "playStop", "playDirectly" ],
                        "description": "The action to execute."
                    }
                },
                "required": [ "action" ],
                "additionalProperties": false
            },
            "resultSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "optionsSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "examples": [
                {
                    "title": "Playing a transport object",
                    "description": "Plays the given transport object.",
                    "args": {
                        "action": "play",
                        "transport": 1234
                    },
                    "result": { }
                },
                {
                    "title": "Stopping all transport objects",
                    "description": "Stops all transport objects.",
                    "args": {
                        "action": "stop"
                    },
                    "result": { }
                },
                {
                    "title": "Toggling playback (pause / resume) on a transport object",
                    "description": "Toggles playback (pause / resume) on the given transport object.",
                    "args": {
                        "action": "pause",
                        "transport": 1234
                    },
                    "result": { }
                },
                {
                    "title": "Toggling playback (play / stop) on a transport object",
                    "description": "Toggles playback (play / stop) on the given transport object.",
                    "args": {
                        "action": "playStop",
                        "transport": 1234
                    },
                    "result": { }
                }
            ]
        },
        {
            "id": "ak.wwise.core.audioSourcePeaks.getMinMaxPeaksInRegion",
            "restrict": [ "userInterface", "commandLine" ],
            "seeAlso": [ "ak.wwise.core.audioSourcePeaks.getMinMaxPeaksInTrimmedRegion" ],
            "description": "Gets the min/max peak pairs, in the given region of an audio source, as a collection of binary strings (one per channel). The strings are base-64 encoded, 16-bit signed int arrays, with min and max values being interleaved. If getCrossChannelPeaks is true, only one binary string represents the peaks across all channels globally.",
            "argsSchema": {
                "type": "object",
                "properties": {
                    "object": {
                        "$ref": "#/definitions/objectArg",
                        "description": "The ID (GUID), name, or path of the audio source object."
                    },
                    "timeFrom": {
                        "type": "number",
                        "description": "The start time, in seconds, of the section of the audio source for which peaks are required. This number must be smaller than timeTo.",
                        "minimum": 0
                    },
                    "timeTo": {
                        "type": "number",
                        "description": "The end time, in seconds, of the section of the audio source for which peaks are required. This number must be larger than timeFrom.",
                        "minimum": 0
                    },
                    "numPeaks": {
                        "type": "integer",
                        "description": "The number of peaks that are required (minimum 1).",
                        "minimum": 1,
                        "maximum": 4294967295
                    },
                    "getCrossChannelPeaks": {
                        "type": "boolean",
                        "description": "When true, peaks are calculated globally across channels, instead of per channel."
                    }
                },
                "additionalProperties": false,
                "required": ["object", "timeFrom", "timeTo", "numPeaks"]
            },
            "resultSchema": {
                "type": "object",
                "properties": {
                    "peaksBinaryStrings": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "description":  "Binary string, representing one channel of min/max peaks data. When getCrossChannelPeaks is true, there is only one binary string in this array, representing the min max peaks across all channels."
                        },
                        "description":  "An array of binary strings."
                    },
                    "numChannels": {
                        "type": "number",
                        "description": "The number of channels of peak data (i.e. the number of strings in peaksBinaryStrings). This is 1 if getCrossChannelPeaks is true."
                    },
                    "maxAbsValue": {
                        "type": "number",
                        "description": "The maximum value that a peak can take. This can be used to normalize the peaks in the array (between -1, 1), by dividing each by this number."
                    },
                    "peaksArrayLength": {
                        "type": "number",
                        "description": "The number of peaks in the returned min max channel arrays. If peaksArrayLength is less than the numPeaks input argument, this indicates fewer samples were available than numPeaks requested. In this case, the arrays contain all of the sample values within the requested time window."
                    },
                    "peaksDataSize": {
                        "type": "number",
                        "description": "The size of the data in the peaks min max arrays. This can be used (in conjunction with peaksArrayLength) to decode the peaksBinaryStrings to 16 bit integer arrays"
                    }
                },
                "additionalProperties": false
            },
            "optionsSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "examples": [
                {
                    "title": "Getting peaks per channel",
                    "description": "Get peaks for an audio source object.",
                    "args": {
                        "object": "{AAAAAAAA-BBBB-CCCC-DDDD-EEEEEEEEEEEE}",
                        "timeFrom": 0.0,
                        "timeTo": 2.0,
                        "numPeaks": 750,
                        "getCrossChannelPeaks": false
                    },
                    "result": {
                        "peaksBinaryStrings": [ "longbase64string", "longbase64string" ],
                        "numChannels": 2,
                        "maxAbsValue": 32767,
                        "peaksArrayLength": 750,
                        "peaksDataSize": 1000
                    }
                },
                {
                    "title": "Getting peaks across channels",
                    "description": "Get peaks for an audio source object.",
                    "args": {
                        "object": "{AAAAAAAA-BBBB-CCCC-DDDD-EEEEEEEEEEEE}",
                        "timeFrom": 0.0,
                        "timeTo": 2.0,
                        "numPeaks": 750,
                        "getCrossChannelPeaks": true
                    },
                    "result": {
                        "peaksBinaryStrings": [ "longbase64string" ],
                        "numChannels": 2,
                        "maxAbsValue": 32767,
                        "peaksArrayLength": 750,
                        "peaksDataSize": 1000
                    }
                }
            ]
        },
        {
            "id": "ak.wwise.core.audioSourcePeaks.getMinMaxPeaksInTrimmedRegion",
            "restrict": [ "userInterface", "commandLine" ],
            "seeAlso": [ "ak.wwise.core.audioSourcePeaks.getMinMaxPeaksInRegion" ],
            "description": "Gets the min/max peak pairs in the entire trimmed region of an audio source, for each channel, as an array of binary strings (one per channel). The strings are base-64 encoded, 16-bit signed int arrays, with min and max values being interleaved. If getCrossChannelPeaks is true, there is only one binary string representing peaks across all channels globally.",
            "argsSchema": {
                "type": "object",
                "properties": {
                    "object": {
                        "$ref": "#/definitions/objectArg",
                        "description": "The ID (GUID), name, or path of the audio source."
                    },
                    "numPeaks": {
                        "type": "integer",
                        "description": "The number of peaks that are required (minimum 1).",
                        "minimum": 1,
                        "maximum": 4294967295
                    },
                    "getCrossChannelPeaks": {
                        "type": "boolean",
                        "description": "When true, peaks are calculated globally across channels, instead of per channel."
                    }
                },
                "required": ["object", "numPeaks"],
                "additionalProperties": false
            },
            "resultSchema": {
                "type": "object",
                "properties": {
                    "peaksBinaryStrings": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "description": "Binary strings representing one channel of min/max peaks data. When getCrossChannelPeaks is true there is only one binary string in this array, representing the min/max peaks across all channels."
                        },
                        "description": "An array of binary strings."
                    },
                    "numChannels": {
                        "type": "number",
                        "description": "The number of channels of peak data (i.e. the number of strings in peaksBinaryStrings). This is 1 if getCrossChannelPeaks is true."
                    },
                    "maxAbsValue": {
                        "type": "number",
                        "description": "The maximum value that a peak can take. This can be used to normalize the peaks in the array (between -1, 1), by dividing each by this number."
                    },
                    "peaksArrayLength": {
                        "type": "number",
                        "description": "The number of peaks in the returned min max channel arrays. If peaksArrayLength is less than the numPeaks input argument, this indicates fewer samples were available than numPeaks requested. In this case, the arrays contain all of the sample values within the requested time window."
                    },
                    "peaksDataSize": {
                        "type": "number",
                        "description": "The size of the data in the min/max peaks arrays. This can be used (in conjunction with peaksArrayLength) to decode the peaksBinaryStrings to 16 bit integer arrays"
                    }
                },
                "additionalProperties": false
            },
            "optionsSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "examples": [
                {
                    "title": "Getting peaks per channel",
                    "description": "Gets peaks for an audio source object (within the trimmed region).",
                    "args": {
                        "object": "{AAAAAAAA-BBBB-CCCC-DDDD-EEEEEEEEEEEE}",
                        "numPeaks": 750,
                        "getCrossChannelPeaks": false
                    },
                    "result": {
                        "peaksBinaryStrings": [ "longbase64string", "longbase64string" ],
                        "numChannels": 2,
                        "maxAbsValue": 32767,
                        "peaksArrayLength": 750,
                        "peaksDataSize": 1000
                    }
                },
                {
                    "title": "Getting peaks across channels",
                    "description": "Gets peaks for an audio source object (within the trimmed region).",
                    "args": {
                        "object": "{AAAAAAAA-BBBB-CCCC-DDDD-EEEEEEEEEEEE}",
                        "numPeaks": 750,
                        "getCrossChannelPeaks": true
                    },
                    "result": {
                        "peaksBinaryStrings": [ "longbase64string" ],
                        "numChannels": 1,
                        "maxAbsValue": 32767,
                        "peaksArrayLength": 750,
                        "peaksDataSize": 1000
                    }
                }
            ]
        },
        {
            "id": "ak.wwise.ui.commands.register",
            "restrict": [ "userInterface" ],
            "seeAlso": [ "ak.wwise.ui.commands.unregister", "ak.wwise.ui.commands.execute", "ak.wwise.ui.commands.executed" ],
            "description": "Registers an array of add-on commands. Registered commands remain until the Wwise process is terminated. Refer to \\ref defining_custom_commands for more information about registering commands. Also refer to \\ref ak_wwise_ui_commands_executed.",
            "argsSchema": {
                "type": "object",
                "properties": {
                    "commands": {
                        "$ref": "#/definitions/addOnsCommands",
                        "description": "Data for the commands to be registered."
                    }
                },
                "required": [ "commands" ],
                "additionalProperties": false
            },
            "resultSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "optionsSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "examples": [
				{
					"title": "Registering a command with no program",
                    "description": "Registers a command that has no program. Typically used as a callback in Waapi. Simplest example.",
                    "args": {
                        "commands": [
							{
								"id": "sample.programlessregistration",
								"displayName": "Programless registration"
							}
						]
                    },
                    "result": {}
				},
				{
					"title": "Registering a command to edit in Visual Studio Code",
                    "description": "Registers a command that's shown in a new Extra menu.",
                    "args": {
						"commands": [
							{
								"id": "ak.edit_in_vscode",
								"displayName": "Edit in Visual Studio Code",
								"defaultShortcut": "C",
								"program": "code",
								"startMode": "MultipleSelectionSingleProcessSpaceSeparated",
								"args": "${filePath}",
								"cwd": "",
								"contextMenu": {
									"basePath": "Editors",
									"enabledFor": "Sound,ActorMixer,SwitchContainer,RandomSequenceContainer"
								},          
								"mainMenu": {
									"basePath": "Extra"
								}
							}
						]
                    },
                    "result": {}
				},
				{
					"title": "Registering a command to edit in Wavosaur",
                    "description": "Registers a command that's shown in the contextual menu only",
                    "args": {
						"commands": [
							{
								"id": "ak.open_in_wavosaur",
								"displayName": "Edit in Wavosaur",
								"defaultShortcut": "W",
								"program": "c:\\Wavosaur.1.1.0.0-x64(en)\\Wavosaur.exe",
								"args": "${originalWavFilePath}",
								"cwd": "",
								"contextMenu": {}
							}
						]
                    },
                    "result": {}
				}
			]
        },
        {
            "id": "ak.wwise.ui.commands.unregister",
            "restrict": [ "userInterface" ],
            "seeAlso": [ "ak.wwise.ui.commands.register" ],
            "description": "Unregisters an array of add-on UI commands.",
            "argsSchema": {
                "type": "object",
                "properties": {
                    "commands": {
                        "type": "array",
                        "description": "An array of commands to unregister.",
                        "items": {
                            "type": "string",
                            "description": "A command ID."
                        }
                    }
                },
                "required": [ "commands" ],
                "additionalProperties": false
            },
            "resultSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "optionsSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "examples": [
				{
					"title": "Unregistering a list of commands",
                    "description": "Unregisters everything from the ak.wwise.ui.commands.register examples.",
                    "args": {
                        "commands": [
							"sample.programlessregistration",
							"ak.edit_in_vscode",
							"ak.open_in_wavosaur"
						]
                    },
                    "result": {}
				}
			]
        },
        {
            "id": "ak.wwise.core.profiler.getAudioObjects",
            "restrict": [ "userInterface", "commandLine" ],
            "seeAlso": [ "ak.wwise.core.profiler.getBusses", "ak.wwise.core.profiler.getCursorTime", "ak.wwise.core.profiler.getVoiceContributions", "ak.wwise.core.profiler.getVoices" ],
            "description": "Retrieves the Audio Objects at a specific profiler capture time.",
            "argsSchema": {
                "type": "object",
                "properties": {
                    "time": {
                        "$ref": "#/definitions/cursorTime",
                        "description": "Time in milliseconds to query for Audio Objects, or a Time Cursor from which to acquire the time. The User Time Cursor is the one that can be manipulated by the user, while the Capture Time Cursor represents the latest time of the current capture."
                    },
                    "busPipelineID": {
                        "$ref": "#/definitions/uint32",
                        "description": "The pipeline ID of a Bus instance for which to get Audio Objects."
                    }
				},
                "required": [ "time" ],
                "additionalProperties": false
            },
            "resultSchema": {
                "type": "object",
                "properties": {
                    "return": {
                        "type": "array",
                        "description": "Array of Audio Objects.",
                        "items": {
                            "$ref": "#/definitions/audioObjectReturn",
                            "description": "Audio Object."
                        }
                    }
                },
                "required": [ "return" ],
                "additionalProperties": false
            },
            "optionsSchema": {
                "type": "object",
                "properties": {
                    "return": {
                        "$ref": "#/definitions/audioObjectReturnOptions",
                        "description": "Members to return for each Audio Object. Defaults to Audio Object ID, Bus Pipeline ID, Instigator Pipeline ID and Effect Class ID."
                    }
                },
                "additionalProperties": false
            },
            "examples": [
                {
                    "title": "Querying the instigator ID (pipeline ID) for the Audio Objects at a point in time",
                    "description": "Query instigator ID (pipeline ID) for the Audio Objects in the current capture session at 30 secs (30,000 milliseconds).",
                    "args": {
                        "time": 30000
                    },
                    "options": {
                        "return": [ "audioObjectName" ]
                    },
                    "result": {
                        "return": [
                            {
                                "audioObjectName": "MyObject"
                            },
                            {
                                "audioObjectName": "MyOtherObject"
                            }
                        ]
                    }
                },
                {
                    "title": "Querying the game object properties of Audio Object from the Capture Time Cursor",
                    "description": "Specifies the Capture Time Cursor as a time to query the Audio Object at the latest time of the capture session when the call is processed.",
                    "args": {
                        "time": "capture"
                    },
                    "options": {
                        "return": [ "gameObjectID", "gameObjectName" ]
                    },
                    "result": {
                        "return": [
                            {
                                "gameObjectID": 18446744073709551614,
                                "gameObjectName": "Transport/Soundcaster"
                            }
                        ]
                    }
                }
            ]
        },
        {
            "id": "ak.wwise.core.profiler.getVoices",
            "restrict": [ "userInterface", "commandLine" ],
            "seeAlso": [ "ak.wwise.core.profiler.getBusses", "ak.wwise.core.profiler.getCursorTime", "ak.wwise.core.profiler.getVoiceContributions", "ak.wwise.core.profiler.getAudioObjects" ],
            "description": "Retrieves the voices at a specific profiler capture time.",
            "argsSchema": {
                "type": "object",
                "properties": {
                    "time": {
                        "$ref": "#/definitions/cursorTime",
                        "description": "Time in milliseconds to query for voices, or a Time Cursor from which to acquire the time. The User Time Cursor is the one that can be manipulated by the user, while the Capture Time Cursor represents the latest time of the current capture."
                    },
					"voicePipelineID": {
                        "$ref": "#/definitions/uint32",
                        "description": "The pipeline ID of a single voice to get."
                    }
                },
                "required": [ "time" ],
                "additionalProperties": false
            },
            "resultSchema": {
                "type": "object",
                "properties": {
                    "return": {
                        "type": "array",
                        "description": "Array of voices.",
                        "items": {
                            "$ref": "#/definitions/voiceReturn",
                            "description": "Voice item."
                        }
                    }
                },
                "required": [ "return" ],
                "additionalProperties": false
            },
            "optionsSchema": {
                "type": "object",
                "properties": {
                    "return": {
                        "$ref": "#/definitions/voiceReturnOptions",
                        "description": "Members to return for each voice. Defaults to Pipeline ID, Game Object ID and Object GUID."
                    }
                },
                "additionalProperties": false
            },
            "examples": [
                {
                    "title": "Querying the sound names at a point in time",
                    "description": "Queries the voices in the current capture session at 30 secs (30,000 milliseconds).",
                    "args": {
                        "time": 30000
                    },
                    "options": {
                        "return": [ "objectName" ]
                    },
                    "result": {
                        "return": [
                            {
                                "objectName": "MySound"
                            },
                            {
                                "objectName": "MyOtherSound"
                            }
                        ]
                    }
                },
                {
                    "title": "Querying the game object properties of voices from the Capture Time Cursor",
                    "description": "Specifies the Capture Time Cursor as a time to query the voices at the latest time of the capture session when the call is processed.",
                    "args": {
                        "time": "capture"
                    },
                    "options": {
                        "return": [ "gameObjectID", "gameObjectName" ]
                    },
                    "result": {
                        "return": [
                            {
                                "gameObjectID": 18446744073709551614,
                                "gameObjectName": "Transport/Soundcaster"
                            }
                        ]
                    }
                }
            ]
        },
        {
            "id": "ak.wwise.core.profiler.getRTPCs",
            "restrict": [ "userInterface", "commandLine" ],
            "seeAlso": [ "ak.wwise.core.profiler.getCursorTime" ],
            "description": "Retrieves active RTPCs at a specific profiler capture time.",
            "argsSchema": {
                "type": "object",
                "properties": {
                    "time": {
                        "$ref": "#/definitions/cursorTime",
                        "description": "Time in milliseconds to query for RTPCs, or a Time Cursor from which to acquire the time. The User Time Cursor is the one that can be manipulated by the user, while the Capture Time Cursor represents the latest time of the current capture."
                    }
                },
                "required": [ "time" ],
                "additionalProperties": false
            },
            "resultSchema": {
                "type": "object",
                "properties": {
                    "return": {
                        "type": "array",
                        "description": "Array of RTPCs.",
                        "items": {
                            "type": "object",
                            "description": "A RTPC associated with a playing voice. Use the return options to specify which property is required.",
                            "properties": {
                                "id": {
                                    "$ref": "#/definitions/guid",
                                    "description": "The ID (GUID) of the Game Parameter, LFO, Time, Enveloppe or MIDI Parameter object."
                                },
                                "name": {
                                    "$ref": "#/definitions/uniqueName",
                                    "description": "The name of the Game Parameter, LFO, Time, Enveloppe or MIDI Parameter object."                    
                                },
                                "gameObjectId": {
                                    "$ref": "#/definitions/gameObject",
                                    "description": "The Game Object associated with the RTPC scope, or AK_INVALID_GAME_OBJECT for global scope RTPCs."
                                },
                                "value": {
                                    "type": "number",
                                    "description": "The value of the Game Parameter, LFO, Time, Enveloppe or MIDI Parameter at the cursor time."
                                }
                            },
                            "additionalProperties": false
                        }
                    }
                },
                "required": [ "return" ],
                "additionalProperties": false
            },
            "optionsSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "examples": [
                {
                    "title": "Querying the RTPC id and value at a point in time",
                    "description": "Queries the active RTPCs in the current capture session at 30 secs (30,000 milliseconds).",
                    "args": {
                        "time": 30000
                    },
                    "result": {
                        "return": [
                            {
                                "id": "{8CCB75BA-256A-4C7B-907F-9BEB03689F56}",
                                "value": 50.0
                            },
                            {
                                "id": "{1FEAF6CE-113A-49F2-BCAA-9AFDDE35ADA5}",
                                "value": 75.0
                            }
                        ]
                    }
                }
            ]
        },
        {
            "id": "ak.wwise.core.profiler.getBusses",
            "restrict": [ "userInterface", "commandLine" ],
            "seeAlso": [ "ak.wwise.core.profiler.getVoices", "ak.wwise.core.profiler.getCursorTime", "ak.wwise.core.profiler.getVoiceContributions" ],
            "description": "Retrieves the busses at a specific profiler capture time.",
            "argsSchema": {
                "type": "object",
                "properties": {
                    "time": {
                        "$ref": "#/definitions/cursorTime",
                        "description": "Time in milliseconds to query for busses, or a Time Cursor from which to acquire the time. The User Time Cursor is the one that can be manipulated by the user, while the Capture Time Cursor represents the latest time of the current capture."
                    },
					"busPipelineID": {
                        "$ref": "#/definitions/uint32",
                        "description": "The pipeline ID of a single bus instance to get."
                    }
                },
                "required": [ "time" ],
                "additionalProperties": false
            },
            "resultSchema": {
                "type": "object",
                "properties": {
                    "return": {
                        "type": "array",
                        "description": "Array of busses.",
                        "items": {
                            "$ref": "#/definitions/busReturn",
                            "description": "Bus item."
                        }
                    }
                },
                "required": [ "return" ],
                "additionalProperties": false
            },
            "optionsSchema": {
                "type": "object",
                "properties": {
                    "return": {
                        "$ref": "#/definitions/busReturnOptions",
                        "description": "Members to return for each bus. Defaults to Pipeline ID, Game Object ID, and Object GUID."
                    }
                },
                "additionalProperties": false
            },
            "examples": [
                {
                    "title": "Querying the bus names at a point in time",
                    "description": "Queries the bus in the current capture session at 30 secs (30,000 milliseconds).",
                    "args": {
                        "time": 30000
                    },
                    "options": {
                        "return": [ "objectName" ]
                    },
                    "result": {
                        "return": [
                            {
                                "objectName": "Master Audio Bus"
                            },
                            {
                                "objectName": "My Aux Bus"
                            }
                        ]
                    }
                }
            ]
        },
        {
            "id": "ak.wwise.core.profiler.getVoiceContributions",
            "restrict": [ "userInterface", "commandLine" ],
            "seeAlso": [ "ak.wwise.core.profiler.getCursorTime", "ak.wwise.core.profiler.getVoices", "ak.wwise.core.profiler.getBusses" ],
            "description": "Retrieves all parameters affecting voice volume, highpass and lowpass for a voice path, resolved from pipeline IDs.",
            "argsSchema": {
                "type": "object",
                "properties": {
                    "voicePipelineID": {
                        "$ref": "#/definitions/pipelineID",
                        "description": "The pipeline ID of the voice to get contributions from."
                    },
                    "bussesPipelineID": {
                        "type": "array",
                        "description": "An array of bus pipeline IDs.",
                        "items": {
                            "$ref": "#/definitions/pipelineID",
                            "description": "The pipeline IDs of busses belonging to a common voice path. An empty array defaults to the dry path."
                        }
                    },
                    "time": {
                        "$ref": "#/definitions/cursorTime",
                        "description": "Time in milliseconds to query for voices, or a Time Cursor from which to acquire the time. The User Time Cursor is the one that can be manipulated by the user, while the Capture Time Cursor represents the latest time of the current capture."
                    }
                },
                "required": [ "voicePipelineID", "time" ],
                "additionalProperties": false
            },
            "resultSchema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "return": {
                        "type": "object",
                        "description": "The hierarchy of objects with parameters contributing to the voice, ordered from top-level parent to the voice object",
                        "additionalProperties" : false,
                        "properties": {
                            "volume": { 
                                "type": "number",
                                "description": "The volume difference applied as a contribution."
                            },
                            "LPF": { 
                                "type": "number" ,
                                "description": "The LPF difference applied as a contribution."
                            },
                            "HPF": { 
                                "type": "number" ,
                                "description": "The HPF difference applied as a contribution."
                            },
                            "objects": {
                                "type": "array",
                                "description": "A tree of contribution objects.",
                                "items": {
                                    "$ref": "#/definitions/voiceContributionsObject"
                                }
                            }
                        }
                    }
                }
            },
            "optionsSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            }
        },
        {
            "id": "ak.wwise.core.profiler.enableProfilerData",
            "restrict": [ "userInterface", "commandLine" ],
            "description": "Specifies the type of data you want to capture. Overrides the user's profiler settings.",
            "argsSchema": {
                "type": "object",
                "properties": {
                    "dataTypes": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "dataType": {
                                    "$ref": "#/definitions/profilerDataType",
                                    "description": "Specifies the type of data you want to capture."
                                },
                                "enable": {
                                    "type": "boolean",
                                    "description": "Enable (true) or disable (false) capture for this type of profiler data. Defaults to true when not specified."
                                }
                            },
                            "description": "The data type and enable status.",
                            "required": [ "dataType" ],
                            "additionalProperties": false
                        },
                        "description": "An array of data types."
                    }
                },
                "required": [ "dataTypes" ],
                "additionalProperties": false
            },
            "resultSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "optionsSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "examples": [
                {
                    "title": "Enabling the profiler data",
                    "description": "Enable \"Voices Data\"",
                    "args": {
                        "dataTypes": [
                            { "dataType": "voices", "enable": true }
                        ]
                    },
                    "options": {},
                    "result": {}
                },
                {
                    "title": "Disabling profiler data",
                    "description": "Disable \"Voices Data\"",
                    "args": {
                        "dataTypes": [
                            { "dataType": "voices", "enable": false }
                        ]
                    },
                    "options": {},
                    "result": {}
                },                
                {
                    "title": "Enabling profiler data required for ak.wwise.core.profiler.getVoiceContributions",
                    "description": "Enable \"Voices Data\" and \"Voice Inspector Data\" using the default value (true) for the enable property",
                    "args": {
                        "dataTypes": [
                            { "dataType": "voices" },
                            { "dataType": "voiceInspector" }
                        ]
                    },
                    "options": {},
                    "result": {}
                }
            ]
        },
        {
            "id": "ak.wwise.core.profiler.getCursorTime",
            "restrict": [ "userInterface", "commandLine" ],
            "seeAlso": [ "ak.wwise.core.profiler.getVoices", "ak.wwise.core.profiler.getBusses", "ak.wwise.core.profiler.getVoiceContributions" ],
            "description": "Returns the current time of the specified profiler cursor, in milliseconds.",
            "argsSchema": {
                "type": "object",
                "properties": {
                    "cursor": {
                        "$ref": "#/definitions/profilerCursor",
                        "description": "Time Cursor from which to acquire the time. The User Time Cursor is the one that can be manipulated by the user, while the Capture Time Cursor represents the latest time of the current capture."
                    }
                },
                "required": [ "cursor" ],
                "additionalProperties": false
            },
            "resultSchema": {
                "type": "object",
                "properties": {
                    "return": {
                        "type": "integer",
                        "description": "The current position of the specified Time Cursor, in ms."
                    }
                },
                "additionalProperties": false
            },
            "optionsSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            }
        },
        {
            "id": "ak.wwise.core.profiler.startCapture",
            "restrict": [ "userInterface", "commandLine" ],
            "seeAlso": [ 
                "ak.wwise.core.profiler.stopCapture", 
                "ak.wwise.core.profiler.getCursorTime", 
                "ak.wwise.core.profiler.getVoices",
                "ak.wwise.core.profiler.captureLog.itemAdded" ],
            "description": "Starts the profiler capture and returns the time at the beginning of the capture, in milliseconds.",
            "argsSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "resultSchema": {
                "type": "object",
                "properties": {
                    "return": {
                        "type": "integer",
                        "description": "The value of the Capture Time Cursor in ms."
                    }
                },
                "additionalProperties": false
            },
            "optionsSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            }
        },
        {
            "id": "ak.wwise.core.profiler.stopCapture",
            "restrict": [ "userInterface", "commandLine" ],
            "seeAlso": [ "ak.wwise.core.profiler.startCapture", "ak.wwise.core.profiler.getCursorTime" ],
            "description": "Stops the profiler capture and returns the time at the end of the capture, in milliseconds.",
            "argsSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "resultSchema": {
                "type": "object",
                "properties": {
                    "return": {
                        "type": "integer",
                        "description": "The value of the Capture Time Cursor in ms."
                    }
                },
                "additionalProperties": false
            },
            "optionsSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            }
        }
    ],
    "topics": [
        {
            "id": "ak.wwise.core.audio.imported",
            "restrict": [ "userInterface", "commandLine" ],
            "seeAlso": [ "ak.wwise.core.audio.import","ak.wwise.core.audio.importTabDelimited" ],
            "description": "Sent at the end of an import operation.",
            "optionsSchema": {
                "type": "object",
                "properties": {
                    "return": {
                        "$ref": "#/definitions/returnExpression",
                        "description": "Data to be returned for every imported object."
                    }
                },
                "additionalProperties": false
            },
            "publishSchema": {
                "type": "object",
                "properties": {
                    "objects": {
                        "type": "array",
                        "description": "The list of objects that have been created as part of the same import operation.",
                        "items": {
                            "$ref": "#/definitions/objectReturn",
                            "description": "Object created during the import operation. Default return is id and name."
                        }
                    }
                },
                "required": [ "objects" ],
                "additionalProperties": false
            }
        },
        {
            "id": "ak.wwise.core.object.referenceChanged",
            "restrict": [ "userInterface", "commandLine" ],
            "seeAlso": [ "ak.wwise.core.object.setReference" ],
            "description": "Sent when an object reference is changed.",
            "optionsSchema": {
                "type": "object",
                "properties": {
                    "return": {
                        "$ref": "#/definitions/returnExpression",
                        "description": "Data to be returned for the object, the old reference and the new reference."
                    },
                    "platform": {
                        "$ref": "#/definitions/guid",
                        "description": "The ID (GUID) of the platform."
                    }
                },
                "additionalProperties": false
            },
            "publishSchema": {
                "type": "object",
                "properties": {
                    "object": {
                        "$ref": "#/definitions/objectReturn",
                        "description": "The object which had its reference changed."
                    },
                    "old": {
                        "$ref": "#/definitions/objectReturn",
                        "description": "The previous referenced object."
                    },
                    "new": {
                        "$ref": "#/definitions/objectReturn",
                        "description": "The new referenced object."
                    },
                    "reference": {
                        "type": "string",
                        "description": "The name of the reference that was changed. See the object's description in wobjects.xml for an object's possible references."
                    },
                    "platform": {
                        "$ref": "#/definitions/guid",
                        "description": "The ID (GUID) of the platform if the reference was changed for a single platform. When not provided, the reference is changed for all platforms."
                    }
                },
                "required": [ "object", "old", "new", "reference" ],
                "additionalProperties": false
            }
        },
        {
            "id": "ak.wwise.core.switchContainer.assignmentAdded",
            "restrict": [ "userInterface", "commandLine" ],
            "seeAlso": [ "ak.wwise.core.switchContainer.addAssignment" ],
            "description": "Sent when an assignment is added to a Switch Container.",
            "optionsSchema": {
                "type": "object",
                "properties": {
                    "return": {
                        "$ref": "#/definitions/returnExpression",
                        "description": "Data to be returned for the Switch Container and the assignment (pair of objects)."
                    }
                },
                "additionalProperties": false
            },
            "publishSchema": {
                "type": "object",
                "properties": {
                    "switchContainer": {
                        "$ref": "#/definitions/objectReturn",
                        "description": "The Switch Container to which the assignment was added."
                    },
                    "child": {
                        "$ref": "#/definitions/objectReturn",
                        "description": "The child object that was assigned."
                    },
                    "stateOrSwitch": {
                        "$ref": "#/definitions/objectReturn",
                        "description": "The State or Switch to which the child object was assigned."
                    }
                },
                "required": [ "switchContainer", "child", "stateOrSwitch" ],
                "additionalProperties": false
            }
        },
        {
            "id": "ak.wwise.core.switchContainer.assignmentRemoved",
            "restrict": [ "userInterface", "commandLine" ],
            "seeAlso": [ "ak.wwise.core.switchContainer.removeAssignment" ],
            "description": "Sent when an assignment is removed from a Switch Container.",
            "optionsSchema": {
                "type": "object",
                "properties": {
                    "return": {
                        "$ref": "#/definitions/returnExpression",
                        "description": "Data to be returned for the Switch Container and the assignment (pair of objects)."
                    }
                },
                "additionalProperties": false
            },
            "publishSchema": {
                "type": "object",
                "properties": {
                    "switchContainer": {
                        "$ref": "#/definitions/objectReturn",
                        "description": "The Switch Container which had the assignment removed."
                    },
                    "child": {
                        "$ref": "#/definitions/objectReturn",
                        "description": "The child object that was assigned."
                    },
                    "stateOrSwitch": {
                        "$ref": "#/definitions/objectReturn",
                        "description": "The State or Switch to which the child object was assigned."
                    }
                },
                "required": [ "switchContainer", "child", "stateOrSwitch" ],
                "additionalProperties": false
            }
        },
        {
            "id": "ak.wwise.core.object.nameChanged",
            "restrict": [ "userInterface", "commandLine" ],
            "seeAlso": [ "ak.wwise.core.object.setName" ],
            "description": "Sent when an object is renamed. Publishes the renamed object.",
            "optionsSchema": {
                "type": "object",
                "properties": {
                        "return": {
                        "$ref": "#/definitions/returnExpression",
                        "description": "Data to be returned for every name change."
                    },
                    "platform": {
                        "$ref": "#/definitions/guid",
                        "description": "The ID (GUID) of the platform."
                    }
                },
                "additionalProperties": false
            },
            "publishSchema": {
                "type": "object",
                "properties": {
                    "object": {
                        "$ref": "#/definitions/objectReturn",
                        "description": "The object that was renamed."
                    },
                    "newName": {
                        "type": "string",
                        "description": "The new name of the object."

                    },
                    "oldName": {
                        "type": "string",
                        "description": "The previous name of the object."
                    }
                },
                "required": [ "object", "newName", "oldName" ],
                "additionalProperties": false
            }
        },
        {
            "id": "ak.wwise.core.object.notesChanged",
            "restrict": [ "userInterface", "commandLine" ],
            "seeAlso": [ "ak.wwise.core.object.setNotes" ],
            "description": "Sent when the object's notes are changed.",
            "optionsSchema": {
                "type": "object",
                "properties": {
                        "return": {
                        "$ref": "#/definitions/returnExpression",
                        "description": "Data to be returned for every object's note change."
                    },
                    "platform": {
                        "$ref": "#/definitions/guid",
                        "description": "The ID (GUID) of the platform."
                    }
                },
                "additionalProperties": false
            },
            "publishSchema": {
                "type": "object",
                "properties": {
                    "object": {
                        "$ref": "#/definitions/objectReturn",
                        "description": "The object that had its notes changed."
                    },
                    "newNotes": {
                        "type": "string",
                        "description": "The object's new notes."

                    },
                    "oldNotes": {
                        "type": "string",
                        "description": "The previous notes of the object."
                    }
                },
                "required": [ "object", "newNotes", "oldNotes" ],
                "additionalProperties": false
            }
        },
        {
            "id": "ak.wwise.core.object.created",
            "restrict": [ "userInterface", "commandLine" ],
            "seeAlso": [ "ak.wwise.core.object.create", "ak.wwise.core.audio.import", "ak.wwise.core.audio.importTabDelimited" ],
            "description": "Sent when an object is created.",
            "optionsSchema": {
                "type": "object",
                "properties": {
                        "return": {
                        "$ref": "#/definitions/returnExpression",
                        "description": "Data to be returned for every object being created."
                    },
                    "platform": {
                        "$ref": "#/definitions/guid",
                        "description": "The ID (GUID) of the platform."
                    }
                },
                "additionalProperties": false
            },
            "publishSchema": {
                "type": "object",
                "properties": {
                    "object": {
                        "$ref": "#/definitions/objectReturn",
                        "description": "The newly created object."
                    }
                },
                "required": [ "object" ],
                "additionalProperties": false
            }
        },
        {
            "id": "ak.wwise.core.object.preDeleted",
            "restrict": [ "userInterface", "commandLine" ],
            "seeAlso": [ "ak.wwise.core.object.delete" ],
            "description": "Sent prior to an object's deletion.",
            "optionsSchema": {
                "type": "object",
                "properties": {
                        "return": {
                        "$ref": "#/definitions/returnExpression",
                        "description": "Data to be returned for every object prior to its deletion."
                    },
                    "platform": {
                        "$ref": "#/definitions/guid",
                        "description": "The ID (GUID) of the platform."
                    }
                },
                "additionalProperties": false
            },
            "publishSchema": {
                "type": "object",
                "properties": {
                    "object": {
                        "$ref": "#/definitions/objectReturn",
                        "description": "The object to be deleted."
                    }
                },
                "required": [ "object" ],
                "additionalProperties": false
            }
        },
        {
            "id": "ak.wwise.core.object.postDeleted",
            "restrict": [ "userInterface", "commandLine" ],
            "seeAlso": [ "ak.wwise.core.object.delete" ],
            "description": "Sent following an object's deletion.",
            "optionsSchema": {
                "type": "object",
                "properties": {
                        "return": {
                        "$ref": "#/definitions/returnExpression",
                        "description": "Data to be returned for every object following its deletion."
                    },
                    "platform": {
                        "$ref": "#/definitions/guid",
                        "description": "The ID (GUID) of the platform."
                    }
                },
                "additionalProperties": false
            },
            "publishSchema": {
                "type": "object",
                "properties": {
                    "object": {
                        "$ref": "#/definitions/objectReturn",
                        "description": "The deleted object."
                    }
                },
                "required": [ "object" ],
                "additionalProperties": false
            }
        },
        {
            "id": "ak.wwise.core.object.childAdded",
            "restrict": [ "userInterface", "commandLine" ],
            "seeAlso": [ "ak.wwise.core.object.create", "ak.wwise.core.object.move", "ak.wwise.core.object.copy", "ak.wwise.core.audio.import", "ak.wwise.core.audio.importTabDelimited" ],
            "description": "Sent when an object is added as a child to another object.",
            "optionsSchema": {
                "type": "object",
                "properties": {
                        "return": {
                        "$ref": "#/definitions/returnExpression",
                        "description": "Data to be returned for every child being added."
                    },
                    "platform": {
                        "$ref": "#/definitions/guid",
                        "description": "The ID (GUID) of the platform."
                    }
                },
                "additionalProperties": false
            },
            "publishSchema": {
                "type": "object",
                "properties": {
                    "child": {
                        "$ref": "#/definitions/objectReturn",
                        "description": "The newly added child object."
                    },
                    "parent": {
                        "$ref": "#/definitions/objectReturn",
                        "description": "The parent object to which the object is added."
                    }
                },
                "required": [ "child", "parent" ],
                "additionalProperties": false
            }
        },
        {
            "id": "ak.wwise.core.object.childRemoved",
            "restrict": [ "userInterface", "commandLine" ],
            "seeAlso": [ "ak.wwise.core.object.delete", "ak.wwise.core.object.move", "ak.wwise.core.object.copy" ],
            "description": "Sent when an object is removed from the children of another object.",
            "optionsSchema": {
                "type": "object",
                "properties": {
                        "return": {
                        "$ref": "#/definitions/returnExpression",
                        "description": "Data to be returned for every child being removed."
                    },
                    "platform": {
                        "$ref": "#/definitions/guid",
                        "description": "The ID (GUID) of the platform."
                    }
                },
                "additionalProperties": false
            },
            "publishSchema": {
                "type": "object",
                "properties": {
                    "child": {
                        "$ref": "#/definitions/objectReturn",
                        "description": "The child object that is removed."
                    },
                    "parent": {
                        "$ref": "#/definitions/objectReturn",
                        "description": "The parent object from which the child object is removed."
                    }
                },
                "required": [ "child", "parent" ],
                "additionalProperties": false
            }
        },
        {
            "id": "ak.wwise.core.object.curveChanged",
            "restrict": [ "userInterface", "commandLine" ],
            "seeAlso": [ "ak.wwise.core.object.setAttenuationCurve" ],
            "description": "Sent when one or many curves are changed.",
            "optionsSchema": {
                "type": "object",
                "properties": {
                        "return": {
                        "$ref": "#/definitions/returnExpression",
                        "description": "Data to be returned for every curve change."
                    },
                    "platform": {
                        "$ref": "#/definitions/guid",
                        "description": "The ID (GUID) of the platform."
                    }
                },
                "additionalProperties": false
            },
            "publishSchema": {
                "type": "object",
                "properties": {
                    "notification": {
                        "type": "string",
                        "description": "The type of change applied to the curve."
                    },
                    "curve": {
                        "$ref": "#/definitions/objectReturn",
                        "description": "The curve object that was modified."

                    },
                    "owner": {
                        "$ref": "#/definitions/objectReturn",
                        "description": "The owner object."

                    }
                },
                "required": [ "notification", "curve", "owner" ],
                "additionalProperties": false
            }
        },
        {
            "id": "ak.wwise.core.object.attenuationCurveChanged",
            "restrict": [ "userInterface", "commandLine" ],
            "seeAlso": [ "ak.wwise.core.object.setAttenuationCurve" ],
            "description": "Sent when an attenuation curve is changed.",
            "optionsSchema": {
                "type": "object",
                "properties": {
                        "return": {
                        "$ref": "#/definitions/returnExpression",
                        "description": "Data to be returned for every attenuation curve change."
                    },
                    "platform": {
                        "$ref": "#/definitions/guid",
                        "description": "The ID (GUID) of the platform."
                    }
                },
                "additionalProperties": false
            },
            "publishSchema": {
                "type": "object",
                "properties": {
                    "attenuation": {
                        "$ref": "#/definitions/objectReturn",
                        "description": "The attenuation object owning the curve."

                    },
                    "curveType": {
                        "type": "string",
                        "enum": [ "VolumeDryUsage", "VolumeWetGameUsage", "VolumeWetUserUsage", "LowPassFilterUsage", "HighPassFilterUsage", "SpreadUsage", "FocusUsage" ],
                        "description": "The curve type that changed."
                    }
                },
                "required": [ "attenuation", "curveType" ],
                "additionalProperties": false
            }
        },
        {
            "id": "ak.wwise.core.object.attenuationCurveLinkChanged",
            "restrict": [ "userInterface", "commandLine" ],
            "seeAlso": [ "ak.wwise.core.object.setAttenuationCurve" ],
            "description": "Sent when an attenuation curve's link/unlink is changed.",
            "optionsSchema": {
                "type": "object",
                "properties": {
                        "return": {
                        "$ref": "#/definitions/returnExpression",
                        "description": "Data to be returned for every attenuation curve link change."
                    },
                    "platform": {
                        "$ref": "#/definitions/guid",
                        "description": "The ID (GUID) of the platform."
                    }
                },
                "additionalProperties": false
            },
            "publishSchema": {
                "type": "object",
                "properties": {
                    "attenuation": {
                        "$ref": "#/definitions/objectReturn",
                        "description": "The attenuation object owning the curve."
                    },
                    "curveType": {
                        "type": "string",
                        "enum": [ "VolumeDryUsage", "VolumeWetGameUsage", "VolumeWetUserUsage", "LowPassFilterUsage", "HighPassFilterUsage", "SpreadUsage", "FocusUsage" ],
                        "description": "The curve type that changed."
                    }
                },
                "required": [ "attenuation", "curveType" ],
                "additionalProperties": false
            }
        },
        {
            "id": "ak.wwise.core.object.propertyChanged",
            "restrict": [ "userInterface", "commandLine" ],
            "seeAlso": [ "ak.wwise.core.object.setProperty", "ak.wwise.core.object.create" ],
            "description": "Sent when the watched property of an object changes.",
            "optionsSchema": {
                "type": "object",
                "properties": {
                    "object": {
                        "$ref": "#/definitions/objectArg",
                    	"description": "The ID (GUID), name, or path of the object to watch."
                    },
                    "property": {
                        "type": "string",
                        "$ref":"#/definitions/propertyName",
                        "description": "The property of the watched object to watch."
                    },
                    "return": {
                        "$ref": "#/definitions/returnExpression",
                        "description": "Data to be returned for every change on \"property\" of \"object\". Refer to \\ref wobjects_index for more information on the properties available."
                    },
                    "platform": {
                        "$ref": "#/definitions/guid",
                        "description": "The ID (GUID) of the platform."
                    }
                },
                "required": [ "object", "property" ],
                "additionalProperties": false
            },
            "publishSchema": {
                "type": "object",
                "properties": {
                    "object": {
                        "$ref": "#/definitions/objectReturn",
                        "description": "The watched object."
                    },
                    "property": {
                        "type": "string",
                        "$ref":"#/definitions/propertyName",
                        "description": "The watched property of the watched object."
                    },
                    "old": {
                        "description": "The previous value.",
                        "$ref":"#/definitions/propertyValue"
                    },
                    "new": {
                        "description": "The new value.",
                        "$ref":"#/definitions/propertyValue"
                    },
                    "platform": {
                        "$ref": "#/definitions/guid",
                        "description": "The ID (GUID) of the platform for which the change occurred."
                    }
                },
                "required": [ "object", "property", "old", "new", "platform" ],
                "additionalProperties": false
            }
        },
        {
            "id": "ak.wwise.core.soundbank.generated",
            "restrict": [ "userInterface", "commandLine" ],
            "seeAlso": [ "ak.wwise.ui.commands.execute", "ak.wwise.core.soundbank.generate" ],
            "description": "Sent when a single SoundBank is generated. This could be sent multiple times during SoundBank generation, for every SoundBank generated and for every platform. To generate SoundBanks, refer to \\ref ak_wwise_core_soundbank_generate or \\ref ak_wwise_ui_commands_execute with one of the SoundBank generation commands. Refer to \\ref globalcommandsids for the list of commands.",
            "optionsSchema": {
                "type": "object",
                "properties": {
                    "infoFile": {
                        "type": "boolean",
                        "description": "Embed the JSON SoundBank info file in the response."
                    },
                    "bankData": {
                        "type": "boolean",
                        "description": "Embed the base64 SoundBank data in the response."
                    },
                    "pluginInfo": {
                        "type": "boolean",
                        "description": "Embed the JSON PluginInfo file in the response."
                    },
                    "return": {
                        "$ref": "#/definitions/returnExpression",
                        "description": "Data to be returned for the SoundBank generated. Refer to \\ref wobjects_index for more information on the properties available."
                    }
                },
                "additionalProperties": false
            },
            "publishSchema": {
                "type": "object",
                "properties": {
                    "soundbank": {
                        "$ref": "#/definitions/objectReturn",
                        "description": "The generated SoundBank. Use the return options to obtain specific details."
                    },
                    "platform": {
                        "type": "object",
                        "description": "The platform for which the SoundBank was generated."
                    },
                    "language": {
                        "type": "object",
                        "description": "The language for which the SoundBank was generated. Only present when generating a SoundBank for a specific language."
                    },
                    "error": {
                        "type": "string",
                        "description": "The error message, if an error occurred. Only present if an error occurred."
                    },
                    "bankData": {
                        "type": "object",
                        "description": "SoundBank data object containg the actual data encoded in base64 and the size.",
                        "properties": {
                            "data": {
                                "type": "string",
                                "description": "Data of the SoundBank encoded in base64."
                            },
                            "size": {
                                "type": "integer",
                                "description": "Size of the SoundBank data when decoded."
                            }
                        }
                    },
                    "bankInfo": {
                        "type": "array",
                        "description": "All the informations for SoundBank.",
                        "items": {
                            "type": "object",
                            "description": "SoundBank information.",
                            "properties": {
                                "Id": {
                                    "type": "string",
                                    "description": "Short ID of the resulting bank encoded in a string."
                                },
                                "GUID": {
                                    "$ref": "#/definitions/guid",
                                    "description": "GUID of the resulting SoundBank."
                                },
                                "ObjectPath": {
                                    "type": "string",
                                    "description": "Object path in the project."
                                },
                                "Language": {
                                    "type": "string",
                                    "description": "The name of the language being used in this SoundBank."
                                },
                                "ShortName": {
                                    "type": "string",
                                    "description": "The name of the SoundBank."
                                },
                                "Path": {
                                    "type": "string",
                                    "description": "The file name of the SoundBank."
                                },
                                "IncludedEvents": {
                                    "type": "array",
                                    "description": "All the events included in this SoundBank with their information.",
                                    "items": {
                                        "type": "object",
                                        "description": "Event information",
                                        "properties": {
                                            "Id": {
                                                "type": "string",
                                                "description": "Short ID of the event."
                                            },
                                            "Name": {
                                                "type": "string",
                                                "description": "Name of the event."
                                            },
                                            "GUID": {
                                                "$ref": "#/definitions/guid",
                                                "description": "GUID of the event."
                                            },
                                            "MaxAttenuation": {
                                                "type": "string",
                                                "description": "The max attenuation of the event as a floating point value."
                                            },
                                            "DurationType": {
                                                "type": "string",
                                                "description": "The kind of duration, possible values: OneShot, Unknown, Infinite, Mixed."
                                            },
                                            "DurationMin": {
                                                "type": "string",
                                                "description": "The minimum value for the duration as a floating point value."
                                            },
                                            "DurationMax": {
                                                "type": "string",
                                                "description": "The maximum value for the duration as a floating point value."
                                            },
                                            "ReferencedStreamedFiles": {
                                                "type": "array",
                                                "description": "List of all streamed files used by this SoundBank or event.",
                                                "items": {
                                                    "$ref": "#/definitions/fileReference",
                                                    "description": "Referenced Streamed File entry"
                                                }
                                            },
                                            "ExcludedMemoryFiles": {
                                                "type": "array",
                                                "description": "List of excluded media in the SoundBank or event. If you are using prefetch on a streamed file, the prefetch size will be listed here.",
                                                "items": {
                                                    "$ref": "#/definitions/fileReference",
                                                    "description": "Excluded Memory File entry"
                                                    }
                                                }
                                            },
                                            "IncludedMemoryFiles": {
                                                "type": "array",
                                                "description": "List of included media in the SoundBank or event. If you are using prefetch on a streamed file, the prefetch size will be listed here.",
                                                "items": {
                                                    "$ref": "#/definitions/fileReference",
                                                    "description": "Included Memory File entry"
                                                }
                                            },
                                            "SwitchContainers": {
                                                "id": "soundBankInfoSwitchContainer",
                                                "type": "array",
                                                "description": "List of association of switch container value to its used media.",
                                                "items": {
                                                    "type": "object",
                                                    "description": "SwitchContainer entry",
                                                    "properties": {
                                                        "SwitchValue": {
                                                            "$ref": "#/definitions/guid",
                                                            "description": "GUID of the switch container value used."
                                                        },
                                                        "Media" : {
                                                            "type": "array",
                                                            "description": "List of media used by this switch container value",
                                                            "items": {
                                                                "type": "object",
                                                                "description": "Media entry",
                                                                "properties": {
                                                                    "Id": {
                                                                        "type": "string",
                                                                        "description": "Short ID of the media used."
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "Children": {
                                                            "type": "array",
                                                            "description": "Children of this switch container value.",
                                                            "items": {
                                                                "$ref": "soundBankInfoSwitchContainer",
                                                                "description": "Child entry of the switch container"
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                "IncludedAuxBusses": {
                                    "type": "array",
                                    "description": "List of all AuxBus used in this SoundBank.",
                                    "items": {
                                        "type": "object",
                                        "description": "AuxBus information.",
                                        "properties": {
                                            "Id": {
                                                "type": "string",
                                                "description": "Short ID of the AuxBus."
                                            },
                                            "Name": {
                                                "type": "string",
                                                "description": "Name of the AuxBus."
                                            },
                                            "GUID": {
                                                "$ref": "#/definitions/guid",
                                                "description": "GUID of the AuxBus."
                                            }
                                        }
                                    }
                                },
                                "ReferencedStreamedFiles": {
                                    "type": "array",
                                    "description": "List of all streamed files used by this SoundBank or event.",
                                    "items": {
                                        "$ref": "#/definitions/fileReference",
                                        "description": "Referenced Streamed File entry"
                                    }
                                },
                                "ExcludedMemoryFiles": {
                                    "type": "array",
                                    "description": "List of excluded media in the SoundBank or event. If you are using prefetch on a streamed file, the prefetch size will be listed here.",
                                    "items": {
                                        "$ref": "#/definitions/fileReference",
                                        "description": "Exluced Memory File entry."
                                    }
                                },
                                "IncludedMemoryFiles": {
                                    "type": "array",
                                    "description": "List of included media in the SoundBank or event. If you are using prefetch on a streamed file, the prefetch size will be listed here.",
                                    "items": {
                                        "$ref": "#/definitions/fileReference",
                                        "description": "Included Memory File entry."
                                    }
                                },
                                "GameParameters": {
                                    "type": "array",
                                    "description": "List of all the Game Parameters/RTPC used in this SoundBank.",
                                    "items": {
                                        "type": "object",
                                        "description": "GameParameter information",
                                        "properties": {
                                            "Id": {
                                                "type": "string",
                                                "description": "Short ID of the Game Parameter."
                                            },
                                            "Name": {
                                                "type": "string",
                                                "description": "Name of the Game Parameter."
                                            },
                                            "GUID": {
                                                "$ref": "#/definitions/guid",
                                                "description": "GUID of the Game Parameter."
                                            }
                                        }
                                    }
                                },
                                "Triggers": {
                                    "type": "array",
                                    "description": "List of all Triggers used in this SoundBank.",
                                    "items": {
                                        "type": "object",
                                        "description": "Trigger information.",
                                        "properties": {
                                            "Id": {
                                                "type": "string",
                                                "description": "Short ID of the Trigger."
                                            },
                                            "Name": {
                                                "type": "string",
                                                "description": "Name of the Trigger."
                                            },
                                            "GUID": {
                                                "$ref": "#/definitions/guid",
                                                "description": "GUID of the Trigger."
                                            }
                                        }
                                    }
                                },
                                "StateGroups": {
                                    "type": "array",
                                    "description": "List of State Group included in this SoundBank.",
                                    "items": {
                                        "type": "object",
                                        "description": "State Group information.",
                                        "properties": {
                                            "Id": {
                                                "type": "string",
                                                "description": "Short ID of the State Group."
                                            },
                                            "Name": {
                                                "type": "string",
                                                "description": "Name of the State Group."
                                            },
                                            "ObjectPath": {
                                                "type": "string",
                                                "description": "Object path in the project."
                                            },
                                            "GUID": {
                                                "$ref": "#/definitions/guid",
                                                "description": "GUID of the State Group."
                                            },
                                            "States": {
                                                "type": "array",
                                                "description": "List of State included in this StateGroup.",
                                                "items": {
                                                    "type": "object",
                                                    "description": "State information",
                                                    "properties": {
                                                        "Id": {
                                                            "type": "string",
                                                            "description": "Short ID of the State."
                                                        },
                                                        "Name": {
                                                            "type": "string",
                                                            "description": "Name of the State."
                                                        },
                                                        "ObjectPath": {
                                                            "type": "string",
                                                            "description": "Object path in the project."
                                                        },
                                                        "GUID": {
                                                            "$ref": "#/definitions/guid",
                                                            "description": "GUID of the State."
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                "SwitchGroups": {
                                    "type": "array",
                                    "description": "List of SwitchGroup included in this SoundBank.",
                                    "items": {
                                        "type": "object",
                                        "description": "SwitchGroup information",
                                        "properties": {
                                            "Id": {
                                                "type": "string",
                                                "description": "Short ID of the SwitchGroup."
                                            },
                                            "Name": {
                                                "type": "string",
                                                "description": "Name of the SwitchGroup."
                                            },
                                            "ObjectPath": {
                                                "type": "string",
                                                "description": "Object path in the project."
                                            },
                                            "GUID": {
                                                "$ref": "#/definitions/guid",
                                                "description": "GUID of the SwitchGroup."
                                            },
                                            "Switches": {
                                                "type": "array",
                                                "description": "List of the Switch contained in this SwitchGroup.",
                                                "items": {
                                                    "type": "object",
                                                    "description": "Switch information.",
                                                    "properties": {
                                                        "Id": {
                                                            "type": "string",
                                                            "description": "Short ID of the Switch."
                                                        },
                                                        "Name": {
                                                            "type": "string",
                                                            "description": "Name of the Switch."
                                                        },
                                                        "ObjectPath": {
                                                            "type": "string",
                                                            "description": "Object path in the project."
                                                        },
                                                        "GUID": {
                                                            "$ref": "#/definitions/guid",
                                                            "description": "GUID of the Switch."
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                    },
                    "PluginInfo": {
                        "type": "object",
                        "description": "PluginInfo file info",
                        "properties": {
                            "Project": {
                                "type": "string",
                                "description": "Name of the Wwise project."
                            },
                            "Platform": {
                                "type": "string",
                                "description": "Name of the platform."
                            },
                            "BasePlatform": {
                                "type": "string",
                                "description": "The base platform the current platform is based off."
                            },
                            "Plugins": {
                                "type": "array",
                                "description": "List of the plugins",
                                "items": {
                                    "type": "object",
                                    "description": "Plugin information.",
                                    "properties": {
                                        "Name": {
                                            "type": "string",
                                            "description": "Display Name of the plugin."
                                        },
                                        "ID": {
                                            "type": "string",
                                            "description": "Short ID of the plugin."
                                        },
                                        "DLL": {
                                            "type": "string",
                                            "description": "Name of the DLL for the plugin."
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "required": [ "soundbank", "platform" ],
            "additionalProperties": false
        },
        {
            "id": "ak.wwise.core.soundbank.generationDone",
            "restrict": [ "userInterface", "commandLine" ],
            "seeAlso": [ "ak.wwise.core.soundbank.generate"],
            "description": "Sent when all SoundBanks are generated.",
            "optionsSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "publishSchema": {
                "type": "object",
                "properties": {
                    "logs": {
                        "type": "array",
                        "description": "The SoundBank generation log.",
                        "items": {
                            "$ref":"#/definitions/logCentralItem"
                        }
                    },
                    "error":{
                        "type": "string",
                        "description": "(DEPRECATED) The error message if an error occurred. Only present if an error occurred. You should check logs instead now."
                    }
                   
                },
                "additionalProperties": false
            }
        },
        {
            "id": "ak.wwise.core.log.itemAdded",
            "restrict": [ "userInterface", "commandLine" ],
            "seeAlso": [ "ak.wwise.core.log.get" ],
            "description": "Sent when an item is added to the log. This could be used to retrieve items added to the SoundBank generation log. To retrieve the complete log, refer to \\ref ak_wwise_core_log_get.",
            "optionsSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "publishSchema": {
                "type": "object",
                "properties": {
                    "channel":{
                        "$ref":"#/definitions/logCentralChannel",
                        "description": "The channel on which the item was added."
                    },
                    "item":{
                        "$ref":"#/definitions/logCentralItem",
                        "descriptionOverride": "The item added to the log."
                    }
                },
                "required": [ "channel", "item" ],
                "additionalProperties": false
            }
        },
        {
            "id": "ak.wwise.ui.selectionChanged",
            "restrict": [ "userInterface" ],
            "seeAlso": [ "ak.wwise.ui.commands.execute" ],
            "description": "Sent when the selection changes in the project.",
            "optionsSchema": {
                "$ref": "#/definitions/objectReturnOptions",
                "description": "Specifies the return options for every returned object."
            },
            "publishSchema": {
                "type": "object",
                "properties": {
                    "objects": {
                        "type": "array",
                        "description": "The selected objects, in the format specified in the options. Can be empty if no object is selected.",
                        "items": {
                            "$ref": "#/definitions/objectReturn",
                            "description": "The selected objects. You can use the options to specify which data to return. Default returns id and name."
                        }
                    }
                },
                "required": [ "objects" ],
                "additionalProperties": false
            }
        },
        {
            "id": "ak.wwise.core.project.loaded",
            "restrict": [ "userInterface" ],
            "seeAlso": [ "ak.wwise.ui.project.open" ],
            "description": "Sent when the project has been successfully loaded.",
            "optionsSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "publishSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            }
        },
        {
            "id": "ak.wwise.core.project.preClosed",
            "restrict": [ "userInterface" ],
            "seeAlso" : ["ak.wwise.ui.project.close" ],
            "description": "Sent when the project begins closing.",
            "optionsSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "publishSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            }
        },
        {
            "id": "ak.wwise.core.project.postClosed",
            "restrict": [ "userInterface" ],
            "seeAlso": [ "ak.wwise.ui.project.close" ],
            "description":"Sent when the after the project is completely closed.",
            "optionsSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "publishSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            }
        },
		{
            "id": "ak.wwise.core.project.saved",
            "restrict": [ "userInterface" ],
            "seeAlso": [ "ak.wwise.core.project.save" ],
            "description": "Sent when the project has been saved.",
            "optionsSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "publishSchema": {
                "type": "object",
                "properties": {
                    "modifiedPaths": {
                        "type": "array",
                        "description": "Array of paths.",
                        "items": {
                            "description": "Absolute paths to the Work Unit and Project files that were modified.",
							"type": "string"
                        }
                    }
                },
                "required": [ "modifiedPaths" ],
                "additionalProperties": false
            }
        },
        {
            "id": "ak.wwise.core.transport.stateChanged",
            "restrict": [ "userInterface", "commandLine" ],
            "seeAlso": [ "ak.wwise.core.transport.executeAction", "ak.wwise.core.transport.getState" ],
            "description": "Sent when the transport's state has changed.",
            "optionsSchema": {
                "type": "object",
                "properties": {
                    "transport": {
                        "$ref": "#/definitions/uint32",
                        "description": "The ID of the watched transport."
                    }
                },
                "required": [ "transport" ],
                "additionalProperties": false
            },
            "publishSchema": {
                "type": "object",
                "properties": {
                    "transport": {
                        "$ref": "#/definitions/uint32",
                        "description": "The ID of the watched transport."
                    },
                    "state": {
                        "type": "string",
                        "description": "The state of the transport object.",
                        "enum": [ "playing", "stopped", "paused" ]
                    },
                    "object": {
                        "$ref": "#/definitions/guid",
                        "description": "The ID (GUID) of the object controlled by the transport object."
                    },
                    "gameObject": {
                        "$ref": "#/definitions/gameObject",
                        "description": "The game object used by the transport object."
                    }
                },
                "required": [ "transport", "state", "object" ],
                "additionalProperties": false
            }
        },
        {
            "id": "ak.wwise.debug.assertFailed",
            "restrict": [ "userInterface", "commandLine" ],
            "seeAlso": [ "ak.wwise.debug.testAssert", "ak.wwise.debug.enableAsserts" ],
            "description": "Sent when an assert has failed. This is only available in Debug builds.",
            "optionsSchema": {
                "type": "object",
                "properties": { },
                "additionalProperties": false
            },
            "publishSchema": {
                "type": "object",
                "properties": {
                    "expression": {
                        "type": "string",
                        "description": "The expression that failed."
                    },
                    "fileName": {
                        "type": "string",
                        "description": "The name of the source file."
                    },
                    "lineNumber": {
                        "type": "number",
                        "description": "The line number."
                    }
                },
                "required": [ "expression", "fileName", "lineNumber" ],
                "additionalProperties": false
            }
        },
        {
            "id": "ak.wwise.ui.commands.executed",
            "restrict": [ "userInterface" ],
            "seeAlso": [ "ak.wwise.ui.commands.execute" ],
            "description": "Sent when a command is executed. The objects for which the command is executed are sent in the publication.",
            "optionsSchema": {
                "$ref": "#/definitions/objectReturnOptions",
                "description": "Specifies the return options for every object returned."
            },
            "publishSchema": {
                "type": "object",
                "properties": {
                    "command": {
                        "type": "string",
                        "description": "The command ID that was executed."
                    },
                    "objects": {
                        "type": "array",
                        "description": "The objects for which the command was executed. The objects are usually the selected objects. They are returned in the format specified in the options. Can be empty if no object is used.",
                        "items": {
                            "$ref": "#/definitions/objectReturn",
                            "description": "The objects. Use the options to specify which data to return. Default returns id and name."
                        }
                    },
                    "platforms": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/platformArg"
                        },
                        "description": "An array of platform for which the command is executed. Each platform is an ID (GUID)."
                    }
                },
                "required": [ "command", "objects", "platforms" ],
                "additionalProperties": false
            }
        },
        {
            "id": "ak.wwise.core.profiler.captureLog.itemAdded",
            "restrict": [ "userInterface", "commandLine" ],
            "seeAlso": [ "ak.wwise.core.profiler.startCapture", "ak.wwise.core.profiler.enableProfilerData" ],
            "description": "Sent when a new entry is added to the capture log. Note that all entries are being sent. No filtering is applied as opposed to the Capture Log view.",
            "optionsSchema": {
                "type": "object",
                "properties": {
                    "types": {
                        "type":"array",
                        "items": {
                            "type":"string",
                            "enum": [
                                "Notification",
                                "MusicTransition",
                                "Midi",
                                "ExternalSource",
                                "Marker",
                                "State",
                                "Switch",
                                "SetParameter",
                                "ParameterChanged",
                                "Bank",
                                "Prepare",
                                "Event",
                                "DialogueEventResolved",
                                "ActionTriggered",
                                "ActionDelayed",
                                "Message",
                                "APICall",
                                "GameObjectRegistration" 
                            ]
                        },
                        "description":"Defines which types of capture log items to receive. This filter can help to reduce the amount of data serialized. When no types are specified, all types are being sent."
                    }
                },
                "additionalProperties": false
            },
            "publishSchema": {
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "The entry type. Equivalent to the Type column in the Capture Log."
                    },
                    "time":{
                        "$ref": "#/definitions/int32",
                        "description": "The time at which the event occurred. This is the elapsed time in milliseconds since the initialization of the sound engine."
                    },
                    "objectId": {
                        "$ref": "#/definitions/guid",
                        "description": "The ID (GUID) of the object for the entry."
                    },
                    "objectName": {
                        "type": "string",
                        "description": "The name of the object for the entry."
                    },
                    "objectShortId": {
                        "$ref": "#/definitions/uint32",
                        "description": "The short ID (32-bit) of the object for the entry."
                    },
                    "gameObjectId": {
                        "$ref": "#/definitions/gameObject",
                        "description": "The game object ID for the entry."
                    },
                    "gameObjectName": {
                        "type": "string",
                        "description": "The game object name for the entry."
                    },
                    "playingId": {
                        "$ref": "#/definitions/uint32",
                        "description": "The playing ID for the entry."
                    },
                    "description": {
                        "type": "string",
                        "description": "The description for the entry. Equivalent to the Description column in the Capture Log."
                    },
                    "severity": {
                        "type":"string",
                        "enum": [ "Normal", "Message", "Error" ],
                        "description":"Normal: normal execution. \nMessage: Shown in yellow in the capture log. \nError: Shown in red in the capture log."
                    }
                },
                "required": [ "time", "type", "description", "severity" ],
                "additionalProperties": false
            }
        }
    ],
    "validators": [
        {
            "id": "ak.wwise.ui.commands",
            "type": "object",
            "properties": {
                "version": {
                    "type": "number",
                    "description": "Version of the command file. If none is specified, Wwise assumes it is compatible."
                },
                "commands": {
                    "$ref": "#/definitions/addOnsCommands",
                    "description": "Data for the commands to be registered."
                }
            },
            "required": [ "commands" ],
            "additionalProperties": false
        }
    ]
}
